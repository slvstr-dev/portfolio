// @ts-nocheck
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type Scalars = {
  Base64String: any;
  BigInt: any;
  Boolean: boolean;
  Date: any;
  DateTime: any;
  Float: number;
  GitObjectID: any;
  GitSSHRemote: any;
  GitTimestamp: any;
  HTML: any;
  ID: string;
  Int: number;
  PreciseDateTime: any;
  String: string;
  URI: any;
  X509Certificate: any;
};

/** Autogenerated return type of AbortQueuedMigrations */
export interface AbortQueuedMigrationsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Did the operation succeed? */
  success: Scalars['Boolean'] | null;
  __typename: 'AbortQueuedMigrationsPayload';
}

/** Autogenerated return type of AbortRepositoryMigration */
export interface AbortRepositoryMigrationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Did the operation succeed? */
  success: Scalars['Boolean'] | null;
  __typename: 'AbortRepositoryMigrationPayload';
}

/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The invitation that was accepted. */
  invitation: EnterpriseAdministratorInvitation | null;
  /** A message confirming the result of accepting an administrator invitation. */
  message: Scalars['String'] | null;
  __typename: 'AcceptEnterpriseAdministratorInvitationPayload';
}

/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The accepted topic. */
  topic: Topic | null;
  __typename: 'AcceptTopicSuggestionPayload';
}

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type Actor = (Bot | EnterpriseUserAccount | Mannequin | Organization | User) & {
  __isUnion?: true;
};

/** Location information for an actor */
export interface ActorLocation {
  /** City */
  city: Scalars['String'] | null;
  /** Country name */
  country: Scalars['String'] | null;
  /** Country code */
  countryCode: Scalars['String'] | null;
  /** Region name */
  region: Scalars['String'] | null;
  /** Region or state code */
  regionCode: Scalars['String'] | null;
  __typename: 'ActorLocation';
}

/** The actor's type. */
export type ActorType = 'USER' | 'TEAM';

/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayload {
  /** The item that was assigned. */
  assignable: Assignable | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'AddAssigneesToAssignablePayload';
}

/** Autogenerated return type of AddComment */
export interface AddCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The edge from the subject's comment connection. */
  commentEdge: IssueCommentEdge | null;
  /** The subject */
  subject: Node | null;
  /** The edge from the subject's timeline connection. */
  timelineEdge: IssueTimelineItemEdge | null;
  __typename: 'AddCommentPayload';
}

/** Autogenerated return type of AddDiscussionComment */
export interface AddDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created discussion comment. */
  comment: DiscussionComment | null;
  __typename: 'AddDiscussionCommentPayload';
}

/** Autogenerated return type of AddDiscussionPollVote */
export interface AddDiscussionPollVotePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The poll option that a vote was added to. */
  pollOption: DiscussionPollOption | null;
  __typename: 'AddDiscussionPollVotePayload';
}

/** Autogenerated return type of AddEnterpriseOrganizationMember */
export interface AddEnterpriseOrganizationMemberPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The users who were added to the organization. */
  users: User[] | null;
  __typename: 'AddEnterpriseOrganizationMemberPayload';
}

/** Autogenerated return type of AddEnterpriseSupportEntitlement */
export interface AddEnterpriseSupportEntitlementPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of adding the support entitlement. */
  message: Scalars['String'] | null;
  __typename: 'AddEnterpriseSupportEntitlementPayload';
}

/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item that was labeled. */
  labelable: Labelable | null;
  __typename: 'AddLabelsToLabelablePayload';
}

/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayload {
  /** The edge from the ProjectColumn's card connection. */
  cardEdge: ProjectCardEdge | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The ProjectColumn */
  projectColumn: ProjectColumn | null;
  __typename: 'AddProjectCardPayload';
}

/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The edge from the project's column connection. */
  columnEdge: ProjectColumnEdge | null;
  /** The project */
  project: Project | null;
  __typename: 'AddProjectColumnPayload';
}

/** Autogenerated return type of AddProjectV2DraftIssue */
export interface AddProjectV2DraftIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The draft issue added to the project. */
  projectItem: ProjectV2Item | null;
  __typename: 'AddProjectV2DraftIssuePayload';
}

/** Autogenerated return type of AddProjectV2ItemById */
export interface AddProjectV2ItemByIdPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item added to the project. */
  item: ProjectV2Item | null;
  __typename: 'AddProjectV2ItemByIdPayload';
}

/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created comment. */
  comment: PullRequestReviewComment | null;
  /** The edge from the review's comment connection. */
  commentEdge: PullRequestReviewCommentEdge | null;
  __typename: 'AddPullRequestReviewCommentPayload';
}

/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created pull request review. */
  pullRequestReview: PullRequestReview | null;
  /** The edge from the pull request's review connection. */
  reviewEdge: PullRequestReviewEdge | null;
  __typename: 'AddPullRequestReviewPayload';
}

/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created thread. */
  thread: PullRequestReviewThread | null;
  __typename: 'AddPullRequestReviewThreadPayload';
}

/** Autogenerated return type of AddPullRequestReviewThreadReply */
export interface AddPullRequestReviewThreadReplyPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created reply. */
  comment: PullRequestReviewComment | null;
  __typename: 'AddPullRequestReviewThreadReplyPayload';
}

/** Autogenerated return type of AddReaction */
export interface AddReactionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The reaction object. */
  reaction: Reaction | null;
  /** The reaction groups for the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** The reactable subject. */
  subject: Reactable | null;
  __typename: 'AddReactionPayload';
}

/** Autogenerated return type of AddStar */
export interface AddStarPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The starrable. */
  starrable: Starrable | null;
  __typename: 'AddStarPayload';
}

/** Autogenerated return type of AddUpvote */
export interface AddUpvotePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The votable subject. */
  subject: Votable | null;
  __typename: 'AddUpvotePayload';
}

/** Autogenerated return type of AddVerifiableDomain */
export interface AddVerifiableDomainPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The verifiable domain that was added. */
  domain: VerifiableDomain | null;
  __typename: 'AddVerifiableDomainPayload';
}

/** Represents an 'added_to_merge_queue' event on a given pull request. */
export interface AddedToMergeQueueEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who added this Pull Request to the merge queue */
  enqueuer: User | null;
  id: Scalars['ID'];
  /** The merge queue where this pull request was added to. */
  mergeQueue: MergeQueue | null;
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  __typename: 'AddedToMergeQueueEvent';
}

/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  __typename: 'AddedToProjectEvent';
}

/** Represents an announcement banner. */
export type AnnouncementBanner = (Enterprise | Organization) & { __isUnion?: true };

/** A GitHub App. */
export interface App {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The description of the app. */
  description: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The IP addresses of the app. */
  ipAllowListEntries: IpAllowListEntryConnection;
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars['String'];
  /** A URL pointing to the app's logo. */
  logoUrl: Scalars['URI'];
  /** The name of the app. */
  name: Scalars['String'];
  /** A slug based on the name of the app for use in URLs. */
  slug: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The URL to the app's homepage. */
  url: Scalars['URI'];
  __typename: 'App';
}

/** Autogenerated return type of ApproveDeployments */
export interface ApproveDeploymentsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The affected deployments. */
  deployments: Deployment[] | null;
  __typename: 'ApproveDeploymentsPayload';
}

/** Autogenerated return type of ApproveVerifiableDomain */
export interface ApproveVerifiableDomainPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The verifiable domain that was approved. */
  domain: VerifiableDomain | null;
  __typename: 'ApproveVerifiableDomainPayload';
}

/** Autogenerated return type of ArchiveProjectV2Item */
export interface ArchiveProjectV2ItemPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item archived from the project. */
  item: ProjectV2Item | null;
  __typename: 'ArchiveProjectV2ItemPayload';
}

/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository that was marked as archived. */
  repository: Repository | null;
  __typename: 'ArchiveRepositoryPayload';
}

/** An object that can have users assigned to it. */
export type Assignable = (Issue | PullRequest) & { __isUnion?: true };

/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the assignable associated with the event. */
  assignable: Assignable;
  /** Identifies the user or mannequin that was assigned. */
  assignee: Assignee | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   * Identifies the user who was assigned.
   */
  user: User | null;
  __typename: 'AssignedEvent';
}

/** Types that can be assigned to issues. */
export type Assignee = (Bot | Mannequin | Organization | User) & { __isUnion?: true };

/** An entry in the audit log. */
export type AuditEntry = (
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
) & { __isUnion?: true };

/** Types that can initiate an audit log event. */
export type AuditEntryActor = (Bot | Organization | User) & { __isUnion?: true };

/** Properties by which Audit Log connections can be ordered. */
export type AuditLogOrderField = 'CREATED_AT';

/** Represents a 'auto_merge_disabled' event on a given pull request. */
export interface AutoMergeDisabledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who disabled auto-merge for this Pull Request */
  disabler: User | null;
  id: Scalars['ID'];
  /** PullRequest referenced by event */
  pullRequest: PullRequest | null;
  /** The reason auto-merge was disabled */
  reason: Scalars['String'] | null;
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode: Scalars['String'] | null;
  __typename: 'AutoMergeDisabledEvent';
}

/** Represents a 'auto_merge_enabled' event on a given pull request. */
export interface AutoMergeEnabledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge for this Pull Request */
  enabler: User | null;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  __typename: 'AutoMergeEnabledEvent';
}

/** Represents an auto-merge request for a pull request */
export interface AutoMergeRequest {
  /** The email address of the author of this auto-merge request. */
  authorEmail: Scalars['String'] | null;
  /** The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging. */
  commitBody: Scalars['String'] | null;
  /** The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging */
  commitHeadline: Scalars['String'] | null;
  /** When was this auto-merge request was enabled. */
  enabledAt: Scalars['DateTime'] | null;
  /** The actor who created the auto-merge request. */
  enabledBy: Actor | null;
  /** The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging. */
  mergeMethod: PullRequestMergeMethod;
  /** The pull request that this auto-merge request is set against. */
  pullRequest: PullRequest;
  __typename: 'AutoMergeRequest';
}

/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export interface AutoRebaseEnabledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler: User | null;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  __typename: 'AutoRebaseEnabledEvent';
}

/** Represents a 'auto_squash_enabled' event on a given pull request. */
export interface AutoSquashEnabledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler: User | null;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  __typename: 'AutoSquashEnabledEvent';
}

/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The new base for this PR */
  newBase: Scalars['String'];
  /** The old base for this PR */
  oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'AutomaticBaseChangeFailedEvent';
}

/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The new base for this PR */
  newBase: Scalars['String'];
  /** The old base for this PR */
  oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'AutomaticBaseChangeSucceededEvent';
}

/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName: Scalars['String'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'BaseRefChangedEvent';
}

/** Represents a 'base_ref_deleted' event on a given pull request. */
export interface BaseRefDeletedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName: Scalars['String'] | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  __typename: 'BaseRefDeletedEvent';
}

/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit: Commit | null;
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref: Ref | null;
  __typename: 'BaseRefForcePushedEvent';
}

/** Represents a Git blame. */
export interface Blame {
  /** The list of ranges from a Git blame. */
  ranges: BlameRange[];
  __typename: 'Blame';
}

/** Represents a range of information from a Git blame. */
export interface BlameRange {
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */
  age: Scalars['Int'];
  /** Identifies the line author */
  commit: Commit;
  /** The ending line for the range */
  endingLine: Scalars['Int'];
  /** The starting line for the range */
  startingLine: Scalars['Int'];
  __typename: 'BlameRange';
}

/** Represents a Git blob. */
export interface Blob {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** Byte size of Blob object */
  byteSize: Scalars['Int'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['URI'];
  id: Scalars['ID'];
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  isBinary: Scalars['Boolean'] | null;
  /** Indicates whether the contents is truncated */
  isTruncated: Scalars['Boolean'];
  /** The Git object ID */
  oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Repository;
  /** UTF8 text data or null if the Blob is binary */
  text: Scalars['String'] | null;
  __typename: 'Blob';
}

/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface Bot {
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The username of the actor. */
  login: Scalars['String'];
  /** The HTTP path for this bot */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this bot */
  url: Scalars['URI'];
  __typename: 'Bot';
}

/** Types which can be actors for `BranchActorAllowance` objects. */
export type BranchActorAllowanceActor = (App | Team | User) & { __isUnion?: true };

/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParameters {
  /** How this rule will appear to users. */
  name: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate: Scalars['Boolean'];
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
  __typename: 'BranchNamePatternParameters';
}

/** A branch protection rule. */
export interface BranchProtectionRule {
  /** Can this branch be deleted. */
  allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars['Boolean'];
  /** Is branch creation a protected operation. */
  blocksCreations: Scalars['Boolean'];
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances: BypassForcePushAllowanceConnection;
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection;
  /** The actor who created this branch protection rule. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Can admins overwrite branch protection. */
  isAdminEnforced: Scalars['Boolean'];
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge: Scalars['Boolean'];
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch: Scalars['Boolean'];
  /** Repository refs that are protected by this rule */
  matchingRefs: RefConnection;
  /** Identifies the protection rule pattern. */
  pattern: Scalars['String'];
  /** A list push allowances for this branch protection rule. */
  pushAllowances: PushAllowanceConnection;
  /** The repository associated with this branch protection rule. */
  repository: Repository | null;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval: Scalars['Boolean'];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount: Scalars['Int'] | null;
  /** List of required deployment environments that must be deployed successfully to update matching branches */
  requiredDeploymentEnvironments: (Scalars['String'] | null)[] | null;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts: (Scalars['String'] | null)[] | null;
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks: RequiredStatusCheckDescription[] | null;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews: Scalars['Boolean'];
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are commits required to be signed. */
  requiresCommitSignatures: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars['Boolean'];
  /** Does this branch require deployment to specific environments before merging */
  requiresDeployments: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars['Boolean'];
  /** Are status checks required to update matching branches. */
  requiresStatusChecks: Scalars['Boolean'];
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks: Scalars['Boolean'];
  /** Is pushing to matching branches restricted. */
  restrictsPushes: Scalars['Boolean'];
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals: Scalars['Boolean'];
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;
  __typename: 'BranchProtectionRule';
}

/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflict {
  /** Identifies the branch protection rule. */
  branchProtectionRule: BranchProtectionRule | null;
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule: BranchProtectionRule | null;
  /** Identifies the branch ref that has conflicting rules */
  ref: Ref | null;
  __typename: 'BranchProtectionRuleConflict';
}

/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnection {
  /** A list of edges. */
  edges: (BranchProtectionRuleConflictEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (BranchProtectionRuleConflict | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'BranchProtectionRuleConflictConnection';
}

/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BranchProtectionRuleConflict | null;
  __typename: 'BranchProtectionRuleConflictEdge';
}

/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnection {
  /** A list of edges. */
  edges: (BranchProtectionRuleEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (BranchProtectionRule | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'BranchProtectionRuleConnection';
}

/** An edge in a connection. */
export interface BranchProtectionRuleEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BranchProtectionRule | null;
  __typename: 'BranchProtectionRuleEdge';
}

/** Types that can represent a repository ruleset bypass actor. */
export type BypassActor = (App | Team) & { __isUnion?: true };

/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
export interface BypassForcePushAllowance {
  /** The actor that can force push. */
  actor: BranchActorAllowanceActor | null;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule: BranchProtectionRule | null;
  id: Scalars['ID'];
  __typename: 'BypassForcePushAllowance';
}

/** The connection type for BypassForcePushAllowance. */
export interface BypassForcePushAllowanceConnection {
  /** A list of edges. */
  edges: (BypassForcePushAllowanceEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (BypassForcePushAllowance | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'BypassForcePushAllowanceConnection';
}

/** An edge in a connection. */
export interface BypassForcePushAllowanceEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BypassForcePushAllowance | null;
  __typename: 'BypassForcePushAllowanceEdge';
}

/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
export interface BypassPullRequestAllowance {
  /** The actor that can bypass. */
  actor: BranchActorAllowanceActor | null;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule: BranchProtectionRule | null;
  id: Scalars['ID'];
  __typename: 'BypassPullRequestAllowance';
}

/** The connection type for BypassPullRequestAllowance. */
export interface BypassPullRequestAllowanceConnection {
  /** A list of edges. */
  edges: (BypassPullRequestAllowanceEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (BypassPullRequestAllowance | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'BypassPullRequestAllowanceConnection';
}

/** An edge in a connection. */
export interface BypassPullRequestAllowanceEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BypassPullRequestAllowance | null;
  __typename: 'BypassPullRequestAllowanceEdge';
}

/** The Common Vulnerability Scoring System */
export interface CVSS {
  /** The CVSS score associated with this advisory */
  score: Scalars['Float'];
  /** The CVSS vector string associated with this advisory */
  vectorString: Scalars['String'] | null;
  __typename: 'CVSS';
}

/** A common weakness enumeration */
export interface CWE {
  /** The id of the CWE */
  cweId: Scalars['String'];
  /** A detailed description of this CWE */
  description: Scalars['String'];
  id: Scalars['ID'];
  /** The name of this CWE */
  name: Scalars['String'];
  __typename: 'CWE';
}

/** The connection type for CWE. */
export interface CWEConnection {
  /** A list of edges. */
  edges: (CWEEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CWE | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CWEConnection';
}

/** An edge in a connection. */
export interface CWEEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CWE | null;
  __typename: 'CWEEdge';
}

/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The invitation that was canceled. */
  invitation: EnterpriseAdministratorInvitation | null;
  /** A message confirming the result of canceling an administrator invitation. */
  message: Scalars['String'] | null;
  __typename: 'CancelEnterpriseAdminInvitationPayload';
}

/** Autogenerated return type of CancelSponsorship */
export interface CancelSponsorshipPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier: SponsorsTier | null;
  __typename: 'CancelSponsorshipPayload';
}

/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Your updated status. */
  status: UserStatus | null;
  __typename: 'ChangeUserStatusPayload';
}

/** A single check annotation. */
export interface CheckAnnotation {
  /** The annotation's severity level. */
  annotationLevel: CheckAnnotationLevel | null;
  /** The path to the file that this annotation was made on. */
  blobUrl: Scalars['URI'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The position of this annotation. */
  location: CheckAnnotationSpan;
  /** The annotation's message. */
  message: Scalars['String'];
  /** The path that this annotation was made on. */
  path: Scalars['String'];
  /** Additional information about the annotation. */
  rawDetails: Scalars['String'] | null;
  /** The annotation's title */
  title: Scalars['String'] | null;
  __typename: 'CheckAnnotation';
}

/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnection {
  /** A list of edges. */
  edges: (CheckAnnotationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CheckAnnotation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CheckAnnotationConnection';
}

/** An edge in a connection. */
export interface CheckAnnotationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CheckAnnotation | null;
  __typename: 'CheckAnnotationEdge';
}

/** Represents an annotation's information level. */
export type CheckAnnotationLevel = 'FAILURE' | 'NOTICE' | 'WARNING';

/** A character position in a check annotation. */
export interface CheckAnnotationPosition {
  /** Column number (1 indexed). */
  column: Scalars['Int'] | null;
  /** Line number (1 indexed). */
  line: Scalars['Int'];
  __typename: 'CheckAnnotationPosition';
}

/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpan {
  /** End position (inclusive). */
  end: CheckAnnotationPosition;
  /** Start position (inclusive). */
  start: CheckAnnotationPosition;
  __typename: 'CheckAnnotationSpan';
}

/** The possible states for a check suite or run conclusion. */
export type CheckConclusionState =
  | 'ACTION_REQUIRED'
  | 'TIMED_OUT'
  | 'CANCELLED'
  | 'FAILURE'
  | 'SUCCESS'
  | 'NEUTRAL'
  | 'SKIPPED'
  | 'STARTUP_FAILURE'
  | 'STALE';

/** A check run. */
export interface CheckRun {
  /** The check run's annotations */
  annotations: CheckAnnotationConnection | null;
  /** The check suite that this run is a part of. */
  checkSuite: CheckSuite;
  /** Identifies the date and time when the check run was completed. */
  completedAt: Scalars['DateTime'] | null;
  /** The conclusion of the check run. */
  conclusion: CheckConclusionState | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The corresponding deployment for this job, if any */
  deployment: Deployment | null;
  /** The URL from which to find full details of the check run on the integrator's site. */
  detailsUrl: Scalars['URI'] | null;
  /** A reference for the check run on the integrator's system. */
  externalId: Scalars['String'] | null;
  id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars['Boolean'];
  /** The name of the check for this check run. */
  name: Scalars['String'];
  /** Information about a pending deployment, if any, in this check run */
  pendingDeploymentRequest: DeploymentRequest | null;
  /** The permalink to the check run summary. */
  permalink: Scalars['URI'];
  /** The repository associated with this check run. */
  repository: Repository;
  /** The HTTP path for this check run. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the check run was started. */
  startedAt: Scalars['DateTime'] | null;
  /** The current status of the check run. */
  status: CheckStatusState;
  /** The check run's steps */
  steps: CheckStepConnection | null;
  /** A string representing the check run's summary */
  summary: Scalars['String'] | null;
  /** A string representing the check run's text */
  text: Scalars['String'] | null;
  /** A string representing the check run */
  title: Scalars['String'] | null;
  /** The HTTP URL for this check run. */
  url: Scalars['URI'];
  __typename: 'CheckRun';
}

/** The connection type for CheckRun. */
export interface CheckRunConnection {
  /** A list of edges. */
  edges: (CheckRunEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CheckRun | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CheckRunConnection';
}

/** An edge in a connection. */
export interface CheckRunEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CheckRun | null;
  __typename: 'CheckRunEdge';
}

/** The possible states of a check run in a status rollup. */
export type CheckRunState =
  | 'ACTION_REQUIRED'
  | 'CANCELLED'
  | 'COMPLETED'
  | 'FAILURE'
  | 'IN_PROGRESS'
  | 'NEUTRAL'
  | 'PENDING'
  | 'QUEUED'
  | 'SKIPPED'
  | 'STALE'
  | 'STARTUP_FAILURE'
  | 'SUCCESS'
  | 'TIMED_OUT'
  | 'WAITING';

/** Represents a count of the state of a check run. */
export interface CheckRunStateCount {
  /** The number of check runs with this state. */
  count: Scalars['Int'];
  /** The state of a check run. */
  state: CheckRunState;
  __typename: 'CheckRunStateCount';
}

/** The possible types of check runs. */
export type CheckRunType = 'ALL' | 'LATEST';

/** The possible states for a check suite or run status. */
export type CheckStatusState =
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'WAITING'
  | 'PENDING'
  | 'REQUESTED';

/** A single check step. */
export interface CheckStep {
  /** Identifies the date and time when the check step was completed. */
  completedAt: Scalars['DateTime'] | null;
  /** The conclusion of the check step. */
  conclusion: CheckConclusionState | null;
  /** A reference for the check step on the integrator's system. */
  externalId: Scalars['String'] | null;
  /** The step's name. */
  name: Scalars['String'];
  /** The index of the step in the list of steps of the parent check run. */
  number: Scalars['Int'];
  /** Number of seconds to completion. */
  secondsToCompletion: Scalars['Int'] | null;
  /** Identifies the date and time when the check step was started. */
  startedAt: Scalars['DateTime'] | null;
  /** The current status of the check step. */
  status: CheckStatusState;
  __typename: 'CheckStep';
}

/** The connection type for CheckStep. */
export interface CheckStepConnection {
  /** A list of edges. */
  edges: (CheckStepEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CheckStep | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CheckStepConnection';
}

/** An edge in a connection. */
export interface CheckStepEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CheckStep | null;
  __typename: 'CheckStepEdge';
}

/** A check suite. */
export interface CheckSuite {
  /** The GitHub App which created this check suite. */
  app: App | null;
  /** The name of the branch for this check suite. */
  branch: Ref | null;
  /** The check runs associated with a check suite. */
  checkRuns: CheckRunConnection | null;
  /** The commit for this check suite */
  commit: Commit;
  /** The conclusion of this check suite. */
  conclusion: CheckConclusionState | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who triggered the check suite. */
  creator: User | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests: PullRequestConnection | null;
  /** The push that triggered this check suite. */
  push: Push | null;
  /** The repository associated with this check suite. */
  repository: Repository;
  /** The HTTP path for this check suite */
  resourcePath: Scalars['URI'];
  /** The status of this check suite. */
  status: CheckStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this check suite */
  url: Scalars['URI'];
  /** The workflow run associated with this check suite. */
  workflowRun: WorkflowRun | null;
  __typename: 'CheckSuite';
}

/** The connection type for CheckSuite. */
export interface CheckSuiteConnection {
  /** A list of edges. */
  edges: (CheckSuiteEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CheckSuite | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CheckSuiteConnection';
}

/** An edge in a connection. */
export interface CheckSuiteEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CheckSuite | null;
  __typename: 'CheckSuiteEdge';
}

/** An object which can have its data claimed or claim data from another. */
export type Claimable = (Mannequin | User) & { __isUnion?: true };

/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item that was unlabeled. */
  labelable: Labelable | null;
  __typename: 'ClearLabelsFromLabelablePayload';
}

/** Autogenerated return type of ClearProjectV2ItemFieldValue */
export interface ClearProjectV2ItemFieldValuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated item. */
  projectV2Item: ProjectV2Item | null;
  __typename: 'ClearProjectV2ItemFieldValuePayload';
}

/** Autogenerated return type of CloneProject */
export interface CloneProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId: Scalars['String'] | null;
  /** The new cloned project. */
  project: Project | null;
  __typename: 'CloneProjectPayload';
}

/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new repository. */
  repository: Repository | null;
  __typename: 'CloneTemplateRepositoryPayload';
}

/** An object that can be closed */
export type Closable = (Discussion | Issue | Milestone | Project | ProjectV2 | PullRequest) & {
  __isUnion?: true;
};

/** Autogenerated return type of CloseDiscussion */
export interface CloseDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that was closed. */
  discussion: Discussion | null;
  __typename: 'CloseDiscussionPayload';
}

/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was closed. */
  issue: Issue | null;
  __typename: 'CloseIssuePayload';
}

/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that was closed. */
  pullRequest: PullRequest | null;
  __typename: 'ClosePullRequestPayload';
}

/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Object that was closed. */
  closable: Closable;
  /** Object which triggered the creation of this event. */
  closer: Closer | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The HTTP path for this closed event. */
  resourcePath: Scalars['URI'];
  /** The reason the issue state was changed to closed. */
  stateReason: IssueStateReason | null;
  /** The HTTP URL for this closed event. */
  url: Scalars['URI'];
  __typename: 'ClosedEvent';
}

/** The object which triggered a `ClosedEvent`. */
export type Closer = (Commit | PullRequest) & { __isUnion?: true };

/** The Code of Conduct for a repository */
export interface CodeOfConduct {
  /** The body of the Code of Conduct */
  body: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The key for the Code of Conduct */
  key: Scalars['String'];
  /** The formal name of the Code of Conduct */
  name: Scalars['String'];
  /** The HTTP path for this Code of Conduct */
  resourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this Code of Conduct */
  url: Scalars['URI'] | null;
  __typename: 'CodeOfConduct';
}

/** Collaborators affiliation level with a subject. */
export type CollaboratorAffiliation = 'OUTSIDE' | 'DIRECT' | 'ALL';

/** Represents a comment. */
export type Comment = (
  | CommitComment
  | Discussion
  | DiscussionComment
  | GistComment
  | Issue
  | IssueComment
  | PullRequest
  | PullRequestReview
  | PullRequestReviewComment
  | TeamDiscussion
  | TeamDiscussionComment
) & { __isUnion?: true };

/** A comment author association with repository. */
export type CommentAuthorAssociation =
  | 'MEMBER'
  | 'OWNER'
  | 'MANNEQUIN'
  | 'COLLABORATOR'
  | 'CONTRIBUTOR'
  | 'FIRST_TIME_CONTRIBUTOR'
  | 'FIRST_TIMER'
  | 'NONE';

/** The possible errors that will prevent a user from updating a comment. */
export type CommentCannotUpdateReason =
  | 'ARCHIVED'
  | 'INSUFFICIENT_ACCESS'
  | 'LOCKED'
  | 'LOGIN_REQUIRED'
  | 'MAINTENANCE'
  | 'VERIFIED_EMAIL_REQUIRED'
  | 'DENIED';

/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The user who authored the deleted comment. */
  deletedCommentAuthor: Actor | null;
  id: Scalars['ID'];
  __typename: 'CommentDeletedEvent';
}

/** Represents a Git commit. */
export interface Commit {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The number of additions in this commit. */
  additions: Scalars['Int'];
  /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */
  associatedPullRequests: PullRequestConnection | null;
  /** Authorship details of the commit. */
  author: GitActor | null;
  /** Check if the committer and the author match. */
  authoredByCommitter: Scalars['Boolean'];
  /** The datetime when this commit was authored. */
  authoredDate: Scalars['DateTime'];
  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   *
   */
  authors: GitActorConnection;
  /** Fetches `git blame` information. */
  blame: Blame;
  /**
   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.
   * We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
   */
  changedFiles: Scalars['Int'];
  /** The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`. */
  changedFilesIfAvailable: Scalars['Int'] | null;
  /** The check suites associated with a commit. */
  checkSuites: CheckSuiteConnection | null;
  /** Comments made on the commit. */
  comments: CommitCommentConnection;
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['URI'];
  /** The datetime when this commit was committed. */
  committedDate: Scalars['DateTime'];
  /** Check if committed via GitHub web UI. */
  committedViaWeb: Scalars['Boolean'];
  /** Committer details of the commit. */
  committer: GitActor | null;
  /** The number of deletions in this commit. */
  deletions: Scalars['Int'];
  /** The deployments associated with a commit. */
  deployments: DeploymentConnection | null;
  /** The tree entry representing the file located at the given path. */
  file: TreeEntry | null;
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  history: CommitHistoryConnection;
  id: Scalars['ID'];
  /** The Git commit message */
  message: Scalars['String'];
  /** The Git commit message body */
  messageBody: Scalars['String'];
  /** The commit message body rendered to HTML. */
  messageBodyHTML: Scalars['HTML'];
  /** The Git commit message headline */
  messageHeadline: Scalars['String'];
  /** The commit message headline rendered to HTML. */
  messageHeadlineHTML: Scalars['HTML'];
  /** The Git object ID */
  oid: Scalars['GitObjectID'];
  /** The organization this commit was made on behalf of. */
  onBehalfOf: Organization | null;
  /** The parents of a commit. */
  parents: CommitConnection;
  /**
   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC.
   * The datetime when this commit was pushed.
   */
  pushedDate: Scalars['DateTime'] | null;
  /** The Repository this commit belongs to */
  repository: Repository;
  /** The HTTP path for this commit */
  resourcePath: Scalars['URI'];
  /** Commit signing information, if present. */
  signature: GitSignature | null;
  /** Status information for this commit */
  status: Status | null;
  /** Check and Status rollup information for this commit. */
  statusCheckRollup: StatusCheckRollup | null;
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  submodules: SubmoduleConnection;
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: Scalars['URI'];
  /** Commit's root Tree */
  tree: Tree;
  /** The HTTP path for the tree of this commit */
  treeResourcePath: Scalars['URI'];
  /** The HTTP URL for the tree of this commit */
  treeUrl: Scalars['URI'];
  /** The HTTP URL for this commit */
  url: Scalars['URI'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: Scalars['URI'];
  __typename: 'Commit';
}

/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParameters {
  /** How this rule will appear to users. */
  name: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate: Scalars['Boolean'];
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
  __typename: 'CommitAuthorEmailPatternParameters';
}

/** Represents a comment on a given Commit. */
export interface CommitComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** Identifies the comment body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment, if the commit exists. */
  commit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** Identifies the file path associated with the comment. */
  path: Scalars['String'] | null;
  /** Identifies the line position associated with the comment. */
  position: Scalars['Int'] | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path permalink for this commit comment. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this commit comment. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'CommitComment';
}

/** The connection type for CommitComment. */
export interface CommitCommentConnection {
  /** A list of edges. */
  edges: (CommitCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CommitComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CommitCommentConnection';
}

/** An edge in a connection. */
export interface CommitCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CommitComment | null;
  __typename: 'CommitCommentEdge';
}

/** A thread of comments on a commit. */
export interface CommitCommentThread {
  /** The comments that exist in this thread. */
  comments: CommitCommentConnection;
  /** The commit the comments were made on. */
  commit: Commit | null;
  id: Scalars['ID'];
  /** The file the comments were made on. */
  path: Scalars['String'] | null;
  /** The position in the diff for the commit that the comment was made on. */
  position: Scalars['Int'] | null;
  /** The repository associated with this node. */
  repository: Repository;
  __typename: 'CommitCommentThread';
}

/** The connection type for Commit. */
export interface CommitConnection {
  /** A list of edges. */
  edges: (CommitEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Commit | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CommitConnection';
}

/** Properties by which commit contribution connections can be ordered. */
export type CommitContributionOrderField = 'OCCURRED_AT' | 'COMMIT_COUNT';

/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepository {
  /** The commit contributions, each representing a day. */
  contributions: CreatedCommitContributionConnection;
  /** The repository in which the commits were made. */
  repository: Repository;
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url: Scalars['URI'];
  __typename: 'CommitContributionsByRepository';
}

/** An edge in a connection. */
export interface CommitEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Commit | null;
  __typename: 'CommitEdge';
}

/** The connection type for Commit. */
export interface CommitHistoryConnection {
  /** A list of edges. */
  edges: (CommitEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Commit | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CommitHistoryConnection';
}

/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParameters {
  /** How this rule will appear to users. */
  name: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate: Scalars['Boolean'];
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
  __typename: 'CommitMessagePatternParameters';
}

/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParameters {
  /** How this rule will appear to users. */
  name: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate: Scalars['Boolean'];
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
  __typename: 'CommitterEmailPatternParameters';
}

/** Represents a comparison between two commit revisions. */
export interface Comparison {
  /** The number of commits ahead of the base branch. */
  aheadBy: Scalars['Int'];
  /** The base revision of this comparison. */
  baseTarget: GitObject;
  /** The number of commits behind the base branch. */
  behindBy: Scalars['Int'];
  /** The commits which compose this comparison. */
  commits: ComparisonCommitConnection;
  /** The head revision of this comparison. */
  headTarget: GitObject;
  id: Scalars['ID'];
  /** The status of this comparison. */
  status: ComparisonStatus;
  __typename: 'Comparison';
}

/** The connection type for Commit. */
export interface ComparisonCommitConnection {
  /** The total count of authors and co-authors across all commits. */
  authorCount: Scalars['Int'];
  /** A list of edges. */
  edges: (CommitEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Commit | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ComparisonCommitConnection';
}

/** The status of a git comparison between two refs. */
export type ComparisonStatus = 'DIVERGED' | 'AHEAD' | 'BEHIND' | 'IDENTICAL';

/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request that made the reference. */
  source: ReferencedSubject;
  /** Issue or pull request which was connected. */
  subject: ReferencedSubject;
  __typename: 'ConnectedEvent';
}

/** The Contributing Guidelines for a repository. */
export interface ContributingGuidelines {
  /** The body of the Contributing Guidelines. */
  body: Scalars['String'] | null;
  /** The HTTP path for the Contributing Guidelines. */
  resourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the Contributing Guidelines. */
  url: Scalars['URI'] | null;
  __typename: 'ContributingGuidelines';
}

/** Represents a contribution a user made on GitHub, such as opening an issue. */
export type Contribution = (
  | CreatedCommitContribution
  | CreatedIssueContribution
  | CreatedPullRequestContribution
  | CreatedPullRequestReviewContribution
  | CreatedRepositoryContribution
  | JoinedGitHubContribution
  | RestrictedContribution
) & { __isUnion?: true };

/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendar {
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors: Scalars['String'][];
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween: Scalars['Boolean'];
  /** A list of the months of contributions in this calendar. */
  months: ContributionCalendarMonth[];
  /** The count of total contributions in the calendar. */
  totalContributions: Scalars['Int'];
  /** A list of the weeks of contributions in this calendar. */
  weeks: ContributionCalendarWeek[];
  __typename: 'ContributionCalendar';
}

/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDay {
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color: Scalars['String'];
  /** How many contributions were made by the user on this day. */
  contributionCount: Scalars['Int'];
  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */
  contributionLevel: ContributionLevel;
  /** The day this square represents. */
  date: Scalars['Date'];
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday: Scalars['Int'];
  __typename: 'ContributionCalendarDay';
}

/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonth {
  /** The date of the first day of this month. */
  firstDay: Scalars['Date'];
  /** The name of the month. */
  name: Scalars['String'];
  /** How many weeks started in this month. */
  totalWeeks: Scalars['Int'];
  /** The year the month occurred in. */
  year: Scalars['Int'];
  __typename: 'ContributionCalendarMonth';
}

/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeek {
  /** The days of contributions in this week. */
  contributionDays: ContributionCalendarDay[];
  /** The date of the earliest square in this week. */
  firstDay: Scalars['Date'];
  __typename: 'ContributionCalendarWeek';
}

/** Varying levels of contributions from none to many. */
export type ContributionLevel =
  | 'NONE'
  | 'FIRST_QUARTILE'
  | 'SECOND_QUARTILE'
  | 'THIRD_QUARTILE'
  | 'FOURTH_QUARTILE';

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollection {
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository: CommitContributionsByRepository[];
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar: ContributionCalendar;
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears: Scalars['Int'][];
  /**
   * Determine if this collection's time span ends in the current month.
   *
   */
  doesEndInCurrentMonth: Scalars['Boolean'];
  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate: Scalars['Date'] | null;
  /** The ending date and time of this collection. */
  endedAt: Scalars['DateTime'];
  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstIssueContribution: CreatedIssueOrRestrictedContribution | null;
  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution | null;
  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution | null;
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast: Scalars['Boolean'];
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions: Scalars['Boolean'];
  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions: Scalars['Boolean'];
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay: Scalars['Boolean'];
  /** A list of issues the user opened. */
  issueContributions: CreatedIssueContributionConnection;
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository: IssueContributionsByRepository[];
  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution: JoinedGitHubContribution | null;
  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate: Scalars['Date'] | null;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   *
   */
  mostRecentCollectionWithActivity: ContributionsCollection | null;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   *
   */
  mostRecentCollectionWithoutActivity: ContributionsCollection | null;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   *
   */
  popularIssueContribution: CreatedIssueContribution | null;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   *
   */
  popularPullRequestContribution: CreatedPullRequestContribution | null;
  /** Pull request contributions made by the user. */
  pullRequestContributions: CreatedPullRequestContributionConnection;
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository: PullRequestContributionsByRepository[];
  /**
   * Pull request review contributions made by the user. Returns the most recently
   * submitted review for each PR reviewed by the user.
   *
   */
  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection;
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository: PullRequestReviewContributionsByRepository[];
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions: CreatedRepositoryContributionConnection;
  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount: Scalars['Int'];
  /** The beginning date and time of this collection. */
  startedAt: Scalars['DateTime'];
  /** How many commits were made by the user in this time span. */
  totalCommitContributions: Scalars['Int'];
  /** How many issues the user opened. */
  totalIssueContributions: Scalars['Int'];
  /** How many pull requests the user opened. */
  totalPullRequestContributions: Scalars['Int'];
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions: Scalars['Int'];
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits: Scalars['Int'];
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues: Scalars['Int'];
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews: Scalars['Int'];
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests: Scalars['Int'];
  /** How many repositories the user created. */
  totalRepositoryContributions: Scalars['Int'];
  /** The user who made the contributions in this collection. */
  user: User;
  __typename: 'ContributionsCollection';
}

/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated ProjectCard. */
  projectCard: ProjectCard | null;
  __typename: 'ConvertProjectCardNoteToIssuePayload';
}

/** Autogenerated return type of ConvertPullRequestToDraft */
export interface ConvertPullRequestToDraftPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that is now a draft. */
  pullRequest: PullRequest | null;
  __typename: 'ConvertPullRequestToDraftPayload';
}

/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** The HTTP path for this convert to draft event. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this convert to draft event. */
  url: Scalars['URI'];
  __typename: 'ConvertToDraftEvent';
}

/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  __typename: 'ConvertedNoteToIssueEvent';
}

/** Represents a 'converted_to_discussion' event on a given issue. */
export interface ConvertedToDiscussionEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The discussion that the issue was converted into. */
  discussion: Discussion | null;
  id: Scalars['ID'];
  __typename: 'ConvertedToDiscussionEvent';
}

/** Autogenerated return type of CopyProjectV2 */
export interface CopyProjectV2Payload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The copied project. */
  projectV2: ProjectV2 | null;
  __typename: 'CopyProjectV2Payload';
}

/** Autogenerated return type of CreateAttributionInvitation */
export interface CreateAttributionInvitationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The owner scoping the reattributable data. */
  owner: Organization | null;
  /** The account owning the data to reattribute. */
  source: Claimable | null;
  /** The account which may claim the data. */
  target: Claimable | null;
  __typename: 'CreateAttributionInvitationPayload';
}

/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayload {
  /** The newly created BranchProtectionRule. */
  branchProtectionRule: BranchProtectionRule | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'CreateBranchProtectionRulePayload';
}

/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayload {
  /** The newly created check run. */
  checkRun: CheckRun | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'CreateCheckRunPayload';
}

/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayload {
  /** The newly created check suite. */
  checkSuite: CheckSuite | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'CreateCheckSuitePayload';
}

/** Autogenerated return type of CreateCommitOnBranch */
export interface CreateCommitOnBranchPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new commit. */
  commit: Commit | null;
  /** The ref which has been updated to point to the new commit. */
  ref: Ref | null;
  __typename: 'CreateCommitOnBranchPayload';
}

/** Autogenerated return type of CreateDiscussion */
export interface CreateDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that was just created. */
  discussion: Discussion | null;
  __typename: 'CreateDiscussionPayload';
}

/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise that owns the created organization. */
  enterprise: Enterprise | null;
  /** The organization that was created. */
  organization: Organization | null;
  __typename: 'CreateEnterpriseOrganizationPayload';
}

/** Autogenerated return type of CreateEnvironment */
export interface CreateEnvironmentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new or existing environment. */
  environment: Environment | null;
  __typename: 'CreateEnvironmentPayload';
}

/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The IP allow list entry that was created. */
  ipAllowListEntry: IpAllowListEntry | null;
  __typename: 'CreateIpAllowListEntryPayload';
}

/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new issue. */
  issue: Issue | null;
  __typename: 'CreateIssuePayload';
}

/** Autogenerated return type of CreateLinkedBranch */
export interface CreateLinkedBranchPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was linked to. */
  issue: Issue | null;
  /** The new branch issue reference. */
  linkedBranch: LinkedBranch | null;
  __typename: 'CreateLinkedBranchPayload';
}

/** Autogenerated return type of CreateMigrationSource */
export interface CreateMigrationSourcePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The created migration source. */
  migrationSource: MigrationSource | null;
  __typename: 'CreateMigrationSourcePayload';
}

/** Autogenerated return type of CreateProject */
export interface CreateProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new project. */
  project: Project | null;
  __typename: 'CreateProjectPayload';
}

/** Autogenerated return type of CreateProjectV2Field */
export interface CreateProjectV2FieldPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new field. */
  projectV2Field: ProjectV2FieldConfiguration | null;
  __typename: 'CreateProjectV2FieldPayload';
}

/** Autogenerated return type of CreateProjectV2 */
export interface CreateProjectV2Payload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new project. */
  projectV2: ProjectV2 | null;
  __typename: 'CreateProjectV2Payload';
}

/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new pull request. */
  pullRequest: PullRequest | null;
  __typename: 'CreatePullRequestPayload';
}

/** Autogenerated return type of CreateRef */
export interface CreateRefPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created ref. */
  ref: Ref | null;
  __typename: 'CreateRefPayload';
}

/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new repository. */
  repository: Repository | null;
  __typename: 'CreateRepositoryPayload';
}

/** Autogenerated return type of CreateRepositoryRuleset */
export interface CreateRepositoryRulesetPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created Ruleset. */
  ruleset: RepositoryRuleset | null;
  __typename: 'CreateRepositoryRulesetPayload';
}

/** Autogenerated return type of CreateSponsorsListing */
export interface CreateSponsorsListingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new GitHub Sponsors profile. */
  sponsorsListing: SponsorsListing | null;
  __typename: 'CreateSponsorsListingPayload';
}

/** Autogenerated return type of CreateSponsorsTier */
export interface CreateSponsorsTierPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new tier. */
  sponsorsTier: SponsorsTier | null;
  __typename: 'CreateSponsorsTierPayload';
}

/** Autogenerated return type of CreateSponsorship */
export interface CreateSponsorshipPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The sponsorship that was started. */
  sponsorship: Sponsorship | null;
  __typename: 'CreateSponsorshipPayload';
}

/** Autogenerated return type of CreateSponsorships */
export interface CreateSponsorshipsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The users and organizations who received a sponsorship. */
  sponsorables: Sponsorable[] | null;
  __typename: 'CreateSponsorshipsPayload';
}

/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The new comment.
   */
  teamDiscussionComment: TeamDiscussionComment | null;
  __typename: 'CreateTeamDiscussionCommentPayload';
}

/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The new discussion.
   */
  teamDiscussion: TeamDiscussion | null;
  __typename: 'CreateTeamDiscussionPayload';
}

/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContribution {
  /** How many commits were made on this day to this repository by the user. */
  commitCount: Scalars['Int'];
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The repository the user made a commit in. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'CreatedCommitContribution';
}

/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnection {
  /** A list of edges. */
  edges: (CreatedCommitContributionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CreatedCommitContribution | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   *
   */
  totalCount: Scalars['Int'];
  __typename: 'CreatedCommitContributionConnection';
}

/** An edge in a connection. */
export interface CreatedCommitContributionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CreatedCommitContribution | null;
  __typename: 'CreatedCommitContributionEdge';
}

/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** The issue that was opened. */
  issue: Issue;
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'CreatedIssueContribution';
}

/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnection {
  /** A list of edges. */
  edges: (CreatedIssueContributionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CreatedIssueContribution | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CreatedIssueContributionConnection';
}

/** An edge in a connection. */
export interface CreatedIssueContributionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CreatedIssueContribution | null;
  __typename: 'CreatedIssueContributionEdge';
}

/** Represents either a issue the viewer can access or a restricted contribution. */
export type CreatedIssueOrRestrictedContribution = (
  | CreatedIssueContribution
  | RestrictedContribution
) & { __isUnion?: true };

/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The pull request that was opened. */
  pullRequest: PullRequest;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'CreatedPullRequestContribution';
}

/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnection {
  /** A list of edges. */
  edges: (CreatedPullRequestContributionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CreatedPullRequestContribution | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CreatedPullRequestContributionConnection';
}

/** An edge in a connection. */
export interface CreatedPullRequestContributionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CreatedPullRequestContribution | null;
  __typename: 'CreatedPullRequestContributionEdge';
}

/** Represents either a pull request the viewer can access or a restricted contribution. */
export type CreatedPullRequestOrRestrictedContribution = (
  | CreatedPullRequestContribution
  | RestrictedContribution
) & { __isUnion?: true };

/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The pull request the user reviewed. */
  pullRequest: PullRequest;
  /** The review the user left on the pull request. */
  pullRequestReview: PullRequestReview;
  /** The repository containing the pull request that the user reviewed. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'CreatedPullRequestReviewContribution';
}

/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnection {
  /** A list of edges. */
  edges: (CreatedPullRequestReviewContributionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CreatedPullRequestReviewContribution | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CreatedPullRequestReviewContributionConnection';
}

/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CreatedPullRequestReviewContribution | null;
  __typename: 'CreatedPullRequestReviewContributionEdge';
}

/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The repository that was created. */
  repository: Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'CreatedRepositoryContribution';
}

/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnection {
  /** A list of edges. */
  edges: (CreatedRepositoryContributionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (CreatedRepositoryContribution | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'CreatedRepositoryContributionConnection';
}

/** An edge in a connection. */
export interface CreatedRepositoryContributionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CreatedRepositoryContribution | null;
  __typename: 'CreatedRepositoryContributionEdge';
}

/** Represents either a repository the viewer can access or a restricted contribution. */
export type CreatedRepositoryOrRestrictedContribution = (
  | CreatedRepositoryContribution
  | RestrictedContribution
) & { __isUnion?: true };

/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Identifies when the reference was made. */
  referencedAt: Scalars['DateTime'];
  /** The HTTP path for this pull request. */
  resourcePath: Scalars['URI'];
  /** Issue or pull request that made the reference. */
  source: ReferencedSubject;
  /** Issue or pull request to which the reference was made. */
  target: ReferencedSubject;
  /** The HTTP URL for this pull request. */
  url: Scalars['URI'];
  /** Checks if the target will be closed when the source is merged. */
  willCloseTarget: Scalars['Boolean'];
  __typename: 'CrossReferencedEvent';
}

/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The declined topic. */
  topic: Topic | null;
  __typename: 'DeclineTopicSuggestionPayload';
}

/** The possible base permissions for repositories. */
export type DefaultRepositoryPermissionField = 'NONE' | 'READ' | 'WRITE' | 'ADMIN';

/** Entities that can be deleted. */
export type Deletable = (
  | CommitComment
  | Discussion
  | DiscussionComment
  | GistComment
  | Issue
  | IssueComment
  | PullRequestReview
  | PullRequestReviewComment
  | TeamDiscussion
  | TeamDiscussionComment
) & { __isUnion?: true };

/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteBranchProtectionRulePayload';
}

/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteDeploymentPayload';
}

/** Autogenerated return type of DeleteDiscussionComment */
export interface DeleteDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion comment that was just deleted. */
  comment: DiscussionComment | null;
  __typename: 'DeleteDiscussionCommentPayload';
}

/** Autogenerated return type of DeleteDiscussion */
export interface DeleteDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that was just deleted. */
  discussion: Discussion | null;
  __typename: 'DeleteDiscussionPayload';
}

/** Autogenerated return type of DeleteEnvironment */
export interface DeleteEnvironmentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteEnvironmentPayload';
}

/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry: IpAllowListEntry | null;
  __typename: 'DeleteIpAllowListEntryPayload';
}

/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteIssueCommentPayload';
}

/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository the issue belonged to */
  repository: Repository | null;
  __typename: 'DeleteIssuePayload';
}

/** Autogenerated return type of DeleteLinkedBranch */
export interface DeleteLinkedBranchPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue the linked branch was unlinked from. */
  issue: Issue | null;
  __typename: 'DeleteLinkedBranchPayload';
}

/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The column the deleted card was in. */
  column: ProjectColumn | null;
  /** The deleted card ID. */
  deletedCardId: Scalars['ID'] | null;
  __typename: 'DeleteProjectCardPayload';
}

/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The deleted column ID. */
  deletedColumnId: Scalars['ID'] | null;
  /** The project the deleted column was in. */
  project: Project | null;
  __typename: 'DeleteProjectColumnPayload';
}

/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository or organization the project was removed from. */
  owner: ProjectOwner | null;
  __typename: 'DeleteProjectPayload';
}

/** Autogenerated return type of DeleteProjectV2Field */
export interface DeleteProjectV2FieldPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The deleted field. */
  projectV2Field: ProjectV2FieldConfiguration | null;
  __typename: 'DeleteProjectV2FieldPayload';
}

/** Autogenerated return type of DeleteProjectV2Item */
export interface DeleteProjectV2ItemPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The ID of the deleted item. */
  deletedItemId: Scalars['ID'] | null;
  __typename: 'DeleteProjectV2ItemPayload';
}

/** Autogenerated return type of DeleteProjectV2 */
export interface DeleteProjectV2Payload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The deleted Project. */
  projectV2: ProjectV2 | null;
  __typename: 'DeleteProjectV2Payload';
}

/** Autogenerated return type of DeleteProjectV2Workflow */
export interface DeleteProjectV2WorkflowPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The ID of the deleted workflow. */
  deletedWorkflowId: Scalars['ID'] | null;
  /** The project the deleted workflow was in. */
  projectV2: ProjectV2 | null;
  __typename: 'DeleteProjectV2WorkflowPayload';
}

/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview: PullRequestReview | null;
  /** The deleted pull request review comment. */
  pullRequestReviewComment: PullRequestReviewComment | null;
  __typename: 'DeletePullRequestReviewCommentPayload';
}

/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The deleted pull request review. */
  pullRequestReview: PullRequestReview | null;
  __typename: 'DeletePullRequestReviewPayload';
}

/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteRefPayload';
}

/** Autogenerated return type of DeleteRepositoryRuleset */
export interface DeleteRepositoryRulesetPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteRepositoryRulesetPayload';
}

/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteTeamDiscussionCommentPayload';
}

/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'DeleteTeamDiscussionPayload';
}

/** Autogenerated return type of DeleteVerifiableDomain */
export interface DeleteVerifiableDomainPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The owning account from which the domain was deleted. */
  owner: VerifiableDomainOwner | null;
  __typename: 'DeleteVerifiableDomainPayload';
}

/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  subject: MilestoneItem;
  __typename: 'DemilestonedEvent';
}

/** A Dependabot Update for a dependency in a repository */
export interface DependabotUpdate {
  /** The error from a dependency update */
  error: DependabotUpdateError | null;
  /** The associated pull request */
  pullRequest: PullRequest | null;
  /** The repository associated with this node. */
  repository: Repository;
  __typename: 'DependabotUpdate';
}

/** An error produced from a Dependabot Update */
export interface DependabotUpdateError {
  /** The body of the error */
  body: Scalars['String'];
  /** The error code */
  errorType: Scalars['String'];
  /** The title of the error */
  title: Scalars['String'];
  __typename: 'DependabotUpdateError';
}

/** The possible ecosystems of a dependency graph package. */
export type DependencyGraphEcosystem =
  | 'RUBYGEMS'
  | 'NPM'
  | 'PIP'
  | 'MAVEN'
  | 'NUGET'
  | 'COMPOSER'
  | 'GO'
  | 'ACTIONS'
  | 'RUST'
  | 'PUB'
  | 'SWIFT';

/** A repository deploy key. */
export interface DeployKey {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The deploy key. */
  key: Scalars['String'];
  /** Whether or not the deploy key is read only. */
  readOnly: Scalars['Boolean'];
  /** The deploy key title. */
  title: Scalars['String'];
  /** Whether or not the deploy key has been verified. */
  verified: Scalars['Boolean'];
  __typename: 'DeployKey';
}

/** The connection type for DeployKey. */
export interface DeployKeyConnection {
  /** A list of edges. */
  edges: (DeployKeyEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeployKey | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeployKeyConnection';
}

/** An edge in a connection. */
export interface DeployKeyEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeployKey | null;
  __typename: 'DeployKeyEdge';
}

/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The deployment associated with the 'deployed' event. */
  deployment: Deployment;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** The ref associated with the 'deployed' event. */
  ref: Ref | null;
  __typename: 'DeployedEvent';
}

/** Represents triggered deployment instance. */
export interface Deployment {
  /** Identifies the commit sha of the deployment. */
  commit: Commit | null;
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the actor who triggered the deployment. */
  creator: Actor;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The deployment description. */
  description: Scalars['String'] | null;
  /** The latest environment to which this deployment was made. */
  environment: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The latest environment to which this deployment was made. */
  latestEnvironment: Scalars['String'] | null;
  /** The latest status of this deployment. */
  latestStatus: DeploymentStatus | null;
  /** The original environment to which this deployment was made. */
  originalEnvironment: Scalars['String'] | null;
  /** Extra information that a deployment system might need. */
  payload: Scalars['String'] | null;
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref: Ref | null;
  /** Identifies the repository associated with the deployment. */
  repository: Repository;
  /** The current state of the deployment. */
  state: DeploymentState | null;
  /** A list of statuses associated with the deployment. */
  statuses: DeploymentStatusConnection | null;
  /** The deployment task. */
  task: Scalars['String'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'Deployment';
}

/** The connection type for Deployment. */
export interface DeploymentConnection {
  /** A list of edges. */
  edges: (DeploymentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Deployment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentConnection';
}

/** An edge in a connection. */
export interface DeploymentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Deployment | null;
  __typename: 'DeploymentEdge';
}

/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The deployment status that updated the deployment environment. */
  deploymentStatus: DeploymentStatus;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'DeploymentEnvironmentChangedEvent';
}

/** Properties by which deployment connections can be ordered. */
export type DeploymentOrderField = 'CREATED_AT';

/** A protection rule. */
export interface DeploymentProtectionRule {
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview: Scalars['Boolean'] | null;
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection;
  /** The timeout in minutes for this protection rule. */
  timeout: Scalars['Int'];
  /** The type of protection rule. */
  type: DeploymentProtectionRuleType;
  __typename: 'DeploymentProtectionRule';
}

/** The connection type for DeploymentProtectionRule. */
export interface DeploymentProtectionRuleConnection {
  /** A list of edges. */
  edges: (DeploymentProtectionRuleEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeploymentProtectionRule | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentProtectionRuleConnection';
}

/** An edge in a connection. */
export interface DeploymentProtectionRuleEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeploymentProtectionRule | null;
  __typename: 'DeploymentProtectionRuleEdge';
}

/** The possible protection rule types. */
export type DeploymentProtectionRuleType = 'REQUIRED_REVIEWERS' | 'WAIT_TIMER';

/** A request to deploy a workflow run to an environment. */
export interface DeploymentRequest {
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove: Scalars['Boolean'];
  /** The target environment of the deployment */
  environment: Environment;
  /** The teams or users that can review the deployment */
  reviewers: DeploymentReviewerConnection;
  /** The wait timer in minutes configured in the environment */
  waitTimer: Scalars['Int'];
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt: Scalars['DateTime'] | null;
  __typename: 'DeploymentRequest';
}

/** The connection type for DeploymentRequest. */
export interface DeploymentRequestConnection {
  /** A list of edges. */
  edges: (DeploymentRequestEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeploymentRequest | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentRequestConnection';
}

/** An edge in a connection. */
export interface DeploymentRequestEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeploymentRequest | null;
  __typename: 'DeploymentRequestEdge';
}

/** A deployment review. */
export interface DeploymentReview {
  /** The comment the user left. */
  comment: Scalars['String'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The environments approved or rejected */
  environments: EnvironmentConnection;
  id: Scalars['ID'];
  /** The decision of the user. */
  state: DeploymentReviewState;
  /** The user that reviewed the deployment. */
  user: User;
  __typename: 'DeploymentReview';
}

/** The connection type for DeploymentReview. */
export interface DeploymentReviewConnection {
  /** A list of edges. */
  edges: (DeploymentReviewEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeploymentReview | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentReviewConnection';
}

/** An edge in a connection. */
export interface DeploymentReviewEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeploymentReview | null;
  __typename: 'DeploymentReviewEdge';
}

/** The possible states for a deployment review. */
export type DeploymentReviewState = 'APPROVED' | 'REJECTED';

/** Users and teams. */
export type DeploymentReviewer = (Team | User) & { __isUnion?: true };

/** The connection type for DeploymentReviewer. */
export interface DeploymentReviewerConnection {
  /** A list of edges. */
  edges: (DeploymentReviewerEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeploymentReviewer | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentReviewerConnection';
}

/** An edge in a connection. */
export interface DeploymentReviewerEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeploymentReviewer | null;
  __typename: 'DeploymentReviewerEdge';
}

/** The possible states in which a deployment can be. */
export type DeploymentState =
  | 'ABANDONED'
  | 'ACTIVE'
  | 'DESTROYED'
  | 'ERROR'
  | 'FAILURE'
  | 'INACTIVE'
  | 'PENDING'
  | 'SUCCESS'
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'WAITING';

/** Describes the status of a given deployment attempt. */
export interface DeploymentStatus {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the actor who triggered the deployment. */
  creator: Actor;
  /** Identifies the deployment associated with status. */
  deployment: Deployment;
  /** Identifies the description of the deployment. */
  description: Scalars['String'] | null;
  /** Identifies the environment URL of the deployment. */
  environmentUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** Identifies the log URL of the deployment. */
  logUrl: Scalars['URI'] | null;
  /** Identifies the current state of the deployment. */
  state: DeploymentStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'DeploymentStatus';
}

/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnection {
  /** A list of edges. */
  edges: (DeploymentStatusEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DeploymentStatus | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DeploymentStatusConnection';
}

/** An edge in a connection. */
export interface DeploymentStatusEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DeploymentStatus | null;
  __typename: 'DeploymentStatusEdge';
}

/** The possible states for a deployment status. */
export type DeploymentStatusState =
  | 'PENDING'
  | 'SUCCESS'
  | 'FAILURE'
  | 'INACTIVE'
  | 'ERROR'
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'WAITING';

/** Autogenerated return type of DequeuePullRequest */
export interface DequeuePullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The merge queue entry of the dequeued pull request. */
  mergeQueueEntry: MergeQueueEntry | null;
  __typename: 'DequeuePullRequestPayload';
}

/** The possible sides of a diff. */
export type DiffSide = 'LEFT' | 'RIGHT';

/** Autogenerated return type of DisablePullRequestAutoMerge */
export interface DisablePullRequestAutoMergePayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request auto merge was disabled on. */
  pullRequest: PullRequest | null;
  __typename: 'DisablePullRequestAutoMergePayload';
}

/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request from which the issue was disconnected. */
  source: ReferencedSubject;
  /** Issue or pull request which was disconnected. */
  subject: ReferencedSubject;
  __typename: 'DisconnectedEvent';
}

/** A discussion in a repository. */
export interface Discussion {
  /** Reason that the conversation was locked. */
  activeLockReason: LockReason | null;
  /** The comment chosen as this discussion's answer, if any. */
  answer: DiscussionComment | null;
  /** The time when a user chose this discussion's answer, if answered. */
  answerChosenAt: Scalars['DateTime'] | null;
  /** The user who chose this discussion's answer, if answered. */
  answerChosenBy: Actor | null;
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** The main text of the discussion post. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** The category for this discussion. */
  category: DiscussionCategory;
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** The replies to the discussion. */
  comments: DiscussionCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Only return answered/unanswered discussions */
  isAnswered: Scalars['Boolean'] | null;
  /** A list of labels associated with the object. */
  labels: LabelConnection | null;
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** `true` if the object is locked */
  locked: Scalars['Boolean'];
  /** The number identifying this discussion within the repository. */
  number: Scalars['Int'];
  /** The poll associated with this discussion, if one exists. */
  poll: DiscussionPoll | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The path for this discussion. */
  resourcePath: Scalars['URI'];
  /** Identifies the reason for the discussion's state. */
  stateReason: DiscussionStateReason | null;
  /** The title of this discussion. */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars['Int'];
  /** The URL for this discussion. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars['Boolean'];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  __typename: 'Discussion';
}

/** A category for discussions in a repository. */
export interface DiscussionCategory {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** A description of this category. */
  description: Scalars['String'] | null;
  /** An emoji representing this category. */
  emoji: Scalars['String'];
  /** This category's emoji rendered as HTML. */
  emojiHTML: Scalars['HTML'];
  id: Scalars['ID'];
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  isAnswerable: Scalars['Boolean'];
  /** The name of this category. */
  name: Scalars['String'];
  /** The repository associated with this node. */
  repository: Repository;
  /** The slug of this category. */
  slug: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'DiscussionCategory';
}

/** The connection type for DiscussionCategory. */
export interface DiscussionCategoryConnection {
  /** A list of edges. */
  edges: (DiscussionCategoryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DiscussionCategory | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DiscussionCategoryConnection';
}

/** An edge in a connection. */
export interface DiscussionCategoryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DiscussionCategory | null;
  __typename: 'DiscussionCategoryEdge';
}

/** The possible reasons for closing a discussion. */
export type DiscussionCloseReason = 'RESOLVED' | 'OUTDATED' | 'DUPLICATE';

/** A comment on a discussion. */
export interface DiscussionComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The time when this replied-to comment was deleted */
  deletedAt: Scalars['DateTime'] | null;
  /** The discussion this comment was created in */
  discussion: Discussion | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Has this comment been chosen as the answer of its discussion? */
  isAnswer: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The threaded replies to this comment. */
  replies: DiscussionCommentConnection;
  /** The discussion comment this comment is a reply to */
  replyTo: DiscussionComment | null;
  /** The path for this discussion comment. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars['Int'];
  /** The URL for this discussion comment. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can the current user mark this comment as an answer? */
  viewerCanMarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Can the current user unmark this comment as an answer? */
  viewerCanUnmarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars['Boolean'];
  __typename: 'DiscussionComment';
}

/** The connection type for DiscussionComment. */
export interface DiscussionCommentConnection {
  /** A list of edges. */
  edges: (DiscussionCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DiscussionComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DiscussionCommentConnection';
}

/** An edge in a connection. */
export interface DiscussionCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DiscussionComment | null;
  __typename: 'DiscussionCommentEdge';
}

/** The connection type for Discussion. */
export interface DiscussionConnection {
  /** A list of edges. */
  edges: (DiscussionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Discussion | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DiscussionConnection';
}

/** An edge in a connection. */
export interface DiscussionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Discussion | null;
  __typename: 'DiscussionEdge';
}

/** Properties by which discussion connections can be ordered. */
export type DiscussionOrderField = 'CREATED_AT' | 'UPDATED_AT';

/** A poll for a discussion. */
export interface DiscussionPoll {
  /** The discussion that this poll belongs to. */
  discussion: Discussion | null;
  id: Scalars['ID'];
  /** The options for this poll. */
  options: DiscussionPollOptionConnection | null;
  /** The question that is being asked by this poll. */
  question: Scalars['String'];
  /** The total number of votes that have been cast for this poll. */
  totalVoteCount: Scalars['Int'];
  /** Indicates if the viewer has permission to vote in this poll. */
  viewerCanVote: Scalars['Boolean'];
  /** Indicates if the viewer has voted for any option in this poll. */
  viewerHasVoted: Scalars['Boolean'];
  __typename: 'DiscussionPoll';
}

/** An option for a discussion poll. */
export interface DiscussionPollOption {
  id: Scalars['ID'];
  /** The text for this option. */
  option: Scalars['String'];
  /** The discussion poll that this option belongs to. */
  poll: DiscussionPoll | null;
  /** The total number of votes that have been cast for this option. */
  totalVoteCount: Scalars['Int'];
  /** Indicates if the viewer has voted for this option in the poll. */
  viewerHasVoted: Scalars['Boolean'];
  __typename: 'DiscussionPollOption';
}

/** The connection type for DiscussionPollOption. */
export interface DiscussionPollOptionConnection {
  /** A list of edges. */
  edges: (DiscussionPollOptionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (DiscussionPollOption | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'DiscussionPollOptionConnection';
}

/** An edge in a connection. */
export interface DiscussionPollOptionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DiscussionPollOption | null;
  __typename: 'DiscussionPollOptionEdge';
}

/** Properties by which discussion poll option connections can be ordered. */
export type DiscussionPollOptionOrderField = 'AUTHORED_ORDER' | 'VOTE_COUNT';

/** The possible states of a discussion. */
export type DiscussionState = 'OPEN' | 'CLOSED';

/** The possible state reasons of a discussion. */
export type DiscussionStateReason = 'RESOLVED' | 'OUTDATED' | 'DUPLICATE' | 'REOPENED';

/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The dismissed pull request review. */
  pullRequestReview: PullRequestReview | null;
  __typename: 'DismissPullRequestReviewPayload';
}

/** The possible reasons that a Dependabot alert was dismissed. */
export type DismissReason =
  | 'FIX_STARTED'
  | 'NO_BANDWIDTH'
  | 'TOLERABLE_RISK'
  | 'INACCURATE'
  | 'NOT_USED';

/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
export interface DismissRepositoryVulnerabilityAlertPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert | null;
  __typename: 'DismissRepositoryVulnerabilityAlertPayload';
}

/** A draft issue within a project. */
export interface DraftIssue {
  /** A list of users to assigned to this draft issue. */
  assignees: UserConnection;
  /** The body of the draft issue. */
  body: Scalars['String'];
  /** The body of the draft issue rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body of the draft issue rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created this draft issue. */
  creator: Actor | null;
  id: Scalars['ID'];
  /** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
  projectV2Items: ProjectV2ItemConnection;
  /** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
  projectsV2: ProjectV2Connection;
  /** The title of the draft issue */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'DraftIssue';
}

/** Autogenerated return type of EnablePullRequestAutoMerge */
export interface EnablePullRequestAutoMergePayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request auto-merge was enabled on. */
  pullRequest: PullRequest | null;
  __typename: 'EnablePullRequestAutoMergePayload';
}

/** Autogenerated return type of EnqueuePullRequest */
export interface EnqueuePullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The merge queue entry for the enqueued pull request. */
  mergeQueueEntry: MergeQueueEntry | null;
  __typename: 'EnqueuePullRequestPayload';
}

/** An account to manage multiple organizations with consolidated policy and billing. */
export interface Enterprise {
  /** The text of the announcement */
  announcement: Scalars['String'] | null;
  /** The expiration date of the announcement, if any */
  announcementExpiresAt: Scalars['DateTime'] | null;
  /** Whether the announcement can be dismissed by the user */
  announcementUserDismissible: Scalars['Boolean'] | null;
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl: Scalars['URI'];
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo: EnterpriseBillingInfo | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The description of the enterprise. */
  description: Scalars['String'] | null;
  /** The description of the enterprise as HTML. */
  descriptionHTML: Scalars['HTML'];
  id: Scalars['ID'];
  /** The location of the enterprise. */
  location: Scalars['String'] | null;
  /** A list of users who are members of this enterprise. */
  members: EnterpriseMemberConnection;
  /** The name of the enterprise. */
  name: Scalars['String'];
  /** A list of organizations that belong to this enterprise. */
  organizations: OrganizationConnection;
  /** Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
  ownerInfo: EnterpriseOwnerInfo | null;
  /** The HTTP path for this enterprise. */
  resourcePath: Scalars['URI'];
  /** The URL-friendly identifier for the enterprise. */
  slug: Scalars['String'];
  /** The HTTP URL for this enterprise. */
  url: Scalars['URI'];
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin: Scalars['Boolean'];
  /** The URL of the enterprise website. */
  websiteUrl: Scalars['URI'] | null;
  __typename: 'Enterprise';
}

/** The connection type for User. */
export interface EnterpriseAdministratorConnection {
  /** A list of edges. */
  edges: (EnterpriseAdministratorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseAdministratorConnection';
}

/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User | null;
  /** The role of the administrator. */
  role: EnterpriseAdministratorRole;
  __typename: 'EnterpriseAdministratorEdge';
}

/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitation {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The email of the person who was invited to the enterprise. */
  email: Scalars['String'] | null;
  /** The enterprise the invitation is for. */
  enterprise: Enterprise;
  id: Scalars['ID'];
  /** The user who was invited to the enterprise. */
  invitee: User | null;
  /** The user who created the invitation. */
  inviter: User | null;
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role: EnterpriseAdministratorRole;
  __typename: 'EnterpriseAdministratorInvitation';
}

/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnection {
  /** A list of edges. */
  edges: (EnterpriseAdministratorInvitationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseAdministratorInvitation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseAdministratorInvitationConnection';
}

/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseAdministratorInvitation | null;
  __typename: 'EnterpriseAdministratorInvitationEdge';
}

/** Properties by which enterprise administrator invitation connections can be ordered. */
export type EnterpriseAdministratorInvitationOrderField = 'CREATED_AT';

/** The possible administrator roles in an enterprise account. */
export type EnterpriseAdministratorRole = 'OWNER' | 'BILLING_MANAGER';

/** The possible values for the enterprise allow private repository forking policy value. */
export type EnterpriseAllowPrivateRepositoryForkingPolicyValue =
  | 'ENTERPRISE_ORGANIZATIONS'
  | 'SAME_ORGANIZATION'
  | 'SAME_ORGANIZATION_USER_ACCOUNTS'
  | 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS'
  | 'USER_ACCOUNTS'
  | 'EVERYWHERE';

/** Metadata for an audit entry containing enterprise account information. */
export type EnterpriseAuditEntryData = (
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OrgInviteToBusinessAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
) & { __isUnion?: true };

/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfo {
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount: Scalars['Int'];
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks: Scalars['Int'];
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota: Scalars['Float'];
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage: Scalars['Float'];
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage: Scalars['Int'];
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota: Scalars['Float'];
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage: Scalars['Float'];
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage: Scalars['Int'];
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses: Scalars['Int'];
  /** The total number of licenses allocated. */
  totalLicenses: Scalars['Int'];
  __typename: 'EnterpriseBillingInfo';
}

/** The connection type for Enterprise. */
export interface EnterpriseConnection {
  /** A list of edges. */
  edges: (EnterpriseEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Enterprise | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseConnection';
}

/** The possible values for the enterprise base repository permission setting. */
export type EnterpriseDefaultRepositoryPermissionSettingValue =
  | 'NO_POLICY'
  | 'ADMIN'
  | 'WRITE'
  | 'READ'
  | 'NONE';

/** An edge in a connection. */
export interface EnterpriseEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Enterprise | null;
  __typename: 'EnterpriseEdge';
}

/** The possible values for an enabled/disabled enterprise setting. */
export type EnterpriseEnabledDisabledSettingValue = 'ENABLED' | 'DISABLED' | 'NO_POLICY';

/** The possible values for an enabled/no policy enterprise setting. */
export type EnterpriseEnabledSettingValue = 'ENABLED' | 'NO_POLICY';

/** The connection type for OrganizationInvitation. */
export interface EnterpriseFailedInvitationConnection {
  /** A list of edges. */
  edges: (EnterpriseFailedInvitationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (OrganizationInvitation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Scalars['Int'];
  __typename: 'EnterpriseFailedInvitationConnection';
}

/** A failed invitation to be a member in an enterprise organization. */
export interface EnterpriseFailedInvitationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OrganizationInvitation | null;
  __typename: 'EnterpriseFailedInvitationEdge';
}

/** An identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseIdentityProvider {
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: SamlDigestAlgorithm | null;
  /** The enterprise this identity provider belongs to. */
  enterprise: Enterprise | null;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars['X509Certificate'] | null;
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer: Scalars['String'] | null;
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes: Scalars['String'][] | null;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: SamlSignatureAlgorithm | null;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars['URI'] | null;
  __typename: 'EnterpriseIdentityProvider';
}

/** An object that is a member of an enterprise. */
export type EnterpriseMember = (EnterpriseUserAccount | User) & { __isUnion?: true };

/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnection {
  /** A list of edges. */
  edges: (EnterpriseMemberEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseMember | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseMemberConnection';
}

/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseMember | null;
  __typename: 'EnterpriseMemberEdge';
}

/** Properties by which enterprise member connections can be ordered. */
export type EnterpriseMemberOrderField = 'LOGIN' | 'CREATED_AT';

/** The possible values for the enterprise members can create repositories setting. */
export type EnterpriseMembersCanCreateRepositoriesSettingValue =
  | 'NO_POLICY'
  | 'ALL'
  | 'PUBLIC'
  | 'PRIVATE'
  | 'DISABLED';

/** The possible values for the members can make purchases setting. */
export type EnterpriseMembersCanMakePurchasesSettingValue = 'ENABLED' | 'DISABLED';

/** The possible values we have for filtering Platform::Objects::User#enterprises. */
export type EnterpriseMembershipType = 'ALL' | 'ADMIN' | 'BILLING_MANAGER' | 'ORG_MEMBERSHIP';

/** Properties by which enterprise connections can be ordered. */
export type EnterpriseOrderField = 'NAME';

/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnection {
  /** A list of edges. */
  edges: (EnterpriseOrganizationMembershipEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Organization | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseOrganizationMembershipConnection';
}

/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Organization | null;
  /** The role of the user in the enterprise membership. */
  role: EnterpriseUserAccountMembershipRole;
  __typename: 'EnterpriseOrganizationMembershipEdge';
}

/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnection {
  /** A list of edges. */
  edges: (EnterpriseOutsideCollaboratorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseOutsideCollaboratorConnection';
}

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User | null;
  /** The enterprise organization repositories this user is a member of. */
  repositories: EnterpriseRepositoryInfoConnection;
  __typename: 'EnterpriseOutsideCollaboratorEdge';
}

/** Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseOwnerInfo {
  /** A list of all of the administrators for this enterprise. */
  admins: EnterpriseAdministratorConnection;
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled: UserConnection;
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist: Scalars['Boolean'];
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection;
  /** The value for the allow private repository forking policy on the enterprise. */
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue | null;
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection;
  /** A list of domains owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  domains: VerifiableDomainConnection;
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations: EnterpriseServerInstallationConnection;
  /** A list of failed invitations in the enterprise. */
  failedInvitations: EnterpriseFailedInvitationConnection;
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  ipAllowListEntries: IpAllowListEntryConnection;
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission: Scalars['Boolean'];
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement: Scalars['Boolean'];
  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting: Scalars['Boolean'] | null;
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting: Scalars['Boolean'] | null;
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting: Scalars['Boolean'] | null;
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting: EnterpriseMembersCanCreateRepositoriesSettingValue | null;
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection;
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection;
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection;
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider: OIDCProvider | null;
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations: OrganizationConnection;
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators: EnterpriseOutsideCollaboratorConnection;
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection;
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations: RepositoryInvitationConnection;
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection;
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations: OrganizationConnection;
  /** The SAML Identity Provider for the enterprise. */
  samlIdentityProvider: EnterpriseIdentityProvider | null;
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations: OrganizationConnection;
  /** A list of members with a support entitlement. */
  supportEntitlements: EnterpriseMemberConnection;
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations: OrganizationConnection;
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations: OrganizationConnection;
  __typename: 'EnterpriseOwnerInfo';
}

/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnection {
  /** A list of edges. */
  edges: (EnterprisePendingMemberInvitationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (OrganizationInvitation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Scalars['Int'];
  __typename: 'EnterprisePendingMemberInvitationConnection';
}

/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OrganizationInvitation | null;
  __typename: 'EnterprisePendingMemberInvitationEdge';
}

/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfo {
  id: Scalars['ID'];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars['Boolean'];
  /** The repository's name. */
  name: Scalars['String'];
  /** The repository's name with owner. */
  nameWithOwner: Scalars['String'];
  __typename: 'EnterpriseRepositoryInfo';
}

/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnection {
  /** A list of edges. */
  edges: (EnterpriseRepositoryInfoEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseRepositoryInfo | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseRepositoryInfoConnection';
}

/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseRepositoryInfo | null;
  __typename: 'EnterpriseRepositoryInfoEdge';
}

/** An Enterprise Server installation. */
export interface EnterpriseServerInstallation {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName: Scalars['String'];
  /** The host name of the Enterprise Server installation. */
  hostName: Scalars['String'];
  id: Scalars['ID'];
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** User accounts on this Enterprise Server installation. */
  userAccounts: EnterpriseServerUserAccountConnection;
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection;
  __typename: 'EnterpriseServerInstallation';
}

/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnection {
  /** A list of edges. */
  edges: (EnterpriseServerInstallationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseServerInstallation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseServerInstallationConnection';
}

/** An edge in a connection. */
export interface EnterpriseServerInstallationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseServerInstallation | null;
  __typename: 'EnterpriseServerInstallationEdge';
}

/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationMembershipConnection {
  /** A list of edges. */
  edges: (EnterpriseServerInstallationMembershipEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseServerInstallation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseServerInstallationMembershipConnection';
}

/** An Enterprise Server installation that a user is a member of. */
export interface EnterpriseServerInstallationMembershipEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseServerInstallation | null;
  /** The role of the user in the enterprise membership. */
  role: EnterpriseUserAccountMembershipRole;
  __typename: 'EnterpriseServerInstallationMembershipEdge';
}

/** Properties by which Enterprise Server installation connections can be ordered. */
export type EnterpriseServerInstallationOrderField = 'HOST_NAME' | 'CUSTOMER_NAME' | 'CREATED_AT';

/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccount {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** User emails belonging to this user account. */
  emails: EnterpriseServerUserAccountEmailConnection;
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: Scalars['ID'];
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin: Scalars['Boolean'];
  /** The login of the user account on the Enterprise Server installation. */
  login: Scalars['String'];
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName: Scalars['String'] | null;
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt: Scalars['DateTime'];
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'EnterpriseServerUserAccount';
}

/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnection {
  /** A list of edges. */
  edges: (EnterpriseServerUserAccountEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseServerUserAccount | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseServerUserAccountConnection';
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseServerUserAccount | null;
  __typename: 'EnterpriseServerUserAccountEdge';
}

/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmail {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The email address. */
  email: Scalars['String'];
  id: Scalars['ID'];
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The user account to which the email belongs. */
  userAccount: EnterpriseServerUserAccount;
  __typename: 'EnterpriseServerUserAccountEmail';
}

/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnection {
  /** A list of edges. */
  edges: (EnterpriseServerUserAccountEmailEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseServerUserAccountEmail | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseServerUserAccountEmailConnection';
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseServerUserAccountEmail | null;
  __typename: 'EnterpriseServerUserAccountEmailEdge';
}

/** Properties by which Enterprise Server user account email connections can be ordered. */
export type EnterpriseServerUserAccountEmailOrderField = 'EMAIL';

/** Properties by which Enterprise Server user account connections can be ordered. */
export type EnterpriseServerUserAccountOrderField = 'LOGIN' | 'REMOTE_CREATED_AT';

/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUpload {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The enterprise to which this upload belongs. */
  enterprise: Enterprise;
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: Scalars['ID'];
  /** The name of the file uploaded. */
  name: Scalars['String'];
  /** The synchronization state of the upload */
  syncState: EnterpriseServerUserAccountsUploadSyncState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'EnterpriseServerUserAccountsUpload';
}

/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnection {
  /** A list of edges. */
  edges: (EnterpriseServerUserAccountsUploadEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (EnterpriseServerUserAccountsUpload | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnterpriseServerUserAccountsUploadConnection';
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EnterpriseServerUserAccountsUpload | null;
  __typename: 'EnterpriseServerUserAccountsUploadEdge';
}

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export type EnterpriseServerUserAccountsUploadOrderField = 'CREATED_AT';

/** Synchronization state of the Enterprise Server user accounts upload */
export type EnterpriseServerUserAccountsUploadSyncState = 'PENDING' | 'SUCCESS' | 'FAILURE';

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccount {
  /** A URL pointing to the enterprise user account's public avatar. */
  avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The enterprise in which this user account exists. */
  enterprise: Enterprise;
  /** A list of Enterprise Server installations this user is a member of. */
  enterpriseInstallations: EnterpriseServerInstallationMembershipConnection;
  id: Scalars['ID'];
  /** An identifier for the enterprise user account, a login or email address */
  login: Scalars['String'];
  /** The name of the enterprise user account */
  name: Scalars['String'] | null;
  /** A list of enterprise organizations this user is a member of. */
  organizations: EnterpriseOrganizationMembershipConnection;
  /** The HTTP path for this user. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this user. */
  url: Scalars['URI'];
  /** The user within the enterprise. */
  user: User | null;
  __typename: 'EnterpriseUserAccount';
}

/** The possible roles for enterprise membership. */
export type EnterpriseUserAccountMembershipRole = 'MEMBER' | 'OWNER' | 'UNAFFILIATED';

/** The possible GitHub Enterprise deployments where this user can exist. */
export type EnterpriseUserDeployment = 'CLOUD' | 'SERVER';

/** An environment. */
export interface Environment {
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The name of the environment */
  name: Scalars['String'];
  /** The protection rules defined for this environment */
  protectionRules: DeploymentProtectionRuleConnection;
  __typename: 'Environment';
}

/** The connection type for Environment. */
export interface EnvironmentConnection {
  /** A list of edges. */
  edges: (EnvironmentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Environment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'EnvironmentConnection';
}

/** An edge in a connection. */
export interface EnvironmentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Environment | null;
  __typename: 'EnvironmentEdge';
}

/** Properties by which environments connections can be ordered */
export type EnvironmentOrderField = 'NAME';

/** An external identity provisioned by SAML SSO or SCIM. If SAML is configured on the organization, the external identity is visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. If SAML is configured on the enterprise, the external identity is visible to (1) enterprise owners, (2) enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface ExternalIdentity {
  /** The GUID for this identity */
  guid: Scalars['String'];
  id: Scalars['ID'];
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation: OrganizationInvitation | null;
  /** SAML Identity attributes */
  samlIdentity: ExternalIdentitySamlAttributes | null;
  /** SCIM Identity attributes */
  scimIdentity: ExternalIdentityScimAttributes | null;
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user: User | null;
  __typename: 'ExternalIdentity';
}

/** An attribute for the External Identity attributes collection */
export interface ExternalIdentityAttribute {
  /** The attribute metadata as JSON */
  metadata: Scalars['String'] | null;
  /** The attribute name */
  name: Scalars['String'];
  /** The attribute value */
  value: Scalars['String'];
  __typename: 'ExternalIdentityAttribute';
}

/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnection {
  /** A list of edges. */
  edges: (ExternalIdentityEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ExternalIdentity | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ExternalIdentityConnection';
}

/** An edge in a connection. */
export interface ExternalIdentityEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ExternalIdentity | null;
  __typename: 'ExternalIdentityEdge';
}

/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributes {
  /** SAML Identity attributes */
  attributes: ExternalIdentityAttribute[];
  /** The emails associated with the SAML identity */
  emails: UserEmailMetadata[] | null;
  /** Family name of the SAML identity */
  familyName: Scalars['String'] | null;
  /** Given name of the SAML identity */
  givenName: Scalars['String'] | null;
  /** The groups linked to this identity in IDP */
  groups: Scalars['String'][] | null;
  /** The NameID of the SAML identity */
  nameId: Scalars['String'] | null;
  /** The userName of the SAML identity */
  username: Scalars['String'] | null;
  __typename: 'ExternalIdentitySamlAttributes';
}

/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributes {
  /** The emails associated with the SCIM identity */
  emails: UserEmailMetadata[] | null;
  /** Family name of the SCIM identity */
  familyName: Scalars['String'] | null;
  /** Given name of the SCIM identity */
  givenName: Scalars['String'] | null;
  /** The groups linked to this identity in IDP */
  groups: Scalars['String'][] | null;
  /** The userName of the SCIM identity */
  username: Scalars['String'] | null;
  __typename: 'ExternalIdentityScimAttributes';
}

/** The possible viewed states of a file . */
export type FileViewedState = 'DISMISSED' | 'VIEWED' | 'UNVIEWED';

/** Autogenerated return type of FollowOrganization */
export interface FollowOrganizationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organization that was followed. */
  organization: Organization | null;
  __typename: 'FollowOrganizationPayload';
}

/** Autogenerated return type of FollowUser */
export interface FollowUserPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The user that was followed. */
  user: User | null;
  __typename: 'FollowUserPayload';
}

/** The connection type for User. */
export interface FollowerConnection {
  /** A list of edges. */
  edges: (UserEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'FollowerConnection';
}

/** The connection type for User. */
export interface FollowingConnection {
  /** A list of edges. */
  edges: (UserEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'FollowingConnection';
}

/** A funding platform link for a repository. */
export interface FundingLink {
  /** The funding platform this link is for. */
  platform: FundingPlatform;
  /** The configured URL for this funding link. */
  url: Scalars['URI'];
  __typename: 'FundingLink';
}

/** The possible funding platforms for repository funding links. */
export type FundingPlatform =
  | 'GITHUB'
  | 'PATREON'
  | 'OPEN_COLLECTIVE'
  | 'KO_FI'
  | 'TIDELIFT'
  | 'COMMUNITY_BRIDGE'
  | 'LIBERAPAY'
  | 'ISSUEHUNT'
  | 'OTECHIE'
  | 'LFX_CROWDFUNDING'
  | 'CUSTOM';

/** A generic hovercard context with a message and icon */
export interface GenericHovercardContext {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  __typename: 'GenericHovercardContext';
}

/** A Gist. */
export interface Gist {
  /** A list of comments associated with the gist */
  comments: GistCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The gist description. */
  description: Scalars['String'] | null;
  /** The files in this gist. */
  files: (GistFile | null)[] | null;
  /** A list of forks associated with the gist */
  forks: GistConnection;
  id: Scalars['ID'];
  /** Identifies if the gist is a fork. */
  isFork: Scalars['Boolean'];
  /** Whether the gist is public or not. */
  isPublic: Scalars['Boolean'];
  /** The gist name. */
  name: Scalars['String'];
  /** The gist owner. */
  owner: RepositoryOwner | null;
  /** Identifies when the gist was last pushed to. */
  pushedAt: Scalars['DateTime'] | null;
  /** The HTML path to this resource. */
  resourcePath: Scalars['URI'];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this Gist. */
  url: Scalars['URI'];
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
  __typename: 'Gist';
}

/** Represents a comment on an Gist. */
export interface GistComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the gist. */
  authorAssociation: CommentAuthorAssociation;
  /** Identifies the comment body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  /** The associated gist. */
  gist: Gist;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'GistComment';
}

/** The connection type for GistComment. */
export interface GistCommentConnection {
  /** A list of edges. */
  edges: (GistCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (GistComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'GistCommentConnection';
}

/** An edge in a connection. */
export interface GistCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: GistComment | null;
  __typename: 'GistCommentEdge';
}

/** The connection type for Gist. */
export interface GistConnection {
  /** A list of edges. */
  edges: (GistEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Gist | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'GistConnection';
}

/** An edge in a connection. */
export interface GistEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Gist | null;
  __typename: 'GistEdge';
}

/** A file in a gist. */
export interface GistFile {
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName: Scalars['String'] | null;
  /** The gist file encoding. */
  encoding: Scalars['String'] | null;
  /** The file extension from the file name. */
  extension: Scalars['String'] | null;
  /** Indicates if this file is an image. */
  isImage: Scalars['Boolean'];
  /** Whether the file's contents were truncated. */
  isTruncated: Scalars['Boolean'];
  /** The programming language this file is written in. */
  language: Language | null;
  /** The gist file name. */
  name: Scalars['String'] | null;
  /** The gist file size in bytes. */
  size: Scalars['Int'] | null;
  /** UTF8 text data or null if the file is binary */
  text: Scalars['String'] | null;
  __typename: 'GistFile';
}

/** Properties by which gist connections can be ordered. */
export type GistOrderField = 'CREATED_AT' | 'UPDATED_AT' | 'PUSHED_AT';

/** The privacy of a Gist */
export type GistPrivacy = 'PUBLIC' | 'SECRET' | 'ALL';

/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActor {
  /** A URL pointing to the author's public avatar. */
  avatarUrl: Scalars['URI'];
  /** The timestamp of the Git action (authoring or committing). */
  date: Scalars['GitTimestamp'] | null;
  /** The email in the Git commit. */
  email: Scalars['String'] | null;
  /** The name in the Git commit. */
  name: Scalars['String'] | null;
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user: User | null;
  __typename: 'GitActor';
}

/** The connection type for GitActor. */
export interface GitActorConnection {
  /** A list of edges. */
  edges: (GitActorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (GitActor | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'GitActorConnection';
}

/** An edge in a connection. */
export interface GitActorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: GitActor | null;
  __typename: 'GitActorEdge';
}

/** Represents information about the GitHub instance. */
export interface GitHubMetadata {
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha: Scalars['GitObjectID'];
  /** IP addresses that users connect to for git operations */
  gitIpAddresses: Scalars['String'][] | null;
  /** IP addresses that GitHub Enterprise Importer uses for outbound connections */
  githubEnterpriseImporterIpAddresses: Scalars['String'][] | null;
  /** IP addresses that service hooks are sent from */
  hookIpAddresses: Scalars['String'][] | null;
  /** IP addresses that the importer connects from */
  importerIpAddresses: Scalars['String'][] | null;
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable: Scalars['Boolean'];
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses: Scalars['String'][] | null;
  __typename: 'GitHubMetadata';
}

/** Represents a Git object. */
export type GitObject = (Blob | Commit | Tag | Tree) & { __isUnion?: true };

/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export type GitSignature = (GpgSignature | SmimeSignature | SshSignature | UnknownSignature) & {
  __isUnion?: true;
};

/** The state of a Git signature. */
export type GitSignatureState =
  | 'VALID'
  | 'INVALID'
  | 'MALFORMED_SIG'
  | 'UNKNOWN_KEY'
  | 'BAD_EMAIL'
  | 'UNVERIFIED_EMAIL'
  | 'NO_USER'
  | 'UNKNOWN_SIG_TYPE'
  | 'UNSIGNED'
  | 'GPGVERIFY_UNAVAILABLE'
  | 'GPGVERIFY_ERROR'
  | 'NOT_SIGNING_KEY'
  | 'EXPIRED_KEY'
  | 'OCSP_PENDING'
  | 'OCSP_ERROR'
  | 'BAD_CERT'
  | 'OCSP_REVOKED';

/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignature {
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Hex-encoded ID of the key that signed this object. */
  keyId: Scalars['String'] | null;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer: User | null;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
  __typename: 'GpgSignature';
}

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export interface GrantEnterpriseOrganizationsMigratorRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organizations that had the migrator role applied to for the given user. */
  organizations: OrganizationConnection | null;
  __typename: 'GrantEnterpriseOrganizationsMigratorRolePayload';
}

/** Autogenerated return type of GrantMigratorRole */
export interface GrantMigratorRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Did the operation succeed? */
  success: Scalars['Boolean'] | null;
  __typename: 'GrantMigratorRolePayload';
}

/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef: Ref | null;
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName: Scalars['String'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'HeadRefDeletedEvent';
}

/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit: Commit | null;
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref: Ref | null;
  __typename: 'HeadRefForcePushedEvent';
}

/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  __typename: 'HeadRefRestoredEvent';
}

/** Detail needed to display a hovercard for a user */
export interface Hovercard {
  /** Each of the contexts for this hovercard */
  contexts: HovercardContext[];
  __typename: 'Hovercard';
}

/** An individual line of a hovercard */
export type HovercardContext = (
  | GenericHovercardContext
  | OrganizationTeamsHovercardContext
  | OrganizationsHovercardContext
  | ReviewStatusHovercardContext
  | ViewerHovercardContext
) & { __isUnion?: true };

/** The possible states in which authentication can be configured with an identity provider. */
export type IdentityProviderConfigurationState = 'ENFORCED' | 'CONFIGURED' | 'UNCONFIGURED';

/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The created enterprise administrator invitation. */
  invitation: EnterpriseAdministratorInvitation | null;
  __typename: 'InviteEnterpriseAdminPayload';
}

/** The possible values for the IP allow list enabled setting. */
export type IpAllowListEnabledSettingValue = 'ENABLED' | 'DISABLED';

/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntry {
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Whether the entry is currently active. */
  isActive: Scalars['Boolean'];
  /** The name of the IP allow list entry. */
  name: Scalars['String'] | null;
  /** The owner of the IP allow list entry. */
  owner: IpAllowListOwner;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'IpAllowListEntry';
}

/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnection {
  /** A list of edges. */
  edges: (IpAllowListEntryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (IpAllowListEntry | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'IpAllowListEntryConnection';
}

/** An edge in a connection. */
export interface IpAllowListEntryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IpAllowListEntry | null;
  __typename: 'IpAllowListEntryEdge';
}

/** Properties by which IP allow list entry connections can be ordered. */
export type IpAllowListEntryOrderField = 'CREATED_AT' | 'ALLOW_LIST_VALUE';

/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export type IpAllowListForInstalledAppsEnabledSettingValue = 'ENABLED' | 'DISABLED';

/** Types that can own an IP allow list. */
export type IpAllowListOwner = (App | Enterprise | Organization) & { __isUnion?: true };

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface Issue {
  /** Reason that the conversation was locked. */
  activeLockReason: LockReason | null;
  /** A list of Users assigned to this object. */
  assignees: UserConnection;
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** Identifies the body of the issue. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The http path for this issue body */
  bodyResourcePath: Scalars['URI'];
  /** Identifies the body of the issue rendered to text. */
  bodyText: Scalars['String'];
  /** The http URL for this issue body */
  bodyUrl: Scalars['URI'];
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** A list of comments associated with the Issue. */
  comments: IssueCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId: Scalars['BigInt'] | null;
  /** The hovercard information for this issue */
  hovercard: Hovercard;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  isPinned: Scalars['Boolean'] | null;
  /** Is this issue read by the viewer */
  isReadByViewer: Scalars['Boolean'] | null;
  /** A list of labels associated with the object. */
  labels: LabelConnection | null;
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Branches linked to this issue. */
  linkedBranches: LinkedBranchConnection;
  /** `true` if the object is locked */
  locked: Scalars['Boolean'];
  /** Identifies the milestone associated with the issue. */
  milestone: Milestone | null;
  /** Identifies the issue number. */
  number: Scalars['Int'];
  /** A list of Users that are participating in the Issue conversation. */
  participants: UserConnection;
  /** List of project cards associated with this issue. */
  projectCards: ProjectCardConnection;
  /** List of project items associated with this issue. */
  projectItems: ProjectV2ItemConnection;
  /** Find a project by number. */
  projectV2: ProjectV2 | null;
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path for this issue */
  resourcePath: Scalars['URI'];
  /** Identifies the state of the issue. */
  state: IssueState;
  /** Identifies the reason for the issue state. */
  stateReason: IssueStateReason | null;
  /**
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timeline: IssueTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the issue. */
  timelineItems: IssueTimelineItemsConnection;
  /** Identifies the issue title. */
  title: Scalars['String'];
  /** Identifies the issue title rendered to HTML. */
  titleHTML: Scalars['String'];
  /** A list of issues that track this issue */
  trackedInIssues: IssueConnection;
  /** A list of issues tracked inside the current issue */
  trackedIssues: IssueConnection;
  /** The number of tracked issues for this issue */
  trackedIssuesCount: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction | null;
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus: ThreadSubscriptionState | null;
  __typename: 'Issue';
}

/** The possible state reasons of a closed issue. */
export type IssueClosedStateReason = 'COMPLETED' | 'NOT_PLANNED';

/** Represents a comment on an Issue. */
export interface IssueComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId: Scalars['BigInt'] | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** Identifies the issue associated with the comment. */
  issue: Issue;
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   *
   */
  pullRequest: PullRequest | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path for this issue comment */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue comment */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'IssueComment';
}

/** The connection type for IssueComment. */
export interface IssueCommentConnection {
  /** A list of edges. */
  edges: (IssueCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (IssueComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'IssueCommentConnection';
}

/** An edge in a connection. */
export interface IssueCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IssueComment | null;
  __typename: 'IssueCommentEdge';
}

/** Properties by which issue comment connections can be ordered. */
export type IssueCommentOrderField = 'UPDATED_AT';

/** The connection type for Issue. */
export interface IssueConnection {
  /** A list of edges. */
  edges: (IssueEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Issue | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'IssueConnection';
}

/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepository {
  /** The issue contributions. */
  contributions: CreatedIssueContributionConnection;
  /** The repository in which the issues were opened. */
  repository: Repository;
  __typename: 'IssueContributionsByRepository';
}

/** An edge in a connection. */
export interface IssueEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Issue | null;
  __typename: 'IssueEdge';
}

/** Used for return value of Repository.issueOrPullRequest. */
export type IssueOrPullRequest = (Issue | PullRequest) & { __isUnion?: true };

/** Properties by which issue connections can be ordered. */
export type IssueOrderField = 'CREATED_AT' | 'UPDATED_AT' | 'COMMENTS';

/** The possible states of an issue. */
export type IssueState = 'OPEN' | 'CLOSED';

/** The possible state reasons of an issue. */
export type IssueStateReason = 'REOPENED' | 'NOT_PLANNED' | 'COMPLETED';

/** A repository issue template. */
export interface IssueTemplate {
  /** The template purpose. */
  about: Scalars['String'] | null;
  /** The suggested assignees. */
  assignees: UserConnection;
  /** The suggested issue body. */
  body: Scalars['String'] | null;
  /** The template filename. */
  filename: Scalars['String'];
  /** The suggested issue labels */
  labels: LabelConnection | null;
  /** The template name. */
  name: Scalars['String'];
  /** The suggested issue title. */
  title: Scalars['String'] | null;
  __typename: 'IssueTemplate';
}

/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnection {
  /** A list of edges. */
  edges: (IssueTimelineItemEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (IssueTimelineItem | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'IssueTimelineConnection';
}

/** An item in an issue timeline */
export type IssueTimelineItem = (
  | AssignedEvent
  | ClosedEvent
  | Commit
  | CrossReferencedEvent
  | DemilestonedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MilestonedEvent
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent
) & { __isUnion?: true };

/** An edge in a connection. */
export interface IssueTimelineItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IssueTimelineItem | null;
  __typename: 'IssueTimelineItemEdge';
}

/** An item in an issue timeline */
export type IssueTimelineItems = (
  | AddedToProjectEvent
  | AssignedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DisconnectedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | ReferencedEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent
) & { __isUnion?: true };

/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnection {
  /** A list of edges. */
  edges: (IssueTimelineItemsEdge | null)[] | null;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars['Int'];
  /** A list of nodes. */
  nodes: (IssueTimelineItems | null)[] | null;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'IssueTimelineItemsConnection';
}

/** An edge in a connection. */
export interface IssueTimelineItemsEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: IssueTimelineItems | null;
  __typename: 'IssueTimelineItemsEdge';
}

/** The possible item types found in a timeline. */
export type IssueTimelineItemsItemType =
  | 'ISSUE_COMMENT'
  | 'CROSS_REFERENCED_EVENT'
  | 'ADDED_TO_PROJECT_EVENT'
  | 'ASSIGNED_EVENT'
  | 'CLOSED_EVENT'
  | 'COMMENT_DELETED_EVENT'
  | 'CONNECTED_EVENT'
  | 'CONVERTED_NOTE_TO_ISSUE_EVENT'
  | 'CONVERTED_TO_DISCUSSION_EVENT'
  | 'DEMILESTONED_EVENT'
  | 'DISCONNECTED_EVENT'
  | 'LABELED_EVENT'
  | 'LOCKED_EVENT'
  | 'MARKED_AS_DUPLICATE_EVENT'
  | 'MENTIONED_EVENT'
  | 'MILESTONED_EVENT'
  | 'MOVED_COLUMNS_IN_PROJECT_EVENT'
  | 'PINNED_EVENT'
  | 'REFERENCED_EVENT'
  | 'REMOVED_FROM_PROJECT_EVENT'
  | 'RENAMED_TITLE_EVENT'
  | 'REOPENED_EVENT'
  | 'SUBSCRIBED_EVENT'
  | 'TRANSFERRED_EVENT'
  | 'UNASSIGNED_EVENT'
  | 'UNLABELED_EVENT'
  | 'UNLOCKED_EVENT'
  | 'USER_BLOCKED_EVENT'
  | 'UNMARKED_AS_DUPLICATE_EVENT'
  | 'UNPINNED_EVENT'
  | 'UNSUBSCRIBED_EVENT';

/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'JoinedGitHubContribution';
}

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export interface Label {
  /** Identifies the label color. */
  color: Scalars['String'];
  /** Identifies the date and time when the label was created. */
  createdAt: Scalars['DateTime'] | null;
  /** A brief description of this label. */
  description: Scalars['String'] | null;
  id: Scalars['ID'];
  /** Indicates whether or not this is a default label. */
  isDefault: Scalars['Boolean'];
  /** A list of issues associated with this label. */
  issues: IssueConnection;
  /** Identifies the label name. */
  name: Scalars['String'];
  /** A list of pull requests associated with this label. */
  pullRequests: PullRequestConnection;
  /** The repository associated with this label. */
  repository: Repository;
  /** The HTTP path for this label. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the label was last updated. */
  updatedAt: Scalars['DateTime'] | null;
  /** The HTTP URL for this label. */
  url: Scalars['URI'];
  __typename: 'Label';
}

/** The connection type for Label. */
export interface LabelConnection {
  /** A list of edges. */
  edges: (LabelEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Label | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'LabelConnection';
}

/** An edge in a connection. */
export interface LabelEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Label | null;
  __typename: 'LabelEdge';
}

/** Properties by which label connections can be ordered. */
export type LabelOrderField = 'NAME' | 'CREATED_AT';

/** An object that can have labels assigned to it. */
export type Labelable = (Discussion | Issue | PullRequest) & { __isUnion?: true };

/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the label associated with the 'labeled' event. */
  label: Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable;
  __typename: 'LabeledEvent';
}

/** Represents a given language found in repositories. */
export interface Language {
  /** The color defined for the current language. */
  color: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The name of the current language. */
  name: Scalars['String'];
  __typename: 'Language';
}

/** A list of languages associated with the parent. */
export interface LanguageConnection {
  /** A list of edges. */
  edges: (LanguageEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Language | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total size in bytes of files written in that language. */
  totalSize: Scalars['Int'];
  __typename: 'LanguageConnection';
}

/** Represents the language of a repository. */
export interface LanguageEdge {
  cursor: Scalars['String'];
  node: Language;
  /** The number of bytes of code written in the language. */
  size: Scalars['Int'];
  __typename: 'LanguageEdge';
}

/** Properties by which language connections can be ordered. */
export type LanguageOrderField = 'SIZE';

/** A repository's open source license */
export interface License {
  /** The full text of the license */
  body: Scalars['String'];
  /** The conditions set by the license */
  conditions: (LicenseRule | null)[];
  /** A human-readable description of the license */
  description: Scalars['String'] | null;
  /** Whether the license should be featured */
  featured: Scalars['Boolean'];
  /** Whether the license should be displayed in license pickers */
  hidden: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Instructions on how to implement the license */
  implementation: Scalars['String'] | null;
  /** The lowercased SPDX ID of the license */
  key: Scalars['String'];
  /** The limitations set by the license */
  limitations: (LicenseRule | null)[];
  /** The license full name specified by <https://spdx.org/licenses> */
  name: Scalars['String'];
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname: Scalars['String'] | null;
  /** The permissions set by the license */
  permissions: (LicenseRule | null)[];
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense: Scalars['Boolean'];
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId: Scalars['String'] | null;
  /** URL to the license on <https://choosealicense.com> */
  url: Scalars['URI'] | null;
  __typename: 'License';
}

/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRule {
  /** A description of the rule */
  description: Scalars['String'];
  /** The machine-readable rule key */
  key: Scalars['String'];
  /** The human-readable rule label */
  label: Scalars['String'];
  __typename: 'LicenseRule';
}

/** Autogenerated return type of LinkProjectV2ToRepository */
export interface LinkProjectV2ToRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository the project is linked to. */
  repository: Repository | null;
  __typename: 'LinkProjectV2ToRepositoryPayload';
}

/** Autogenerated return type of LinkProjectV2ToTeam */
export interface LinkProjectV2ToTeamPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The team the project is linked to */
  team: Team | null;
  __typename: 'LinkProjectV2ToTeamPayload';
}

/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The linked Project. */
  project: Project | null;
  /** The linked Repository. */
  repository: Repository | null;
  __typename: 'LinkRepositoryToProjectPayload';
}

/** A branch linked to an issue. */
export interface LinkedBranch {
  id: Scalars['ID'];
  /** The branch's ref. */
  ref: Ref | null;
  __typename: 'LinkedBranch';
}

/** The connection type for LinkedBranch. */
export interface LinkedBranchConnection {
  /** A list of edges. */
  edges: (LinkedBranchEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (LinkedBranch | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'LinkedBranchConnection';
}

/** An edge in a connection. */
export interface LinkedBranchEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LinkedBranch | null;
  __typename: 'LinkedBranchEdge';
}

/** Autogenerated return type of LockLockable */
export interface LockLockablePayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item that was locked. */
  lockedRecord: Lockable | null;
  __typename: 'LockLockablePayload';
}

/** The possible reasons that an issue or pull request was locked. */
export type LockReason = 'OFF_TOPIC' | 'TOO_HEATED' | 'RESOLVED' | 'SPAM';

/** An object that can be locked. */
export type Lockable = (Discussion | Issue | PullRequest) & { __isUnion?: true };

/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Reason that the conversation was locked (optional). */
  lockReason: LockReason | null;
  /** Object that was locked. */
  lockable: Lockable;
  __typename: 'LockedEvent';
}

/** A placeholder user for attribution of imported data on GitHub. */
export interface Mannequin {
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: Scalars['URI'];
  /** The user that has claimed the data attributed to this mannequin. */
  claimant: User | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The mannequin's email on the source instance. */
  email: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The username of the actor. */
  login: Scalars['String'];
  /** The HTML path to this resource. */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The URL to this resource. */
  url: Scalars['URI'];
  __typename: 'Mannequin';
}

/** The connection type for Mannequin. */
export interface MannequinConnection {
  /** A list of edges. */
  edges: (MannequinEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Mannequin | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'MannequinConnection';
}

/** Represents a mannequin. */
export interface MannequinEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Mannequin | null;
  __typename: 'MannequinEdge';
}

/** Properties by which mannequins can be ordered. */
export type MannequinOrderField = 'LOGIN' | 'CREATED_AT';

/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
export interface MarkDiscussionCommentAsAnswerPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that includes the chosen comment. */
  discussion: Discussion | null;
  __typename: 'MarkDiscussionCommentAsAnswerPayload';
}

/** Autogenerated return type of MarkFileAsViewed */
export interface MarkFileAsViewedPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated pull request. */
  pullRequest: PullRequest | null;
  __typename: 'MarkFileAsViewedPayload';
}

/** Autogenerated return type of MarkProjectV2AsTemplate */
export interface MarkProjectV2AsTemplatePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The project. */
  projectV2: ProjectV2 | null;
  __typename: 'MarkProjectV2AsTemplatePayload';
}

/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that is ready for review. */
  pullRequest: PullRequest | null;
  __typename: 'MarkPullRequestReadyForReviewPayload';
}

/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical: IssueOrPullRequest | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate: IssueOrPullRequest | null;
  id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars['Boolean'];
  __typename: 'MarkedAsDuplicateEvent';
}

/** A public description of a Marketplace category. */
export interface MarketplaceCategory {
  /** The category's description. */
  description: Scalars['String'] | null;
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The category's name. */
  name: Scalars['String'];
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount: Scalars['Int'];
  /** The HTTP path for this Marketplace category. */
  resourcePath: Scalars['URI'];
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount: Scalars['Int'];
  /** The short name of the category used in its URL. */
  slug: Scalars['String'];
  /** The HTTP URL for this Marketplace category. */
  url: Scalars['URI'];
  __typename: 'MarketplaceCategory';
}

/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListing {
  /** The GitHub App this listing represents. */
  app: App | null;
  /** URL to the listing owner's company site. */
  companyUrl: Scalars['URI'] | null;
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath: Scalars['URI'];
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl: Scalars['URI'];
  /** URL to the listing's documentation. */
  documentationUrl: Scalars['URI'] | null;
  /** The listing's detailed description. */
  extendedDescription: Scalars['String'] | null;
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML: Scalars['HTML'];
  /** The listing's introductory description. */
  fullDescription: Scalars['String'];
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML: Scalars['HTML'];
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans: Scalars['Boolean'];
  /** Does this listing have a terms of service link? */
  hasTermsOfService: Scalars['Boolean'];
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner: Scalars['Boolean'];
  /** A technical description of how this app works with GitHub. */
  howItWorks: Scalars['String'] | null;
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML: Scalars['HTML'];
  id: Scalars['ID'];
  /** URL to install the product to the viewer's account or organization. */
  installationUrl: Scalars['URI'] | null;
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer: Scalars['Boolean'];
  /** Whether this listing has been removed from the Marketplace. */
  isArchived: Scalars['Boolean'];
  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */
  isDraft: Scalars['Boolean'];
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid: Scalars['Boolean'];
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic: Scalars['Boolean'];
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected: Scalars['Boolean'];
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft: Scalars['Boolean'];
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified: Scalars['Boolean'];
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified: Scalars['Boolean'];
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars['String'];
  /** URL for the listing's logo image. */
  logoUrl: Scalars['URI'] | null;
  /** The listing's full name. */
  name: Scalars['String'];
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription: Scalars['String'];
  /** URL to the listing's detailed pricing. */
  pricingUrl: Scalars['URI'] | null;
  /** The category that best describes the listing. */
  primaryCategory: MarketplaceCategory;
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl: Scalars['URI'];
  /** The HTTP path for the Marketplace listing. */
  resourcePath: Scalars['URI'];
  /** The URLs for the listing's screenshots. */
  screenshotUrls: (Scalars['String'] | null)[];
  /** An alternate category that describes the listing. */
  secondaryCategory: MarketplaceCategory | null;
  /** The listing's very short description. */
  shortDescription: Scalars['String'];
  /** The short name of the listing used in its URL. */
  slug: Scalars['String'];
  /** URL to the listing's status page. */
  statusUrl: Scalars['URI'] | null;
  /** An email address for support for this listing's app. */
  supportEmail: Scalars['String'] | null;
  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */
  supportUrl: Scalars['URI'];
  /** URL to the listing's terms of service. */
  termsOfServiceUrl: Scalars['URI'] | null;
  /** The HTTP URL for the Marketplace listing. */
  url: Scalars['URI'];
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans: Scalars['Boolean'];
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove: Scalars['Boolean'];
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist: Scalars['Boolean'];
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit: Scalars['Boolean'];
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   *
   */
  viewerCanEditCategories: Scalars['Boolean'];
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans: Scalars['Boolean'];
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   *
   */
  viewerCanRedraft: Scalars['Boolean'];
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   *
   */
  viewerCanReject: Scalars['Boolean'];
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   *
   */
  viewerCanRequestApproval: Scalars['Boolean'];
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   *
   */
  viewerHasPurchased: Scalars['Boolean'];
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   *
   */
  viewerHasPurchasedForAllOrganizations: Scalars['Boolean'];
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   *
   */
  viewerIsListingAdmin: Scalars['Boolean'];
  __typename: 'MarketplaceListing';
}

/** Look up Marketplace Listings */
export interface MarketplaceListingConnection {
  /** A list of edges. */
  edges: (MarketplaceListingEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (MarketplaceListing | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'MarketplaceListingConnection';
}

/** An edge in a connection. */
export interface MarketplaceListingEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: MarketplaceListing | null;
  __typename: 'MarketplaceListingEdge';
}

/** Entities that have members who can set status messages. */
export type MemberStatusable = (Organization | Team) & { __isUnion?: true };

/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'MembersCanDeleteReposClearAuditEntry';
}

/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'MembersCanDeleteReposDisableAuditEntry';
}

/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'MembersCanDeleteReposEnableAuditEntry';
}

/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  __typename: 'MentionedEvent';
}

/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The resulting merge Commit. */
  mergeCommit: Commit | null;
  __typename: 'MergeBranchPayload';
}

/** The possible default commit messages for merges. */
export type MergeCommitMessage = 'PR_TITLE' | 'PR_BODY' | 'BLANK';

/** The possible default commit titles for merges. */
export type MergeCommitTitle = 'PR_TITLE' | 'MERGE_MESSAGE';

/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that was merged. */
  pullRequest: PullRequest | null;
  __typename: 'MergePullRequestPayload';
}

/** The queue of pull request entries to be merged into a protected branch in a repository. */
export interface MergeQueue {
  /** The configuration for this merge queue */
  configuration: MergeQueueConfiguration | null;
  /** The entries in the queue */
  entries: MergeQueueEntryConnection | null;
  id: Scalars['ID'];
  /** The estimated time in seconds until a newly added entry would be merged */
  nextEntryEstimatedTimeToMerge: Scalars['Int'] | null;
  /** The repository this merge queue belongs to */
  repository: Repository | null;
  /** The HTTP path for this merge queue */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this merge queue */
  url: Scalars['URI'];
  __typename: 'MergeQueue';
}

/** Configuration for a MergeQueue */
export interface MergeQueueConfiguration {
  /** The amount of time in minutes to wait for a check response before considering it a failure. */
  checkResponseTimeout: Scalars['Int'] | null;
  /** The maximum number of entries to build at once. */
  maximumEntriesToBuild: Scalars['Int'] | null;
  /** The maximum number of entries to merge at once. */
  maximumEntriesToMerge: Scalars['Int'] | null;
  /** The merge method to use for this queue. */
  mergeMethod: PullRequestMergeMethod | null;
  /** The strategy to use when merging entries. */
  mergingStrategy: MergeQueueMergingStrategy | null;
  /** The minimum number of entries required to merge at once. */
  minimumEntriesToMerge: Scalars['Int'] | null;
  /** The amount of time in minutes to wait before ignoring the minumum number of entries in the queue requirement and merging a collection of entries */
  minimumEntriesToMergeWaitTime: Scalars['Int'] | null;
  __typename: 'MergeQueueConfiguration';
}

/** Entries in a MergeQueue */
export interface MergeQueueEntry {
  /** The base commit for this entry */
  baseCommit: Commit | null;
  /** The date and time this entry was added to the merge queue */
  enqueuedAt: Scalars['DateTime'];
  /** The actor that enqueued this entry */
  enqueuer: Actor;
  /** The estimated time in seconds until this entry will be merged */
  estimatedTimeToMerge: Scalars['Int'] | null;
  /** The head commit for this entry */
  headCommit: Commit | null;
  id: Scalars['ID'];
  /** Whether this pull request should jump the queue */
  jump: Scalars['Boolean'];
  /** The merge queue that this entry belongs to */
  mergeQueue: MergeQueue | null;
  /** The position of this entry in the queue */
  position: Scalars['Int'];
  /** The pull request that will be added to a merge group */
  pullRequest: PullRequest | null;
  /** Does this pull request need to be deployed on its own */
  solo: Scalars['Boolean'];
  /** The state of this entry in the queue */
  state: MergeQueueEntryState;
  __typename: 'MergeQueueEntry';
}

/** The connection type for MergeQueueEntry. */
export interface MergeQueueEntryConnection {
  /** A list of edges. */
  edges: (MergeQueueEntryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (MergeQueueEntry | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'MergeQueueEntryConnection';
}

/** An edge in a connection. */
export interface MergeQueueEntryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: MergeQueueEntry | null;
  __typename: 'MergeQueueEntryEdge';
}

/** The possible states for a merge queue entry. */
export type MergeQueueEntryState =
  | 'QUEUED'
  | 'AWAITING_CHECKS'
  | 'MERGEABLE'
  | 'UNMERGEABLE'
  | 'LOCKED';

/** The possible merging strategies for a merge queue. */
export type MergeQueueMergingStrategy = 'ALLGREEN' | 'HEADGREEN';

/** Whether or not a PullRequest can be merged. */
export type MergeableState = 'MERGEABLE' | 'CONFLICTING' | 'UNKNOWN';

/** Represents a 'merged' event on a given pull request. */
export interface MergedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the commit associated with the `merge` event. */
  commit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the Ref associated with the `merge` event. */
  mergeRef: Ref | null;
  /** Identifies the name of the Ref associated with the `merge` event. */
  mergeRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** The HTTP path for this merged event. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this merged event. */
  url: Scalars['URI'];
  __typename: 'MergedEvent';
}

/** Represents a GitHub Enterprise Importer (GEI) migration. */
export type Migration = RepositoryMigration & { __isUnion?: true };

/** A GitHub Enterprise Importer (GEI) migration source. */
export interface MigrationSource {
  id: Scalars['ID'];
  /** The migration source name. */
  name: Scalars['String'];
  /** The migration source type. */
  type: MigrationSourceType;
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url: Scalars['URI'];
  __typename: 'MigrationSource';
}

/** Represents the different GitHub Enterprise Importer (GEI) migration sources. */
export type MigrationSourceType = 'AZURE_DEVOPS' | 'BITBUCKET_SERVER' | 'GITHUB_ARCHIVE';

/** The GitHub Enterprise Importer (GEI) migration state. */
export type MigrationState =
  | 'NOT_STARTED'
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'SUCCEEDED'
  | 'FAILED'
  | 'PENDING_VALIDATION'
  | 'FAILED_VALIDATION';

/** Represents a Milestone object on a given repository. */
export interface Milestone {
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the actor who created the milestone. */
  creator: Actor | null;
  /** Identifies the description of the milestone. */
  description: Scalars['String'] | null;
  /** Identifies the due date of the milestone. */
  dueOn: Scalars['DateTime'] | null;
  id: Scalars['ID'];
  /** A list of issues associated with the milestone. */
  issues: IssueConnection;
  /** Identifies the number of the milestone. */
  number: Scalars['Int'];
  /** Identifies the percentage complete for the milestone */
  progressPercentage: Scalars['Float'];
  /** A list of pull requests associated with the milestone. */
  pullRequests: PullRequestConnection;
  /** The repository associated with this milestone. */
  repository: Repository;
  /** The HTTP path for this milestone */
  resourcePath: Scalars['URI'];
  /** Identifies the state of the milestone. */
  state: MilestoneState;
  /** Identifies the title of the milestone. */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this milestone */
  url: Scalars['URI'];
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  __typename: 'Milestone';
}

/** The connection type for Milestone. */
export interface MilestoneConnection {
  /** A list of edges. */
  edges: (MilestoneEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Milestone | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'MilestoneConnection';
}

/** An edge in a connection. */
export interface MilestoneEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Milestone | null;
  __typename: 'MilestoneEdge';
}

/** Types that can be inside a Milestone. */
export type MilestoneItem = (Issue | PullRequest) & { __isUnion?: true };

/** Properties by which milestone connections can be ordered. */
export type MilestoneOrderField = 'DUE_DATE' | 'CREATED_AT' | 'UPDATED_AT' | 'NUMBER';

/** The possible states of a milestone. */
export type MilestoneState = 'OPEN' | 'CLOSED';

/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  subject: MilestoneItem;
  __typename: 'MilestonedEvent';
}

/** Entities that can be minimized. */
export type Minimizable = (
  | CommitComment
  | DiscussionComment
  | GistComment
  | IssueComment
  | PullRequestReview
  | PullRequestReviewComment
) & { __isUnion?: true };

/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The comment that was minimized. */
  minimizedComment: Minimizable | null;
  __typename: 'MinimizeCommentPayload';
}

/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayload {
  /** The new edge of the moved card. */
  cardEdge: ProjectCardEdge | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'MoveProjectCardPayload';
}

/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new edge of the moved column. */
  columnEdge: ProjectColumnEdge | null;
  __typename: 'MoveProjectColumnPayload';
}

/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  __typename: 'MovedColumnsInProjectEvent';
}

/** The root query for implementing GraphQL mutations. */
export interface Mutation {
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations: AbortQueuedMigrationsPayload | null;
  /** Abort a repository migration queued or in progress. */
  abortRepositoryMigration: AbortRepositoryMigrationPayload | null;
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation: AcceptEnterpriseAdministratorInvitationPayload | null;
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion: AcceptTopicSuggestionPayload | null;
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable: AddAssigneesToAssignablePayload | null;
  /** Adds a comment to an Issue or Pull Request. */
  addComment: AddCommentPayload | null;
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment: AddDiscussionCommentPayload | null;
  /** Vote for an option in a discussion poll. */
  addDiscussionPollVote: AddDiscussionPollVotePayload | null;
  /** Adds enterprise members to an organization within the enterprise. */
  addEnterpriseOrganizationMember: AddEnterpriseOrganizationMemberPayload | null;
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement: AddEnterpriseSupportEntitlementPayload | null;
  /** Adds labels to a labelable object. */
  addLabelsToLabelable: AddLabelsToLabelablePayload | null;
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard: AddProjectCardPayload | null;
  /** Adds a column to a Project. */
  addProjectColumn: AddProjectColumnPayload | null;
  /** Creates a new draft issue and add it to a Project. */
  addProjectV2DraftIssue: AddProjectV2DraftIssuePayload | null;
  /** Links an existing content instance to a Project. */
  addProjectV2ItemById: AddProjectV2ItemByIdPayload | null;
  /** Adds a review to a Pull Request. */
  addPullRequestReview: AddPullRequestReviewPayload | null;
  /** Adds a comment to a review. */
  addPullRequestReviewComment: AddPullRequestReviewCommentPayload | null;
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread: AddPullRequestReviewThreadPayload | null;
  /** Adds a reply to an existing Pull Request Review Thread. */
  addPullRequestReviewThreadReply: AddPullRequestReviewThreadReplyPayload | null;
  /** Adds a reaction to a subject. */
  addReaction: AddReactionPayload | null;
  /** Adds a star to a Starrable. */
  addStar: AddStarPayload | null;
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote: AddUpvotePayload | null;
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain: AddVerifiableDomainPayload | null;
  /** Approve all pending deployments under one or more environments */
  approveDeployments: ApproveDeploymentsPayload | null;
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain: ApproveVerifiableDomainPayload | null;
  /** Archives a ProjectV2Item */
  archiveProjectV2Item: ArchiveProjectV2ItemPayload | null;
  /** Marks a repository as archived. */
  archiveRepository: ArchiveRepositoryPayload | null;
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation: CancelEnterpriseAdminInvitationPayload | null;
  /** Cancel an active sponsorship. */
  cancelSponsorship: CancelSponsorshipPayload | null;
  /** Update your status on GitHub. */
  changeUserStatus: ChangeUserStatusPayload | null;
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable: ClearLabelsFromLabelablePayload | null;
  /** This mutation clears the value of a field for an item in a Project. Currently only text, number, date, assignees, labels, single-select, iteration and milestone fields are supported. */
  clearProjectV2ItemFieldValue: ClearProjectV2ItemFieldValuePayload | null;
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject: CloneProjectPayload | null;
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository: CloneTemplateRepositoryPayload | null;
  /** Close a discussion. */
  closeDiscussion: CloseDiscussionPayload | null;
  /** Close an issue. */
  closeIssue: CloseIssuePayload | null;
  /** Close a pull request. */
  closePullRequest: ClosePullRequestPayload | null;
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue: ConvertProjectCardNoteToIssuePayload | null;
  /** Converts a pull request to draft */
  convertPullRequestToDraft: ConvertPullRequestToDraftPayload | null;
  /** Copy a project. */
  copyProjectV2: CopyProjectV2Payload | null;
  /** Invites a user to claim reattributable data */
  createAttributionInvitation: CreateAttributionInvitationPayload | null;
  /** Create a new branch protection rule */
  createBranchProtectionRule: CreateBranchProtectionRulePayload | null;
  /** Create a check run. */
  createCheckRun: CreateCheckRunPayload | null;
  /** Create a check suite */
  createCheckSuite: CreateCheckSuitePayload | null;
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   *
   */
  createCommitOnBranch: CreateCommitOnBranchPayload | null;
  /** Create a discussion. */
  createDiscussion: CreateDiscussionPayload | null;
  /** Creates an organization as part of an enterprise account. */
  createEnterpriseOrganization: CreateEnterpriseOrganizationPayload | null;
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment: CreateEnvironmentPayload | null;
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry: CreateIpAllowListEntryPayload | null;
  /** Creates a new issue. */
  createIssue: CreateIssuePayload | null;
  /** Create a branch linked to an issue. */
  createLinkedBranch: CreateLinkedBranchPayload | null;
  /** Creates a GitHub Enterprise Importer (GEI) migration source. */
  createMigrationSource: CreateMigrationSourcePayload | null;
  /** Creates a new project. */
  createProject: CreateProjectPayload | null;
  /** Creates a new project. */
  createProjectV2: CreateProjectV2Payload | null;
  /** Create a new project field. */
  createProjectV2Field: CreateProjectV2FieldPayload | null;
  /** Create a new pull request */
  createPullRequest: CreatePullRequestPayload | null;
  /** Create a new Git Ref. */
  createRef: CreateRefPayload | null;
  /** Create a new repository. */
  createRepository: CreateRepositoryPayload | null;
  /** Create a repository ruleset */
  createRepositoryRuleset: CreateRepositoryRulesetPayload | null;
  /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */
  createSponsorsListing: CreateSponsorsListingPayload | null;
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier: CreateSponsorsTierPayload | null;
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship: CreateSponsorshipPayload | null;
  /** Make many one-time sponsorships for different sponsorable users or organizations at once. Can only sponsor those who have a public GitHub Sponsors profile. */
  createSponsorships: CreateSponsorshipsPayload | null;
  /** Creates a new team discussion. */
  createTeamDiscussion: CreateTeamDiscussionPayload | null;
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment: CreateTeamDiscussionCommentPayload | null;
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion: DeclineTopicSuggestionPayload | null;
  /** Delete a branch protection rule */
  deleteBranchProtectionRule: DeleteBranchProtectionRulePayload | null;
  /** Deletes a deployment. */
  deleteDeployment: DeleteDeploymentPayload | null;
  /** Delete a discussion and all of its replies. */
  deleteDiscussion: DeleteDiscussionPayload | null;
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment: DeleteDiscussionCommentPayload | null;
  /** Deletes an environment */
  deleteEnvironment: DeleteEnvironmentPayload | null;
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry: DeleteIpAllowListEntryPayload | null;
  /** Deletes an Issue object. */
  deleteIssue: DeleteIssuePayload | null;
  /** Deletes an IssueComment object. */
  deleteIssueComment: DeleteIssueCommentPayload | null;
  /** Unlink a branch from an issue. */
  deleteLinkedBranch: DeleteLinkedBranchPayload | null;
  /** Deletes a project. */
  deleteProject: DeleteProjectPayload | null;
  /** Deletes a project card. */
  deleteProjectCard: DeleteProjectCardPayload | null;
  /** Deletes a project column. */
  deleteProjectColumn: DeleteProjectColumnPayload | null;
  /** Delete a project. */
  deleteProjectV2: DeleteProjectV2Payload | null;
  /** Delete a project field. */
  deleteProjectV2Field: DeleteProjectV2FieldPayload | null;
  /** Deletes an item from a Project. */
  deleteProjectV2Item: DeleteProjectV2ItemPayload | null;
  /** Deletes a project workflow. */
  deleteProjectV2Workflow: DeleteProjectV2WorkflowPayload | null;
  /** Deletes a pull request review. */
  deletePullRequestReview: DeletePullRequestReviewPayload | null;
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment: DeletePullRequestReviewCommentPayload | null;
  /** Delete a Git Ref. */
  deleteRef: DeleteRefPayload | null;
  /** Delete a repository ruleset */
  deleteRepositoryRuleset: DeleteRepositoryRulesetPayload | null;
  /** Deletes a team discussion. */
  deleteTeamDiscussion: DeleteTeamDiscussionPayload | null;
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment: DeleteTeamDiscussionCommentPayload | null;
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain: DeleteVerifiableDomainPayload | null;
  /** Remove a pull request from the merge queue. */
  dequeuePullRequest: DequeuePullRequestPayload | null;
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge: DisablePullRequestAutoMergePayload | null;
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview: DismissPullRequestReviewPayload | null;
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert: DismissRepositoryVulnerabilityAlertPayload | null;
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge: EnablePullRequestAutoMergePayload | null;
  /** Add a pull request to the merge queue. */
  enqueuePullRequest: EnqueuePullRequestPayload | null;
  /** Follow an organization. */
  followOrganization: FollowOrganizationPayload | null;
  /** Follow a user. */
  followUser: FollowUserPayload | null;
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole: GrantEnterpriseOrganizationsMigratorRolePayload | null;
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole: GrantMigratorRolePayload | null;
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin: InviteEnterpriseAdminPayload | null;
  /** Links a project to a repository. */
  linkProjectV2ToRepository: LinkProjectV2ToRepositoryPayload | null;
  /** Links a project to a team. */
  linkProjectV2ToTeam: LinkProjectV2ToTeamPayload | null;
  /** Creates a repository link for a project. */
  linkRepositoryToProject: LinkRepositoryToProjectPayload | null;
  /** Lock a lockable object */
  lockLockable: LockLockablePayload | null;
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer: MarkDiscussionCommentAsAnswerPayload | null;
  /** Mark a pull request file as viewed */
  markFileAsViewed: MarkFileAsViewedPayload | null;
  /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */
  markProjectV2AsTemplate: MarkProjectV2AsTemplatePayload | null;
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview: MarkPullRequestReadyForReviewPayload | null;
  /** Merge a head into a branch. */
  mergeBranch: MergeBranchPayload | null;
  /** Merge a pull request. */
  mergePullRequest: MergePullRequestPayload | null;
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment: MinimizeCommentPayload | null;
  /** Moves a project card to another place. */
  moveProjectCard: MoveProjectCardPayload | null;
  /** Moves a project column to another place. */
  moveProjectColumn: MoveProjectColumnPayload | null;
  /** Pin an issue to a repository */
  pinIssue: PinIssuePayload | null;
  /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */
  publishSponsorsTier: PublishSponsorsTierPayload | null;
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes: RegenerateEnterpriseIdentityProviderRecoveryCodesPayload | null;
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken: RegenerateVerifiableDomainTokenPayload | null;
  /** Reject all pending deployments under one or more environments */
  rejectDeployments: RejectDeploymentsPayload | null;
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable: RemoveAssigneesFromAssignablePayload | null;
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin: RemoveEnterpriseAdminPayload | null;
  /** Removes the identity provider from an enterprise */
  removeEnterpriseIdentityProvider: RemoveEnterpriseIdentityProviderPayload | null;
  /** Removes a user from all organizations within the enterprise */
  removeEnterpriseMember: RemoveEnterpriseMemberPayload | null;
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization: RemoveEnterpriseOrganizationPayload | null;
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement: RemoveEnterpriseSupportEntitlementPayload | null;
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable: RemoveLabelsFromLabelablePayload | null;
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator: RemoveOutsideCollaboratorPayload | null;
  /** Removes a reaction from a subject. */
  removeReaction: RemoveReactionPayload | null;
  /** Removes a star from a Starrable. */
  removeStar: RemoveStarPayload | null;
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote: RemoveUpvotePayload | null;
  /** Reopen a discussion. */
  reopenDiscussion: ReopenDiscussionPayload | null;
  /** Reopen a issue. */
  reopenIssue: ReopenIssuePayload | null;
  /** Reopen a pull request. */
  reopenPullRequest: ReopenPullRequestPayload | null;
  /** Set review requests on a pull request. */
  requestReviews: RequestReviewsPayload | null;
  /** Rerequests an existing check suite. */
  rerequestCheckSuite: RerequestCheckSuitePayload | null;
  /** Marks a review thread as resolved. */
  resolveReviewThread: ResolveReviewThreadPayload | null;
  /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */
  retireSponsorsTier: RetireSponsorsTierPayload | null;
  /** Create a pull request that reverts the changes from a merged pull request. */
  revertPullRequest: RevertPullRequestPayload | null;
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole: RevokeEnterpriseOrganizationsMigratorRolePayload | null;
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole: RevokeMigratorRolePayload | null;
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider: SetEnterpriseIdentityProviderPayload | null;
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit: SetOrganizationInteractionLimitPayload | null;
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit: SetRepositoryInteractionLimitPayload | null;
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit: SetUserInteractionLimitPayload | null;
  /** Starts a GitHub Enterprise Importer organization migration. */
  startOrganizationMigration: StartOrganizationMigrationPayload | null;
  /** Starts a GitHub Enterprise Importer (GEI) repository migration. */
  startRepositoryMigration: StartRepositoryMigrationPayload | null;
  /** Submits a pending pull request review. */
  submitPullRequestReview: SubmitPullRequestReviewPayload | null;
  /** Transfer an organization from one enterprise to another enterprise. */
  transferEnterpriseOrganization: TransferEnterpriseOrganizationPayload | null;
  /** Transfer an issue to a different repository */
  transferIssue: TransferIssuePayload | null;
  /** Unarchives a ProjectV2Item */
  unarchiveProjectV2Item: UnarchiveProjectV2ItemPayload | null;
  /** Unarchives a repository. */
  unarchiveRepository: UnarchiveRepositoryPayload | null;
  /** Unfollow an organization. */
  unfollowOrganization: UnfollowOrganizationPayload | null;
  /** Unfollow a user. */
  unfollowUser: UnfollowUserPayload | null;
  /** Unlinks a project from a repository. */
  unlinkProjectV2FromRepository: UnlinkProjectV2FromRepositoryPayload | null;
  /** Unlinks a project to a team. */
  unlinkProjectV2FromTeam: UnlinkProjectV2FromTeamPayload | null;
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject: UnlinkRepositoryFromProjectPayload | null;
  /** Unlock a lockable object */
  unlockLockable: UnlockLockablePayload | null;
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer: UnmarkDiscussionCommentAsAnswerPayload | null;
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed: UnmarkFileAsViewedPayload | null;
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate: UnmarkIssueAsDuplicatePayload | null;
  /** Unmark a project as a template. */
  unmarkProjectV2AsTemplate: UnmarkProjectV2AsTemplatePayload | null;
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment: UnminimizeCommentPayload | null;
  /** Unpin a pinned issue from a repository */
  unpinIssue: UnpinIssuePayload | null;
  /** Marks a review thread as unresolved. */
  unresolveReviewThread: UnresolveReviewThreadPayload | null;
  /** Update a branch protection rule */
  updateBranchProtectionRule: UpdateBranchProtectionRulePayload | null;
  /** Update a check run */
  updateCheckRun: UpdateCheckRunPayload | null;
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences: UpdateCheckSuitePreferencesPayload | null;
  /** Update a discussion */
  updateDiscussion: UpdateDiscussionPayload | null;
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment: UpdateDiscussionCommentPayload | null;
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole: UpdateEnterpriseAdministratorRolePayload | null;
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload | null;
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting: UpdateEnterpriseDefaultRepositoryPermissionSettingPayload | null;
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload | null;
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload | null;
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting: UpdateEnterpriseMembersCanDeleteIssuesSettingPayload | null;
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload | null;
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload | null;
  /** Sets whether or not an organization admin can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting: UpdateEnterpriseMembersCanMakePurchasesSettingPayload | null;
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload | null;
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload | null;
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting: UpdateEnterpriseOrganizationProjectsSettingPayload | null;
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole: UpdateEnterpriseOwnerOrganizationRolePayload | null;
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile: UpdateEnterpriseProfilePayload | null;
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting: UpdateEnterpriseRepositoryProjectsSettingPayload | null;
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting: UpdateEnterpriseTeamDiscussionsSettingPayload | null;
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload | null;
  /** Updates an environment. */
  updateEnvironment: UpdateEnvironmentPayload | null;
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting: UpdateIpAllowListEnabledSettingPayload | null;
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry: UpdateIpAllowListEntryPayload | null;
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting: UpdateIpAllowListForInstalledAppsEnabledSettingPayload | null;
  /** Updates an Issue. */
  updateIssue: UpdateIssuePayload | null;
  /** Updates an IssueComment object. */
  updateIssueComment: UpdateIssueCommentPayload | null;
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting: UpdateNotificationRestrictionSettingPayload | null;
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload | null;
  /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
  updateOrganizationWebCommitSignoffSetting: UpdateOrganizationWebCommitSignoffSettingPayload | null;
  /** Updates an existing project. */
  updateProject: UpdateProjectPayload | null;
  /** Updates an existing project card. */
  updateProjectCard: UpdateProjectCardPayload | null;
  /** Updates an existing project column. */
  updateProjectColumn: UpdateProjectColumnPayload | null;
  /** Updates an existing project (beta). */
  updateProjectV2: UpdateProjectV2Payload | null;
  /** Update the collaborators on a team or a project */
  updateProjectV2Collaborators: UpdateProjectV2CollaboratorsPayload | null;
  /** Updates a draft issue within a Project. */
  updateProjectV2DraftIssue: UpdateProjectV2DraftIssuePayload | null;
  /** This mutation updates the value of a field for an item in a Project. Currently only single-select, text, number, date, and iteration fields are supported. */
  updateProjectV2ItemFieldValue: UpdateProjectV2ItemFieldValuePayload | null;
  /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
  updateProjectV2ItemPosition: UpdateProjectV2ItemPositionPayload | null;
  /** Update a pull request */
  updatePullRequest: UpdatePullRequestPayload | null;
  /** Merge or Rebase HEAD from upstream branch into pull request branch */
  updatePullRequestBranch: UpdatePullRequestBranchPayload | null;
  /** Updates the body of a pull request review. */
  updatePullRequestReview: UpdatePullRequestReviewPayload | null;
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment: UpdatePullRequestReviewCommentPayload | null;
  /** Update a Git Ref. */
  updateRef: UpdateRefPayload | null;
  /** Update information about a repository. */
  updateRepository: UpdateRepositoryPayload | null;
  /** Update a repository ruleset */
  updateRepositoryRuleset: UpdateRepositoryRulesetPayload | null;
  /** Sets whether contributors are required to sign off on web-based commits for a repository. */
  updateRepositoryWebCommitSignoffSetting: UpdateRepositoryWebCommitSignoffSettingPayload | null;
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences: UpdateSponsorshipPreferencesPayload | null;
  /** Updates the state for subscribable subjects. */
  updateSubscription: UpdateSubscriptionPayload | null;
  /** Updates a team discussion. */
  updateTeamDiscussion: UpdateTeamDiscussionPayload | null;
  /** Updates a discussion comment. */
  updateTeamDiscussionComment: UpdateTeamDiscussionCommentPayload | null;
  /** Update team repository. */
  updateTeamsRepository: UpdateTeamsRepositoryPayload | null;
  /** Replaces the repository's topics with the given topics. */
  updateTopics: UpdateTopicsPayload | null;
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain: VerifyVerifiableDomainPayload | null;
  __typename: 'Mutation';
}

/** An object with an ID. */
export type Node = (
  | AddedToMergeQueueEvent
  | AddedToProjectEvent
  | App
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | Blob
  | Bot
  | BranchProtectionRule
  | BypassForcePushAllowance
  | BypassPullRequestAllowance
  | CWE
  | CheckRun
  | CheckSuite
  | ClosedEvent
  | CodeOfConduct
  | CommentDeletedEvent
  | Commit
  | CommitComment
  | CommitCommentThread
  | Comparison
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployKey
  | DeployedEvent
  | Deployment
  | DeploymentEnvironmentChangedEvent
  | DeploymentReview
  | DeploymentStatus
  | DisconnectedEvent
  | Discussion
  | DiscussionCategory
  | DiscussionComment
  | DiscussionPoll
  | DiscussionPollOption
  | DraftIssue
  | Enterprise
  | EnterpriseAdministratorInvitation
  | EnterpriseIdentityProvider
  | EnterpriseRepositoryInfo
  | EnterpriseServerInstallation
  | EnterpriseServerUserAccount
  | EnterpriseServerUserAccountEmail
  | EnterpriseServerUserAccountsUpload
  | EnterpriseUserAccount
  | Environment
  | ExternalIdentity
  | Gist
  | GistComment
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IpAllowListEntry
  | Issue
  | IssueComment
  | Label
  | LabeledEvent
  | Language
  | License
  | LinkedBranch
  | LockedEvent
  | Mannequin
  | MarkedAsDuplicateEvent
  | MarketplaceCategory
  | MarketplaceListing
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | MentionedEvent
  | MergeQueue
  | MergeQueueEntry
  | MergedEvent
  | MigrationSource
  | Milestone
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | OIDCProvider
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | Organization
  | OrganizationIdentityProvider
  | OrganizationInvitation
  | OrganizationMigration
  | Package
  | PackageFile
  | PackageTag
  | PackageVersion
  | PinnedDiscussion
  | PinnedEvent
  | PinnedIssue
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | Project
  | ProjectCard
  | ProjectColumn
  | ProjectV2
  | ProjectV2Field
  | ProjectV2Item
  | ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2IterationField
  | ProjectV2SingleSelectField
  | ProjectV2View
  | ProjectV2Workflow
  | PublicKey
  | PullRequest
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewComment
  | PullRequestReviewThread
  | PullRequestThread
  | Push
  | PushAllowance
  | Reaction
  | ReadyForReviewEvent
  | Ref
  | ReferencedEvent
  | Release
  | ReleaseAsset
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | Repository
  | RepositoryInvitation
  | RepositoryMigration
  | RepositoryRule
  | RepositoryRuleset
  | RepositoryRulesetBypassActor
  | RepositoryTopic
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | RepositoryVulnerabilityAlert
  | ReviewDismissalAllowance
  | ReviewDismissedEvent
  | ReviewRequest
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SavedReply
  | SecurityAdvisory
  | SponsorsActivity
  | SponsorsListing
  | SponsorsListingFeaturedItem
  | SponsorsTier
  | Sponsorship
  | SponsorshipNewsletter
  | Status
  | StatusCheckRollup
  | StatusContext
  | SubscribedEvent
  | Tag
  | Team
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamDiscussion
  | TeamDiscussionComment
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
  | Topic
  | TransferredEvent
  | Tree
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | User
  | UserBlockedEvent
  | UserContentEdit
  | UserStatus
  | VerifiableDomain
  | Workflow
  | WorkflowRun
  | WorkflowRunFile
) & { __isUnion?: true };

/** The possible values for the notification restriction setting. */
export type NotificationRestrictionSettingValue = 'ENABLED' | 'DISABLED';

/** An OIDC identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface OIDCProvider {
  /** The enterprise this identity provider belongs to. */
  enterprise: Enterprise | null;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The OIDC identity provider type */
  providerType: OIDCProviderType;
  /** The id of the tenant this provider is attached to */
  tenantId: Scalars['String'];
  __typename: 'OIDCProvider';
}

/** The OIDC identity provider type */
export type OIDCProviderType = 'AAD';

/** Metadata for an audit entry with action oauth_application.* */
export type OauthApplicationAuditEntryData = (
  | OauthApplicationCreateAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
) & { __isUnion?: true };

/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The application URL of the OAuth application. */
  applicationUrl: Scalars['URI'] | null;
  /** The callback URL of the OAuth application. */
  callbackUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The rate limit of the OAuth application. */
  rateLimit: Scalars['Int'] | null;
  /** The state of the OAuth application. */
  state: OauthApplicationCreateAuditEntryState | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OauthApplicationCreateAuditEntry';
}

/** The state of an OAuth application when it was created. */
export type OauthApplicationCreateAuditEntryState = 'ACTIVE' | 'SUSPENDED' | 'PENDING_DELETION';

/** The corresponding operation type for the action */
export type OperationType =
  | 'ACCESS'
  | 'AUTHENTICATION'
  | 'CREATE'
  | 'MODIFY'
  | 'REMOVE'
  | 'RESTORE'
  | 'TRANSFER';

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export type OrderDirection = 'ASC' | 'DESC';

/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The email address used to invite a billing manager for the organization. */
  invitationEmail: Scalars['String'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgAddBillingManagerAuditEntry';
}

/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The permission level of the member added to the organization. */
  permission: OrgAddMemberAuditEntryPermission | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgAddMemberAuditEntry';
}

/** The permissions available to members on an Organization. */
export type OrgAddMemberAuditEntryPermission = 'READ' | 'ADMIN';

/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The blocked user. */
  blockedUser: User | null;
  /** The username of the blocked user. */
  blockedUserName: Scalars['String'] | null;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgBlockUserAuditEntry';
}

/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgConfigDisableCollaboratorsOnlyAuditEntry';
}

/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgConfigEnableCollaboratorsOnlyAuditEntry';
}

/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The billing plan for the Organization. */
  billingPlan: OrgCreateAuditEntryBillingPlan | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgCreateAuditEntry';
}

/** The billing plans available for organizations. */
export type OrgCreateAuditEntryBillingPlan =
  | 'FREE'
  | 'BUSINESS'
  | 'BUSINESS_PLUS'
  | 'UNLIMITED'
  | 'TIERED_PER_SEAT';

/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgDisableOauthAppRestrictionsAuditEntry';
}

/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  issuerUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl: Scalars['URI'] | null;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgDisableSamlAuditEntry';
}

/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgDisableTwoFactorRequirementAuditEntry';
}

/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgEnableOauthAppRestrictionsAuditEntry';
}

/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  issuerUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl: Scalars['URI'] | null;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgEnableSamlAuditEntry';
}

/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgEnableTwoFactorRequirementAuditEntry';
}

/** Properties by which enterprise owners can be ordered. */
export type OrgEnterpriseOwnerOrderField = 'LOGIN';

/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The email address of the organization invitation. */
  email: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The organization invitation. */
  organizationInvitation: OrganizationInvitation | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgInviteMemberAuditEntry';
}

/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgInviteToBusinessAuditEntry';
}

/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgOauthAppAccessApprovedAuditEntry';
}

/** Audit log entry for a org.oauth_app_access_blocked event. */
export interface OrgOauthAppAccessBlockedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgOauthAppAccessBlockedAuditEntry';
}

/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgOauthAppAccessDeniedAuditEntry';
}

/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgOauthAppAccessRequestedAuditEntry';
}

/** Audit log entry for a org.oauth_app_access_unblocked event. */
export interface OrgOauthAppAccessUnblockedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth application. */
  oauthApplicationName: Scalars['String'] | null;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl: Scalars['URI'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgOauthAppAccessUnblockedAuditEntry';
}

/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The reason for the billing manager being removed. */
  reason: OrgRemoveBillingManagerAuditEntryReason | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgRemoveBillingManagerAuditEntry';
}

/** The reason a billing manager was removed from an Organization. */
export type OrgRemoveBillingManagerAuditEntryReason =
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  | 'SAML_EXTERNAL_IDENTITY_MISSING'
  | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY';

/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The types of membership the member has with the organization. */
  membershipTypes: OrgRemoveMemberAuditEntryMembershipType[] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The reason for the member being removed. */
  reason: OrgRemoveMemberAuditEntryReason | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgRemoveMemberAuditEntry';
}

/** The type of membership a user has with an Organization. */
export type OrgRemoveMemberAuditEntryMembershipType =
  | 'SUSPENDED'
  | 'DIRECT_MEMBER'
  | 'ADMIN'
  | 'BILLING_MANAGER'
  | 'UNAFFILIATED'
  | 'OUTSIDE_COLLABORATOR';

/** The reason a member was removed from an Organization. */
export type OrgRemoveMemberAuditEntryReason =
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  | 'SAML_EXTERNAL_IDENTITY_MISSING'
  | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY'
  | 'USER_ACCOUNT_DELETED'
  | 'TWO_FACTOR_ACCOUNT_RECOVERY';

/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The types of membership the outside collaborator has with the organization. */
  membershipTypes: OrgRemoveOutsideCollaboratorAuditEntryMembershipType[] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The reason for the outside collaborator being removed from the Organization. */
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgRemoveOutsideCollaboratorAuditEntry';
}

/** The type of membership a user has with an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryMembershipType =
  | 'OUTSIDE_COLLABORATOR'
  | 'UNAFFILIATED'
  | 'BILLING_MANAGER';

/** The reason an outside collaborator was removed from an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryReason =
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  | 'SAML_EXTERNAL_IDENTITY_MISSING';

/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The number of custom email routings for the restored member. */
  restoredCustomEmailRoutingsCount: Scalars['Int'] | null;
  /** The number of issue assignments for the restored member. */
  restoredIssueAssignmentsCount: Scalars['Int'] | null;
  /** Restored organization membership objects. */
  restoredMemberships: OrgRestoreMemberAuditEntryMembership[] | null;
  /** The number of restored memberships. */
  restoredMembershipsCount: Scalars['Int'] | null;
  /** The number of repositories of the restored member. */
  restoredRepositoriesCount: Scalars['Int'] | null;
  /** The number of starred repositories for the restored member. */
  restoredRepositoryStarsCount: Scalars['Int'] | null;
  /** The number of watched repositories for the restored member. */
  restoredRepositoryWatchesCount: Scalars['Int'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgRestoreMemberAuditEntry';
}

/** Types of memberships that can be restored for an Organization member. */
export type OrgRestoreMemberAuditEntryMembership = (
  | OrgRestoreMemberMembershipOrganizationAuditEntryData
  | OrgRestoreMemberMembershipRepositoryAuditEntryData
  | OrgRestoreMemberMembershipTeamAuditEntryData
) & { __isUnion?: true };

/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryData {
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  __typename: 'OrgRestoreMemberMembershipOrganizationAuditEntryData';
}

/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryData {
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  __typename: 'OrgRestoreMemberMembershipRepositoryAuditEntryData';
}

/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryData {
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  __typename: 'OrgRestoreMemberMembershipTeamAuditEntryData';
}

/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The user being unblocked by the organization. */
  blockedUser: User | null;
  /** The username of the blocked user. */
  blockedUserName: Scalars['String'] | null;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgUnblockUserAuditEntry';
}

/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The new base repository permission level for the organization. */
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;
  /** The former base repository permission level for the organization. */
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgUpdateDefaultRepositoryPermissionAuditEntry';
}

/** The default permission a repository can have in an Organization. */
export type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission =
  | 'READ'
  | 'WRITE'
  | 'ADMIN'
  | 'NONE';

/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The new member permission level for the organization. */
  permission: OrgUpdateMemberAuditEntryPermission | null;
  /** The former member permission level for the organization. */
  permissionWas: OrgUpdateMemberAuditEntryPermission | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgUpdateMemberAuditEntry';
}

/** The permissions available to members on an Organization. */
export type OrgUpdateMemberAuditEntryPermission = 'READ' | 'ADMIN';

/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** Can members create repositories in the organization. */
  canCreateRepositories: Scalars['Boolean'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The permission for visibility level of repositories for this organization. */
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | null;
  __typename: 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry';
}

/** The permissions available for repository creation on an Organization. */
export type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility =
  | 'ALL'
  | 'PUBLIC'
  | 'NONE'
  | 'PRIVATE'
  | 'INTERNAL'
  | 'PUBLIC_INTERNAL'
  | 'PRIVATE_INTERNAL'
  | 'PUBLIC_PRIVATE';

/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** Can outside collaborators be invited to repositories in the organization. */
  canInviteOutsideCollaboratorsToRepositories: Scalars['Boolean'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry';
}

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface Organization {
  /** The text of the announcement */
  announcement: Scalars['String'] | null;
  /** The expiration date of the announcement, if any */
  announcementExpiresAt: Scalars['DateTime'] | null;
  /** Whether the announcement can be dismissed by the user */
  announcementUserDismissible: Scalars['Boolean'] | null;
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars['Boolean'];
  /** Identifies the date and time when the organization was archived. */
  archivedAt: Scalars['DateTime'] | null;
  /** Audit log entries of the organization */
  auditLog: OrganizationAuditEntryConnection;
  /** A URL pointing to the organization's public avatar. */
  avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The organization's public profile description. */
  description: Scalars['String'] | null;
  /** The organization's public profile description rendered to HTML. */
  descriptionHTML: Scalars['String'] | null;
  /** A list of domains owned by the organization. */
  domains: VerifiableDomainConnection | null;
  /** The organization's public email. */
  email: Scalars['String'] | null;
  /** A list of owners of the organization's enterprise account. */
  enterpriseOwners: OrganizationEnterpriseOwnerConnection;
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars['Boolean'];
  id: Scalars['ID'];
  /** The interaction ability settings for this organization. */
  interactionAbility: RepositoryInteractionAbility | null;
  /** The setting value for whether the organization has an IP allow list enabled. */
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the organization. */
  ipAllowListEntries: IpAllowListEntryConnection;
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars['Boolean'];
  /** Whether the organization has verified its profile email and website. */
  isVerified: Scalars['Boolean'];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase;
  /** The organization's public profile location. */
  location: Scalars['String'] | null;
  /** The organization's login name. */
  login: Scalars['String'];
  /** A list of all mannequins for this organization. */
  mannequins: MannequinConnection;
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection;
  /** Members can fork private repositories in this organization */
  membersCanForkPrivateRepositories: Scalars['Boolean'];
  /** A list of users who are members of this organization. */
  membersWithRole: OrganizationMemberConnection;
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The organization's public profile name. */
  name: Scalars['String'] | null;
  /** The HTTP path creating a new team */
  newTeamResourcePath: Scalars['URI'];
  /** The HTTP URL creating a new team */
  newTeamUrl: Scalars['URI'];
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;
  /** The billing email for the organization. */
  organizationBillingEmail: Scalars['String'] | null;
  /** A list of packages under the owner. */
  packages: PackageConnection;
  /** A list of users who have been invited to join this organization. */
  pendingMembers: UserConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  project: Project | null;
  /** Find a project by number. */
  projectV2: ProjectV2 | null;
  /** A list of projects under the owner. */
  projects: ProjectConnection;
  /** The HTTP path listing organization's projects */
  projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing organization's projects */
  projectsUrl: Scalars['URI'];
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection;
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection;
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection;
  /** Find Repository. */
  repository: Repository | null;
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection;
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection;
  /** A list of all repository migrations for this organization. */
  repositoryMigrations: RepositoryMigrationConnection;
  /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */
  requiresTwoFactorAuthentication: Scalars['Boolean'] | null;
  /** The HTTP path for this organization. */
  resourcePath: Scalars['URI'];
  /** Returns a single ruleset from the current organization by ID. */
  ruleset: RepositoryRuleset | null;
  /** A list of rulesets for this organization. */
  rulesets: RepositoryRulesetConnection | null;
  /** The Organization's SAML identity provider. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. */
  samlIdentityProvider: OrganizationIdentityProvider | null;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing: SponsorsListing | null;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor: Sponsorship | null;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable: Sponsorship | null;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection;
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer: SponsorshipConnection;
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor: SponsorshipConnection;
  /** Find an organization's team by its slug. */
  team: Team | null;
  /** A list of teams in this organization. */
  teams: TeamConnection;
  /** The HTTP path listing organization's teams */
  teamsResourcePath: Scalars['URI'];
  /** The HTTP URL listing organization's teams */
  teamsUrl: Scalars['URI'];
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents: Scalars['Int'] | null;
  /** The organization's Twitter username. */
  twitterUsername: Scalars['String'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this organization. */
  url: Scalars['URI'];
  /** Organization is adminable by the viewer. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Viewer can create repositories on this organization */
  viewerCanCreateRepositories: Scalars['Boolean'];
  /** Viewer can create teams on this organization. */
  viewerCanCreateTeams: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars['Boolean'];
  /** Viewer is an active member of this organization. */
  viewerIsAMember: Scalars['Boolean'];
  /** Whether or not this Organization is followed by the viewer. */
  viewerIsFollowing: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars['Boolean'];
  /** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
  webCommitSignoffRequired: Scalars['Boolean'];
  /** The organization's public profile URL. */
  websiteUrl: Scalars['URI'] | null;
  __typename: 'Organization';
}

/** An audit entry in an organization audit log. */
export type OrganizationAuditEntry = (
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
) & { __isUnion?: true };

/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnection {
  /** A list of edges. */
  edges: (OrganizationAuditEntryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (OrganizationAuditEntry | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'OrganizationAuditEntryConnection';
}

/** Metadata for an audit entry with action org.* */
export type OrganizationAuditEntryData = (
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgRestoreMemberMembershipOrganizationAuditEntryData
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
) & { __isUnion?: true };

/** An edge in a connection. */
export interface OrganizationAuditEntryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OrganizationAuditEntry | null;
  __typename: 'OrganizationAuditEntryEdge';
}

/** A list of organizations managed by an enterprise. */
export interface OrganizationConnection {
  /** A list of edges. */
  edges: (OrganizationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Organization | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'OrganizationConnection';
}

/** An edge in a connection. */
export interface OrganizationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Organization | null;
  __typename: 'OrganizationEdge';
}

/** The connection type for User. */
export interface OrganizationEnterpriseOwnerConnection {
  /** A list of edges. */
  edges: (OrganizationEnterpriseOwnerEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'OrganizationEnterpriseOwnerConnection';
}

/** An enterprise owner in the context of an organization that is part of the enterprise. */
export interface OrganizationEnterpriseOwnerEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User | null;
  /** The role of the owner with respect to the organization. */
  organizationRole: RoleInOrganization;
  __typename: 'OrganizationEnterpriseOwnerEdge';
}

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. */
export interface OrganizationIdentityProvider {
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod: Scalars['URI'] | null;
  /** External Identities provisioned by this Identity Provider */
  externalIdentities: ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate: Scalars['X509Certificate'] | null;
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer: Scalars['String'] | null;
  /** Organization this Identity Provider belongs to */
  organization: Organization | null;
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod: Scalars['URI'] | null;
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl: Scalars['URI'] | null;
  __typename: 'OrganizationIdentityProvider';
}

/** An Invitation for a user to an organization. */
export interface OrganizationInvitation {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The email address of the user invited to the organization. */
  email: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The source of the invitation. */
  invitationSource: OrganizationInvitationSource;
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType: OrganizationInvitationType;
  /** The user who was invited to the organization. */
  invitee: User | null;
  /** The user who created the invitation. */
  inviter: User;
  /** The organization the invite is for */
  organization: Organization;
  /** The user's pending role in the organization (e.g. member, owner). */
  role: OrganizationInvitationRole;
  __typename: 'OrganizationInvitation';
}

/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnection {
  /** A list of edges. */
  edges: (OrganizationInvitationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (OrganizationInvitation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'OrganizationInvitationConnection';
}

/** An edge in a connection. */
export interface OrganizationInvitationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OrganizationInvitation | null;
  __typename: 'OrganizationInvitationEdge';
}

/** The possible organization invitation roles. */
export type OrganizationInvitationRole =
  | 'DIRECT_MEMBER'
  | 'ADMIN'
  | 'BILLING_MANAGER'
  | 'REINSTATE';

/** The possible organization invitation sources. */
export type OrganizationInvitationSource = 'UNKNOWN' | 'MEMBER' | 'SCIM';

/** The possible organization invitation types. */
export type OrganizationInvitationType = 'USER' | 'EMAIL';

/** The connection type for User. */
export interface OrganizationMemberConnection {
  /** A list of edges. */
  edges: (OrganizationMemberEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'OrganizationMemberConnection';
}

/** Represents a user within an organization. */
export interface OrganizationMemberEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled: Scalars['Boolean'] | null;
  /** The item at the end of the edge. */
  node: User | null;
  /** The role this user has in the organization. */
  role: OrganizationMemberRole | null;
  __typename: 'OrganizationMemberEdge';
}

/** The possible roles within an organization for its members. */
export type OrganizationMemberRole = 'MEMBER' | 'ADMIN';

/** The possible values for the members can create repositories setting on an organization. */
export type OrganizationMembersCanCreateRepositoriesSettingValue =
  | 'ALL'
  | 'PRIVATE'
  | 'INTERNAL'
  | 'DISABLED';

/** A GitHub Enterprise Importer (GEI) organization migration. */
export interface OrganizationMigration {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['String'] | null;
  /** The reason the organization migration failed. */
  failureReason: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The remaining amount of repos to be migrated. */
  remainingRepositoriesCount: Scalars['Int'] | null;
  /** The name of the source organization to be migrated. */
  sourceOrgName: Scalars['String'];
  /** The URL of the source organization to migrate. */
  sourceOrgUrl: Scalars['URI'];
  /** The migration state. */
  state: OrganizationMigrationState;
  /** The name of the target organization. */
  targetOrgName: Scalars['String'];
  /** The total amount of repositories to be migrated. */
  totalRepositoriesCount: Scalars['Int'] | null;
  __typename: 'OrganizationMigration';
}

/** The Octoshift Organization migration state. */
export type OrganizationMigrationState =
  | 'NOT_STARTED'
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'PRE_REPO_MIGRATION'
  | 'REPO_MIGRATION'
  | 'POST_REPO_MIGRATION'
  | 'SUCCEEDED'
  | 'FAILED'
  | 'PENDING_VALIDATION'
  | 'FAILED_VALIDATION';

/** Used for argument of CreateProjectV2 mutation. */
export type OrganizationOrUser = (Organization | User) & { __isUnion?: true };

/** Properties by which organization connections can be ordered. */
export type OrganizationOrderField = 'CREATED_AT' | 'LOGIN';

/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContext {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams: TeamConnection;
  /** The path for the full team list for this user */
  teamsResourcePath: Scalars['URI'];
  /** The URL for the full team list for this user */
  teamsUrl: Scalars['URI'];
  /** The total number of teams the user is on in the organization */
  totalTeamCount: Scalars['Int'];
  __typename: 'OrganizationTeamsHovercardContext';
}

/** An organization list hovercard context */
export interface OrganizationsHovercardContext {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations: OrganizationConnection;
  /** The total number of organizations this user is in */
  totalOrganizationCount: Scalars['Int'];
  __typename: 'OrganizationsHovercardContext';
}

/** Information for an uploaded package. */
export interface Package {
  id: Scalars['ID'];
  /** Find the latest version for the package. */
  latestVersion: PackageVersion | null;
  /** Identifies the name of the package. */
  name: Scalars['String'];
  /** Identifies the type of the package. */
  packageType: PackageType;
  /** The repository this package belongs to. */
  repository: Repository | null;
  /** Statistics about package activity. */
  statistics: PackageStatistics | null;
  /** Find package version by version string. */
  version: PackageVersion | null;
  /** list of versions for this package */
  versions: PackageVersionConnection;
  __typename: 'Package';
}

/** The connection type for Package. */
export interface PackageConnection {
  /** A list of edges. */
  edges: (PackageEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Package | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PackageConnection';
}

/** An edge in a connection. */
export interface PackageEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Package | null;
  __typename: 'PackageEdge';
}

/** A file in a package version. */
export interface PackageFile {
  id: Scalars['ID'];
  /** MD5 hash of the file. */
  md5: Scalars['String'] | null;
  /** Name of the file. */
  name: Scalars['String'];
  /** The package version this file belongs to. */
  packageVersion: PackageVersion | null;
  /** SHA1 hash of the file. */
  sha1: Scalars['String'] | null;
  /** SHA256 hash of the file. */
  sha256: Scalars['String'] | null;
  /** Size of the file in bytes. */
  size: Scalars['Int'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** URL to download the asset. */
  url: Scalars['URI'] | null;
  __typename: 'PackageFile';
}

/** The connection type for PackageFile. */
export interface PackageFileConnection {
  /** A list of edges. */
  edges: (PackageFileEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PackageFile | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PackageFileConnection';
}

/** An edge in a connection. */
export interface PackageFileEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PackageFile | null;
  __typename: 'PackageFileEdge';
}

/** Properties by which package file connections can be ordered. */
export type PackageFileOrderField = 'CREATED_AT';

/** Properties by which package connections can be ordered. */
export type PackageOrderField = 'CREATED_AT';

/** Represents an owner of a package. */
export type PackageOwner = (Organization | Repository | User) & { __isUnion?: true };

/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatistics {
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars['Int'];
  __typename: 'PackageStatistics';
}

/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTag {
  id: Scalars['ID'];
  /** Identifies the tag name of the version. */
  name: Scalars['String'];
  /** Version that the tag is associated with. */
  version: PackageVersion | null;
  __typename: 'PackageTag';
}

/** The possible types of a package. */
export type PackageType = 'NPM' | 'RUBYGEMS' | 'MAVEN' | 'DOCKER' | 'DEBIAN' | 'NUGET' | 'PYPI';

/** Information about a specific package version. */
export interface PackageVersion {
  /** List of files associated with this package version */
  files: PackageFileConnection;
  id: Scalars['ID'];
  /** The package associated with this version. */
  package: Package | null;
  /** The platform this version was built for. */
  platform: Scalars['String'] | null;
  /** Whether or not this version is a pre-release. */
  preRelease: Scalars['Boolean'];
  /** The README of this package version. */
  readme: Scalars['String'] | null;
  /** The release associated with this package version. */
  release: Release | null;
  /** Statistics about package activity. */
  statistics: PackageVersionStatistics | null;
  /** The package version summary. */
  summary: Scalars['String'] | null;
  /** The version string. */
  version: Scalars['String'];
  __typename: 'PackageVersion';
}

/** The connection type for PackageVersion. */
export interface PackageVersionConnection {
  /** A list of edges. */
  edges: (PackageVersionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PackageVersion | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PackageVersionConnection';
}

/** An edge in a connection. */
export interface PackageVersionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PackageVersion | null;
  __typename: 'PackageVersionEdge';
}

/** Properties by which package version connections can be ordered. */
export type PackageVersionOrderField = 'CREATED_AT';

/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatistics {
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars['Int'];
  __typename: 'PackageVersionStatistics';
}

/** Information about pagination in a connection. */
export interface PageInfo {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Scalars['String'] | null;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Scalars['String'] | null;
  __typename: 'PageInfo';
}

/** The possible types of patch statuses. */
export type PatchStatus = 'ADDED' | 'DELETED' | 'RENAMED' | 'COPIED' | 'MODIFIED' | 'CHANGED';

/** Types that can grant permissions on a repository to a user */
export type PermissionGranter = (Organization | Repository | Team) & { __isUnion?: true };

/** A level of permission and source for a user's access to a repository. */
export interface PermissionSource {
  /** The organization the repository belongs to. */
  organization: Organization;
  /** The level of access this source has granted to the user. */
  permission: DefaultRepositoryPermissionField;
  /** The name of the role this source has granted to the user. */
  roleName: Scalars['String'] | null;
  /** The source of this permission. */
  source: PermissionGranter;
  __typename: 'PermissionSource';
}

/** Autogenerated return type of PinIssue */
export interface PinIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was pinned */
  issue: Issue | null;
  __typename: 'PinIssuePayload';
}

/** Types that can be pinned to a profile page. */
export type PinnableItem = (Gist | Repository) & { __isUnion?: true };

/** The connection type for PinnableItem. */
export interface PinnableItemConnection {
  /** A list of edges. */
  edges: (PinnableItemEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PinnableItem | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PinnableItemConnection';
}

/** An edge in a connection. */
export interface PinnableItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PinnableItem | null;
  __typename: 'PinnableItemEdge';
}

/** Represents items that can be pinned to a profile page or dashboard. */
export type PinnableItemType =
  | 'REPOSITORY'
  | 'GIST'
  | 'ISSUE'
  | 'PROJECT'
  | 'PULL_REQUEST'
  | 'USER'
  | 'ORGANIZATION'
  | 'TEAM';

/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export interface PinnedDiscussion {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The discussion that was pinned. */
  discussion: Discussion;
  /** Color stops of the chosen gradient */
  gradientStopColors: Scalars['String'][];
  id: Scalars['ID'];
  /** Background texture pattern */
  pattern: PinnedDiscussionPattern;
  /** The actor that pinned this discussion. */
  pinnedBy: Actor;
  /** Preconfigured background gradient option */
  preconfiguredGradient: PinnedDiscussionGradient | null;
  /** The repository associated with this node. */
  repository: Repository;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'PinnedDiscussion';
}

/** The connection type for PinnedDiscussion. */
export interface PinnedDiscussionConnection {
  /** A list of edges. */
  edges: (PinnedDiscussionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PinnedDiscussion | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PinnedDiscussionConnection';
}

/** An edge in a connection. */
export interface PinnedDiscussionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PinnedDiscussion | null;
  __typename: 'PinnedDiscussionEdge';
}

/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export type PinnedDiscussionGradient =
  | 'RED_ORANGE'
  | 'BLUE_MINT'
  | 'BLUE_PURPLE'
  | 'PINK_BLUE'
  | 'PURPLE_CORAL';

/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export type PinnedDiscussionPattern =
  | 'DOT_FILL'
  | 'PLUS'
  | 'ZAP'
  | 'CHEVRON_UP'
  | 'DOT'
  | 'HEART_FILL';

/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Issue;
  __typename: 'PinnedEvent';
}

/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssue {
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId: Scalars['BigInt'] | null;
  id: Scalars['ID'];
  /** The issue that was pinned. */
  issue: Issue;
  /** The actor that pinned this issue. */
  pinnedBy: Actor;
  /** The repository that this issue was pinned to. */
  repository: Repository;
  __typename: 'PinnedIssue';
}

/** The connection type for PinnedIssue. */
export interface PinnedIssueConnection {
  /** A list of edges. */
  edges: (PinnedIssueEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PinnedIssue | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PinnedIssueConnection';
}

/** An edge in a connection. */
export interface PinnedIssueEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PinnedIssue | null;
  __typename: 'PinnedIssueEdge';
}

/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'PrivateRepositoryForkingDisableAuditEntry';
}

/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'PrivateRepositoryForkingEnableAuditEntry';
}

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export interface ProfileItemShowcase {
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems: Scalars['Boolean'];
  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */
  items: PinnableItemConnection;
  __typename: 'ProfileItemShowcase';
}

/** Represents any entity on GitHub that has a profile page. */
export type ProfileOwner = (Organization | User) & { __isUnion?: true };

/** Projects manage issues, pull requests and notes within a project owner. */
export interface Project {
  /** The project's description body. */
  body: Scalars['String'] | null;
  /** The projects description body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** List of columns in the project */
  columns: ProjectColumnConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who originally created the project. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The project's name. */
  name: Scalars['String'];
  /** The project's number. */
  number: Scalars['Int'];
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  owner: ProjectOwner;
  /** List of pending cards in this project */
  pendingCards: ProjectCardConnection;
  /** Project progress details. */
  progress: ProjectProgress;
  /** The HTTP path for this project */
  resourcePath: Scalars['URI'];
  /** Whether the project is open or closed. */
  state: ProjectState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project */
  url: Scalars['URI'];
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  __typename: 'Project';
}

/** A card in a project. */
export interface ProjectCard {
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   *
   */
  column: ProjectColumn | null;
  /** The card content item */
  content: ProjectCardItem | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created this card */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** Whether the card is archived */
  isArchived: Scalars['Boolean'];
  /** The card note */
  note: Scalars['String'] | null;
  /** The project that contains this card. */
  project: Project;
  /** The HTTP path for this card */
  resourcePath: Scalars['URI'];
  /** The state of ProjectCard */
  state: ProjectCardState | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this card */
  url: Scalars['URI'];
  __typename: 'ProjectCard';
}

/** The possible archived states of a project card. */
export type ProjectCardArchivedState = 'ARCHIVED' | 'NOT_ARCHIVED';

/** The connection type for ProjectCard. */
export interface ProjectCardConnection {
  /** A list of edges. */
  edges: (ProjectCardEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectCard | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectCardConnection';
}

/** An edge in a connection. */
export interface ProjectCardEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectCard | null;
  __typename: 'ProjectCardEdge';
}

/** Types that can be inside Project Cards. */
export type ProjectCardItem = (Issue | PullRequest) & { __isUnion?: true };

/** Various content states of a ProjectCard */
export type ProjectCardState = 'CONTENT_ONLY' | 'NOTE_ONLY' | 'REDACTED';

/** A column inside a project. */
export interface ProjectColumn {
  /** List of cards in the column */
  cards: ProjectCardConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The project column's name. */
  name: Scalars['String'];
  /** The project that contains this column. */
  project: Project;
  /** The semantic purpose of the column */
  purpose: ProjectColumnPurpose | null;
  /** The HTTP path for this project column */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project column */
  url: Scalars['URI'];
  __typename: 'ProjectColumn';
}

/** The connection type for ProjectColumn. */
export interface ProjectColumnConnection {
  /** A list of edges. */
  edges: (ProjectColumnEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectColumn | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectColumnConnection';
}

/** An edge in a connection. */
export interface ProjectColumnEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectColumn | null;
  __typename: 'ProjectColumnEdge';
}

/** The semantic purpose of the column - todo, in progress, or done. */
export type ProjectColumnPurpose = 'TODO' | 'IN_PROGRESS' | 'DONE';

/** A list of projects associated with the owner. */
export interface ProjectConnection {
  /** A list of edges. */
  edges: (ProjectEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Project | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectConnection';
}

/** An edge in a connection. */
export interface ProjectEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Project | null;
  __typename: 'ProjectEdge';
}

/** Properties by which project connections can be ordered. */
export type ProjectOrderField = 'CREATED_AT' | 'UPDATED_AT' | 'NAME';

/** Represents an owner of a Project. */
export type ProjectOwner = (Organization | Repository | User) & { __isUnion?: true };

/** Project progress stats. */
export interface ProjectProgress {
  /** The number of done cards. */
  doneCount: Scalars['Int'];
  /** The percentage of done cards. */
  donePercentage: Scalars['Float'];
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled: Scalars['Boolean'];
  /** The number of in-progress cards. */
  inProgressCount: Scalars['Int'];
  /** The percentage of in-progress cards. */
  inProgressPercentage: Scalars['Float'];
  /** The number of to do cards. */
  todoCount: Scalars['Int'];
  /** The percentage of to do cards. */
  todoPercentage: Scalars['Float'];
  __typename: 'ProjectProgress';
}

/** State of the project; either 'open' or 'closed' */
export type ProjectState = 'OPEN' | 'CLOSED';

/** GitHub-provided templates for Projects */
export type ProjectTemplate =
  | 'BASIC_KANBAN'
  | 'AUTOMATED_KANBAN_V2'
  | 'AUTOMATED_REVIEWS_KANBAN'
  | 'BUG_TRIAGE';

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export interface ProjectV2 {
  /** Returns true if the project is closed. */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who originally created the project. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** A field of the project */
  field: ProjectV2FieldConfiguration | null;
  /** List of fields and their constraints in the project */
  fields: ProjectV2FieldConfigurationConnection;
  id: Scalars['ID'];
  /** List of items in the project */
  items: ProjectV2ItemConnection;
  /** The project's number. */
  number: Scalars['Int'];
  /** The project's owner. Currently limited to organizations and users. */
  owner: ProjectV2Owner;
  /** Returns true if the project is public. */
  public: Scalars['Boolean'];
  /** The project's readme. */
  readme: Scalars['String'] | null;
  /** The repositories the project is linked to. */
  repositories: RepositoryConnection;
  /** The HTTP path for this project */
  resourcePath: Scalars['URI'];
  /** The project's short description. */
  shortDescription: Scalars['String'] | null;
  /** The teams the project is linked to. */
  teams: TeamConnection;
  /** Returns true if this project is a template. */
  template: Scalars['Boolean'];
  /** The project's name. */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project */
  url: Scalars['URI'];
  /** A view of the project */
  view: ProjectV2View | null;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** List of views in the project */
  views: ProjectV2ViewConnection;
  /** A workflow of the project */
  workflow: ProjectV2Workflow | null;
  /** List of the workflows in the project */
  workflows: ProjectV2WorkflowConnection;
  __typename: 'ProjectV2';
}

/** Possible collaborators for a project. */
export type ProjectV2Actor = (Team | User) & { __isUnion?: true };

/** The connection type for ProjectV2Actor. */
export interface ProjectV2ActorConnection {
  /** A list of edges. */
  edges: (ProjectV2ActorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2Actor | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2ActorConnection';
}

/** An edge in a connection. */
export interface ProjectV2ActorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2Actor | null;
  __typename: 'ProjectV2ActorEdge';
}

/** The connection type for ProjectV2. */
export interface ProjectV2Connection {
  /** A list of edges. */
  edges: (ProjectV2Edge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2 | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2Connection';
}

/** The type of a project field. */
export type ProjectV2CustomFieldType = 'TEXT' | 'SINGLE_SELECT' | 'NUMBER' | 'DATE';

/** An edge in a connection. */
export interface ProjectV2Edge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2 | null;
  __typename: 'ProjectV2Edge';
}

/** A field inside a project. */
export interface ProjectV2Field {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The field's type. */
  dataType: ProjectV2FieldType;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The project field's name. */
  name: Scalars['String'];
  /** The project that contains this field. */
  project: ProjectV2;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2Field';
}

/** Common fields across different project field types */
export type ProjectV2FieldCommon = (
  | ProjectV2Field
  | ProjectV2IterationField
  | ProjectV2SingleSelectField
) & { __isUnion?: true };

/** Configurations for project fields. */
export type ProjectV2FieldConfiguration = (
  | ProjectV2Field
  | ProjectV2IterationField
  | ProjectV2SingleSelectField
) & { __isUnion?: true };

/** The connection type for ProjectV2FieldConfiguration. */
export interface ProjectV2FieldConfigurationConnection {
  /** A list of edges. */
  edges: (ProjectV2FieldConfigurationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2FieldConfiguration | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2FieldConfigurationConnection';
}

/** An edge in a connection. */
export interface ProjectV2FieldConfigurationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2FieldConfiguration | null;
  __typename: 'ProjectV2FieldConfigurationEdge';
}

/** The connection type for ProjectV2Field. */
export interface ProjectV2FieldConnection {
  /** A list of edges. */
  edges: (ProjectV2FieldEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2Field | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2FieldConnection';
}

/** An edge in a connection. */
export interface ProjectV2FieldEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2Field | null;
  __typename: 'ProjectV2FieldEdge';
}

/** Properties by which project v2 field connections can be ordered. */
export type ProjectV2FieldOrderField = 'POSITION' | 'CREATED_AT' | 'NAME';

/** The type of a project field. */
export type ProjectV2FieldType =
  | 'ASSIGNEES'
  | 'LINKED_PULL_REQUESTS'
  | 'REVIEWERS'
  | 'LABELS'
  | 'MILESTONE'
  | 'REPOSITORY'
  | 'TITLE'
  | 'TEXT'
  | 'SINGLE_SELECT'
  | 'NUMBER'
  | 'DATE'
  | 'ITERATION'
  | 'TRACKS'
  | 'TRACKED_BY';

/** An item within a Project. */
export interface ProjectV2Item {
  /** The content of the referenced draft issue, issue, or pull request */
  content: ProjectV2ItemContent | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The field value of the first project field which matches the 'name' argument that is set on the item. */
  fieldValueByName: ProjectV2ItemFieldValue | null;
  /** The field values that are set on the item. */
  fieldValues: ProjectV2ItemFieldValueConnection;
  id: Scalars['ID'];
  /** Whether the item is archived. */
  isArchived: Scalars['Boolean'];
  /** The project that contains this item. */
  project: ProjectV2;
  /** The type of the item. */
  type: ProjectV2ItemType;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2Item';
}

/** The connection type for ProjectV2Item. */
export interface ProjectV2ItemConnection {
  /** A list of edges. */
  edges: (ProjectV2ItemEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2Item | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2ItemConnection';
}

/** Types that can be inside Project Items. */
export type ProjectV2ItemContent = (DraftIssue | Issue | PullRequest) & { __isUnion?: true };

/** An edge in a connection. */
export interface ProjectV2ItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2Item | null;
  __typename: 'ProjectV2ItemEdge';
}

/** The value of a date field in a Project item. */
export interface ProjectV2ItemFieldDateValue {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** Date value for the field */
  date: Scalars['Date'] | null;
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration;
  id: Scalars['ID'];
  /** The project item that contains this value. */
  item: ProjectV2Item;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2ItemFieldDateValue';
}

/** The value of an iteration field in a Project item. */
export interface ProjectV2ItemFieldIterationValue {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The duration of the iteration in days. */
  duration: Scalars['Int'];
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration;
  id: Scalars['ID'];
  /** The project item that contains this value. */
  item: ProjectV2Item;
  /** The ID of the iteration. */
  iterationId: Scalars['String'];
  /** The start date of the iteration. */
  startDate: Scalars['Date'];
  /** The title of the iteration. */
  title: Scalars['String'];
  /** The title of the iteration, with HTML. */
  titleHTML: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2ItemFieldIterationValue';
}

/** The value of the labels field in a Project item. */
export interface ProjectV2ItemFieldLabelValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** Labels value of a field */
  labels: LabelConnection | null;
  __typename: 'ProjectV2ItemFieldLabelValue';
}

/** The value of a milestone field in a Project item. */
export interface ProjectV2ItemFieldMilestoneValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** Milestone value of a field */
  milestone: Milestone | null;
  __typename: 'ProjectV2ItemFieldMilestoneValue';
}

/** The value of a number field in a Project item. */
export interface ProjectV2ItemFieldNumberValue {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration;
  id: Scalars['ID'];
  /** The project item that contains this value. */
  item: ProjectV2Item;
  /** Number as a float(8) */
  number: Scalars['Float'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2ItemFieldNumberValue';
}

/** The value of a pull request field in a Project item. */
export interface ProjectV2ItemFieldPullRequestValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** The pull requests for this field */
  pullRequests: PullRequestConnection | null;
  __typename: 'ProjectV2ItemFieldPullRequestValue';
}

/** The value of a repository field in a Project item. */
export interface ProjectV2ItemFieldRepositoryValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** The repository for this field. */
  repository: Repository | null;
  __typename: 'ProjectV2ItemFieldRepositoryValue';
}

/** The value of a reviewers field in a Project item. */
export interface ProjectV2ItemFieldReviewerValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** The reviewers for this field. */
  reviewers: RequestedReviewerConnection | null;
  __typename: 'ProjectV2ItemFieldReviewerValue';
}

/** The value of a single select field in a Project item. */
export interface ProjectV2ItemFieldSingleSelectValue {
  /** The color applied to the selected single-select option. */
  color: ProjectV2SingleSelectFieldOptionColor;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** A plain-text description of the selected single-select option, such as what the option means. */
  description: Scalars['String'] | null;
  /** The description of the selected single-select option, including HTML tags. */
  descriptionHTML: Scalars['String'] | null;
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration;
  id: Scalars['ID'];
  /** The project item that contains this value. */
  item: ProjectV2Item;
  /** The name of the selected single select option. */
  name: Scalars['String'] | null;
  /** The html name of the selected single select option. */
  nameHTML: Scalars['String'] | null;
  /** The id of the selected single select option. */
  optionId: Scalars['String'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2ItemFieldSingleSelectValue';
}

/** The value of a text field in a Project item. */
export interface ProjectV2ItemFieldTextValue {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  creator: Actor | null;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The project field that contains this value. */
  field: ProjectV2FieldConfiguration;
  id: Scalars['ID'];
  /** The project item that contains this value. */
  item: ProjectV2Item;
  /** Text value of a field */
  text: Scalars['String'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2ItemFieldTextValue';
}

/** The value of a user field in a Project item. */
export interface ProjectV2ItemFieldUserValue {
  /** The field that contains this value. */
  field: ProjectV2FieldConfiguration;
  /** The users for this field */
  users: UserConnection | null;
  __typename: 'ProjectV2ItemFieldUserValue';
}

/** Project field values */
export type ProjectV2ItemFieldValue = (
  | ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue
) & { __isUnion?: true };

/** Common fields across different project field value types */
export type ProjectV2ItemFieldValueCommon = (
  | ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
) & { __isUnion?: true };

/** The connection type for ProjectV2ItemFieldValue. */
export interface ProjectV2ItemFieldValueConnection {
  /** A list of edges. */
  edges: (ProjectV2ItemFieldValueEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2ItemFieldValue | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2ItemFieldValueConnection';
}

/** An edge in a connection. */
export interface ProjectV2ItemFieldValueEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2ItemFieldValue | null;
  __typename: 'ProjectV2ItemFieldValueEdge';
}

/** Properties by which project v2 item field value connections can be ordered. */
export type ProjectV2ItemFieldValueOrderField = 'POSITION';

/** Properties by which project v2 item connections can be ordered. */
export type ProjectV2ItemOrderField = 'POSITION';

/** The type of a project item. */
export type ProjectV2ItemType = 'ISSUE' | 'PULL_REQUEST' | 'DRAFT_ISSUE' | 'REDACTED';

/** An iteration field inside a project. */
export interface ProjectV2IterationField {
  /** Iteration configuration settings */
  configuration: ProjectV2IterationFieldConfiguration;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The field's type. */
  dataType: ProjectV2FieldType;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The project field's name. */
  name: Scalars['String'];
  /** The project that contains this field. */
  project: ProjectV2;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2IterationField';
}

/** Iteration field configuration for a project. */
export interface ProjectV2IterationFieldConfiguration {
  /** The iteration's completed iterations */
  completedIterations: ProjectV2IterationFieldIteration[];
  /** The iteration's duration in days */
  duration: Scalars['Int'];
  /** The iteration's iterations */
  iterations: ProjectV2IterationFieldIteration[];
  /** The iteration's start day of the week */
  startDay: Scalars['Int'];
  __typename: 'ProjectV2IterationFieldConfiguration';
}

/** Iteration field iteration settings for a project. */
export interface ProjectV2IterationFieldIteration {
  /** The iteration's duration in days */
  duration: Scalars['Int'];
  /** The iteration's ID. */
  id: Scalars['String'];
  /** The iteration's start date */
  startDate: Scalars['Date'];
  /** The iteration's title. */
  title: Scalars['String'];
  /** The iteration's html title. */
  titleHTML: Scalars['String'];
  __typename: 'ProjectV2IterationFieldIteration';
}

/** Properties by which projects can be ordered. */
export type ProjectV2OrderField = 'TITLE' | 'NUMBER' | 'UPDATED_AT' | 'CREATED_AT';

/** Represents an owner of a project (beta). */
export type ProjectV2Owner = (Issue | Organization | PullRequest | User) & { __isUnion?: true };

/** Recent projects for the owner. */
export type ProjectV2Recent = (Organization | Repository | User) & { __isUnion?: true };

/** The possible roles of a collaborator on a project. */
export type ProjectV2Roles = 'NONE' | 'READER' | 'WRITER' | 'ADMIN';

/** A single select field inside a project. */
export interface ProjectV2SingleSelectField {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The field's type. */
  dataType: ProjectV2FieldType;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The project field's name. */
  name: Scalars['String'];
  /** Options for the single select field */
  options: ProjectV2SingleSelectFieldOption[];
  /** The project that contains this field. */
  project: ProjectV2;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2SingleSelectField';
}

/** Single select field option for a configuration for a project. */
export interface ProjectV2SingleSelectFieldOption {
  /** The option's display color. */
  color: ProjectV2SingleSelectFieldOptionColor;
  /** The option's plain-text description. */
  description: Scalars['String'];
  /** The option's description, possibly containing HTML. */
  descriptionHTML: Scalars['String'];
  /** The option's ID. */
  id: Scalars['String'];
  /** The option's name. */
  name: Scalars['String'];
  /** The option's html name. */
  nameHTML: Scalars['String'];
  __typename: 'ProjectV2SingleSelectFieldOption';
}

/** The display color of a single-select field option. */
export type ProjectV2SingleSelectFieldOptionColor =
  | 'GRAY'
  | 'BLUE'
  | 'GREEN'
  | 'YELLOW'
  | 'ORANGE'
  | 'RED'
  | 'PINK'
  | 'PURPLE';

/** Represents a sort by field and direction. */
export interface ProjectV2SortBy {
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: OrderDirection;
  /** The field by which items are sorted. */
  field: ProjectV2Field;
  __typename: 'ProjectV2SortBy';
}

/** The connection type for ProjectV2SortBy. */
export interface ProjectV2SortByConnection {
  /** A list of edges. */
  edges: (ProjectV2SortByEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2SortBy | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2SortByConnection';
}

/** An edge in a connection. */
export interface ProjectV2SortByEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2SortBy | null;
  __typename: 'ProjectV2SortByEdge';
}

/** Represents a sort by field and direction. */
export interface ProjectV2SortByField {
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: OrderDirection;
  /** The field by which items are sorted. */
  field: ProjectV2FieldConfiguration;
  __typename: 'ProjectV2SortByField';
}

/** The connection type for ProjectV2SortByField. */
export interface ProjectV2SortByFieldConnection {
  /** A list of edges. */
  edges: (ProjectV2SortByFieldEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2SortByField | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2SortByFieldConnection';
}

/** An edge in a connection. */
export interface ProjectV2SortByFieldEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2SortByField | null;
  __typename: 'ProjectV2SortByFieldEdge';
}

/** The possible states of a project v2. */
export type ProjectV2State = 'OPEN' | 'CLOSED';

/** A view within a ProjectV2. */
export interface ProjectV2View {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The view's visible fields. */
  fields: ProjectV2FieldConfigurationConnection | null;
  /** The project view's filter. */
  filter: Scalars['String'] | null;
  /**
   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's group-by field.
   */
  groupBy: ProjectV2FieldConnection | null;
  /** The view's group-by field. */
  groupByFields: ProjectV2FieldConfigurationConnection | null;
  id: Scalars['ID'];
  /** The project view's layout. */
  layout: ProjectV2ViewLayout;
  /** The project view's name. */
  name: Scalars['String'];
  /** The project view's number. */
  number: Scalars['Int'];
  /** The project that contains this view. */
  project: ProjectV2;
  /**
   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's sort-by config.
   */
  sortBy: ProjectV2SortByConnection | null;
  /** The view's sort-by config. */
  sortByFields: ProjectV2SortByFieldConnection | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /**
   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's vertical-group-by field.
   */
  verticalGroupBy: ProjectV2FieldConnection | null;
  /** The view's vertical-group-by field. */
  verticalGroupByFields: ProjectV2FieldConfigurationConnection | null;
  /**
   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.
   * The view's visible fields.
   */
  visibleFields: ProjectV2FieldConnection | null;
  __typename: 'ProjectV2View';
}

/** The connection type for ProjectV2View. */
export interface ProjectV2ViewConnection {
  /** A list of edges. */
  edges: (ProjectV2ViewEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2View | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2ViewConnection';
}

/** An edge in a connection. */
export interface ProjectV2ViewEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2View | null;
  __typename: 'ProjectV2ViewEdge';
}

/** The layout of a project v2 view. */
export type ProjectV2ViewLayout = 'BOARD_LAYOUT' | 'TABLE_LAYOUT' | 'ROADMAP_LAYOUT';

/** Properties by which project v2 view connections can be ordered. */
export type ProjectV2ViewOrderField = 'POSITION' | 'CREATED_AT' | 'NAME';

/** A workflow inside a project. */
export interface ProjectV2Workflow {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The workflows' enabled state. */
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  /** The workflows' name. */
  name: Scalars['String'];
  /** The workflows' number. */
  number: Scalars['Int'];
  /** The project that contains this workflow. */
  project: ProjectV2;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'ProjectV2Workflow';
}

/** The connection type for ProjectV2Workflow. */
export interface ProjectV2WorkflowConnection {
  /** A list of edges. */
  edges: (ProjectV2WorkflowEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ProjectV2Workflow | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ProjectV2WorkflowConnection';
}

/** An edge in a connection. */
export interface ProjectV2WorkflowEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectV2Workflow | null;
  __typename: 'ProjectV2WorkflowEdge';
}

/** Properties by which project workflows can be ordered. */
export type ProjectV2WorkflowsOrderField = 'NAME' | 'NUMBER' | 'UPDATED_AT' | 'CREATED_AT';

/** A user's public key. */
export interface PublicKey {
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt: Scalars['DateTime'] | null;
  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt: Scalars['DateTime'] | null;
  /** The fingerprint for this PublicKey. */
  fingerprint: Scalars['String'];
  id: Scalars['ID'];
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly: Scalars['Boolean'] | null;
  /** The public key string. */
  key: Scalars['String'];
  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */
  updatedAt: Scalars['DateTime'] | null;
  __typename: 'PublicKey';
}

/** The connection type for PublicKey. */
export interface PublicKeyConnection {
  /** A list of edges. */
  edges: (PublicKeyEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PublicKey | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PublicKeyConnection';
}

/** An edge in a connection. */
export interface PublicKeyEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PublicKey | null;
  __typename: 'PublicKeyEdge';
}

/** Autogenerated return type of PublishSponsorsTier */
export interface PublishSponsorsTierPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The tier that was published. */
  sponsorsTier: SponsorsTier | null;
  __typename: 'PublishSponsorsTierPayload';
}

/** A repository pull request. */
export interface PullRequest {
  /** Reason that the conversation was locked. */
  activeLockReason: LockReason | null;
  /** The number of additions in this pull request. */
  additions: Scalars['Int'];
  /** A list of Users assigned to this object. */
  assignees: UserConnection;
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** Returns the auto-merge request object if one exists for this pull request. */
  autoMergeRequest: AutoMergeRequest | null;
  /** Identifies the base Ref associated with the pull request. */
  baseRef: Ref | null;
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  baseRefName: Scalars['String'];
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  baseRefOid: Scalars['GitObjectID'];
  /** The repository associated with this pull request's base Ref. */
  baseRepository: Repository | null;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** The number of changed files in this pull request. */
  changedFiles: Scalars['Int'];
  /** The HTTP path for the checks of this pull request. */
  checksResourcePath: Scalars['URI'];
  /** The HTTP URL for the checks of this pull request. */
  checksUrl: Scalars['URI'];
  /** `true` if the pull request is closed */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt: Scalars['DateTime'] | null;
  /** List of issues that were may be closed by this pull request */
  closingIssuesReferences: IssueConnection | null;
  /** A list of comments associated with the pull request. */
  comments: IssueCommentConnection;
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  commits: PullRequestCommitConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The number of deletions in this pull request. */
  deletions: Scalars['Int'];
  /** The actor who edited this pull request's body. */
  editor: Actor | null;
  /** Lists the files changed within this pull request. */
  files: PullRequestChangedFileConnection | null;
  /** Identifies the head Ref associated with the pull request. */
  headRef: Ref | null;
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  headRefName: Scalars['String'];
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  headRefOid: Scalars['GitObjectID'];
  /** The repository associated with this pull request's head Ref. */
  headRepository: Repository | null;
  /** The owner of the repository associated with this pull request's head Ref. */
  headRepositoryOwner: RepositoryOwner | null;
  /** The hovercard information for this issue */
  hovercard: Hovercard;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The head and base repositories are different. */
  isCrossRepository: Scalars['Boolean'];
  /** Identifies if the pull request is a draft. */
  isDraft: Scalars['Boolean'];
  /** Is this pull request read by the viewer */
  isReadByViewer: Scalars['Boolean'] | null;
  /** A list of labels associated with the object. */
  labels: LabelConnection | null;
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** A list of latest reviews per user associated with the pull request. */
  latestOpinionatedReviews: PullRequestReviewConnection | null;
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  latestReviews: PullRequestReviewConnection | null;
  /** `true` if the pull request is locked */
  locked: Scalars['Boolean'];
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify: Scalars['Boolean'];
  /** The commit that was created when this pull request was merged. */
  mergeCommit: Commit | null;
  /** The merge queue entry of the pull request in the base branch's merge queue */
  mergeQueueEntry: MergeQueueEntry | null;
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  mergeable: MergeableState;
  /** Whether or not the pull request was merged. */
  merged: Scalars['Boolean'];
  /** The date and time that the pull request was merged. */
  mergedAt: Scalars['DateTime'] | null;
  /** The actor who merged the pull request. */
  mergedBy: Actor | null;
  /** Identifies the milestone associated with the pull request. */
  milestone: Milestone | null;
  /** Identifies the pull request number. */
  number: Scalars['Int'];
  /** A list of Users that are participating in the Pull Request conversation. */
  participants: UserConnection;
  /** The permalink to the pull request. */
  permalink: Scalars['URI'];
  /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */
  potentialMergeCommit: Commit | null;
  /** List of project cards associated with this pull request. */
  projectCards: ProjectCardConnection;
  /** List of project items associated with this pull request. */
  projectItems: ProjectV2ItemConnection;
  /** Find a project by number. */
  projectV2: ProjectV2 | null;
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path for this pull request. */
  resourcePath: Scalars['URI'];
  /** The HTTP path for reverting this pull request. */
  revertResourcePath: Scalars['URI'];
  /** The HTTP URL for reverting this pull request. */
  revertUrl: Scalars['URI'];
  /** The current status of this pull request with respect to code review. */
  reviewDecision: PullRequestReviewDecision | null;
  /** A list of review requests associated with the pull request. */
  reviewRequests: ReviewRequestConnection | null;
  /** The list of all review threads for this pull request. */
  reviewThreads: PullRequestReviewThreadConnection;
  /** A list of reviews associated with the pull request. */
  reviews: PullRequestReviewConnection | null;
  /** Identifies the state of the pull request. */
  state: PullRequestState;
  /** A list of reviewer suggestions based on commit history and past review comments. */
  suggestedReviewers: (SuggestedReviewer | null)[];
  /**
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timeline: PullRequestTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timelineItems: PullRequestTimelineItemsConnection;
  /** Identifies the pull request title. */
  title: Scalars['String'];
  /** Identifies the pull request title rendered to HTML. */
  titleHTML: Scalars['HTML'];
  /** Returns a count of how many comments this pull request has received. */
  totalCommentsCount: Scalars['Int'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this pull request. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Whether or not the viewer can apply suggestion. */
  viewerCanApplySuggestion: Scalars['Boolean'];
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose: Scalars['Boolean'];
  /** Check if the viewer can restore the deleted head ref. */
  viewerCanDeleteHeadRef: Scalars['Boolean'];
  /** Whether or not the viewer can disable auto-merge */
  viewerCanDisableAutoMerge: Scalars['Boolean'];
  /** Can the viewer edit files within this pull request. */
  viewerCanEditFiles: Scalars['Boolean'];
  /** Whether or not the viewer can enable auto-merge */
  viewerCanEnableAutoMerge: Scalars['Boolean'];
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  viewerCanMergeAsAdmin: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /**
   * Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
   * If the head ref is up to date or unable to be updated by this user, this will return false.
   *
   */
  viewerCanUpdateBranch: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** The latest review given from the viewer. */
  viewerLatestReview: PullRequestReview | null;
  /** The person who has requested the viewer for review on this pull request. */
  viewerLatestReviewRequest: ReviewRequest | null;
  /** The merge body text for the viewer and method. */
  viewerMergeBodyText: Scalars['String'];
  /** The merge headline text for the viewer and method. */
  viewerMergeHeadlineText: Scalars['String'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  __typename: 'PullRequest';
}

/** The possible methods for updating a pull request's head branch with the base branch. */
export type PullRequestBranchUpdateMethod = 'MERGE' | 'REBASE';

/** A file changed in a pull request. */
export interface PullRequestChangedFile {
  /** The number of additions to the file. */
  additions: Scalars['Int'];
  /** How the file was changed in this PullRequest */
  changeType: PatchStatus;
  /** The number of deletions to the file. */
  deletions: Scalars['Int'];
  /** The path of the file. */
  path: Scalars['String'];
  /** The state of the file for the viewer. */
  viewerViewedState: FileViewedState;
  __typename: 'PullRequestChangedFile';
}

/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnection {
  /** A list of edges. */
  edges: (PullRequestChangedFileEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestChangedFile | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestChangedFileConnection';
}

/** An edge in a connection. */
export interface PullRequestChangedFileEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestChangedFile | null;
  __typename: 'PullRequestChangedFileEdge';
}

/** Represents a Git commit part of a pull request. */
export interface PullRequestCommit {
  /** The Git commit object */
  commit: Commit;
  id: Scalars['ID'];
  /** The pull request this commit belongs to */
  pullRequest: PullRequest;
  /** The HTTP path for this pull request commit */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this pull request commit */
  url: Scalars['URI'];
  __typename: 'PullRequestCommit';
}

/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThread {
  /** The comments that exist in this thread. */
  comments: CommitCommentConnection;
  /** The commit the comments were made on. */
  commit: Commit;
  id: Scalars['ID'];
  /** The file the comments were made on. */
  path: Scalars['String'] | null;
  /** The position in the diff for the commit that the comment was made on. */
  position: Scalars['Int'] | null;
  /** The pull request this commit comment thread belongs to */
  pullRequest: PullRequest;
  /** The repository associated with this node. */
  repository: Repository;
  __typename: 'PullRequestCommitCommentThread';
}

/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnection {
  /** A list of edges. */
  edges: (PullRequestCommitEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestCommit | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestCommitConnection';
}

/** An edge in a connection. */
export interface PullRequestCommitEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestCommit | null;
  __typename: 'PullRequestCommitEdge';
}

/** The connection type for PullRequest. */
export interface PullRequestConnection {
  /** A list of edges. */
  edges: (PullRequestEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequest | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestConnection';
}

/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepository {
  /** The pull request contributions. */
  contributions: CreatedPullRequestContributionConnection;
  /** The repository in which the pull requests were opened. */
  repository: Repository;
  __typename: 'PullRequestContributionsByRepository';
}

/** An edge in a connection. */
export interface PullRequestEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequest | null;
  __typename: 'PullRequestEdge';
}

/** Represents available types of methods to use when merging a pull request. */
export type PullRequestMergeMethod = 'MERGE' | 'SQUASH' | 'REBASE';

/** Properties by which pull_requests connections can be ordered. */
export type PullRequestOrderField = 'CREATED_AT' | 'UPDATED_AT';

/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParameters {
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: Scalars['Boolean'];
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: Scalars['Boolean'];
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: Scalars['Boolean'];
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Scalars['Int'];
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: Scalars['Boolean'];
  __typename: 'PullRequestParameters';
}

/** A review object for a given pull request. */
export interface PullRequestReview {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** Indicates whether the author of this review has push access to the repository. */
  authorCanPushToRepository: Scalars['Boolean'];
  /** Identifies the pull request review body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body of this review rendered as plain text. */
  bodyText: Scalars['String'];
  /** A list of review comments for the current pull request review. */
  comments: PullRequestReviewCommentConnection;
  /** Identifies the commit associated with this pull request review. */
  commit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** A list of teams that this review was made on behalf of. */
  onBehalfOf: TeamConnection;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** Identifies the pull request associated with this pull request review. */
  pullRequest: PullRequest;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path permalink for this PullRequestReview. */
  resourcePath: Scalars['URI'];
  /** Identifies the current state of the pull request review. */
  state: PullRequestReviewState;
  /** Identifies when the Pull Request Review was submitted */
  submittedAt: Scalars['DateTime'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this PullRequestReview. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'PullRequestReview';
}

/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /** Author's association with the subject of the comment. */
  authorAssociation: CommentAuthorAssociation;
  /** The comment body of this review comment. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The comment body of this review comment rendered as plain text. */
  bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment. */
  commit: Commit | null;
  /** Identifies when the comment was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The diff hunk to which the comment applies. */
  diffHunk: Scalars['String'];
  /** Identifies when the comment was created in a draft state. */
  draftedAt: Scalars['DateTime'];
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /** The end line number on the file to which the comment applies */
  line: Scalars['Int'] | null;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason: Scalars['String'] | null;
  /** Identifies the original commit associated with the comment. */
  originalCommit: Commit | null;
  /** The end line number on the file to which the comment applied when it was first created */
  originalLine: Scalars['Int'] | null;
  /**
   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.
   * The original line index in the diff to which the comment applies.
   */
  originalPosition: Scalars['Int'];
  /** The start line number on the file to which the comment applied when it was first created */
  originalStartLine: Scalars['Int'] | null;
  /** Identifies when the comment body is outdated */
  outdated: Scalars['Boolean'];
  /** The path to which the comment applies. */
  path: Scalars['String'];
  /**
   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.
   * The line index in the diff to which the comment applies.
   */
  position: Scalars['Int'] | null;
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** The pull request associated with this review comment. */
  pullRequest: PullRequest;
  /** The pull request review associated with this review comment. */
  pullRequestReview: PullRequestReview | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** The comment this is a reply to. */
  replyTo: PullRequestReviewComment | null;
  /** The repository associated with this node. */
  repository: Repository;
  /** The HTTP path permalink for this review comment. */
  resourcePath: Scalars['URI'];
  /** The start line number on the file to which the comment applies */
  startLine: Scalars['Int'] | null;
  /** Identifies the state of the comment. */
  state: PullRequestReviewCommentState;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType;
  /** Identifies when the comment was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this review comment. */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'PullRequestReviewComment';
}

/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnection {
  /** A list of edges. */
  edges: (PullRequestReviewCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestReviewComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestReviewCommentConnection';
}

/** An edge in a connection. */
export interface PullRequestReviewCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestReviewComment | null;
  __typename: 'PullRequestReviewCommentEdge';
}

/** The possible states of a pull request review comment. */
export type PullRequestReviewCommentState = 'PENDING' | 'SUBMITTED';

/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnection {
  /** A list of edges. */
  edges: (PullRequestReviewEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestReview | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestReviewConnection';
}

/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepository {
  /** The pull request review contributions. */
  contributions: CreatedPullRequestReviewContributionConnection;
  /** The repository in which the pull request reviews were made. */
  repository: Repository;
  __typename: 'PullRequestReviewContributionsByRepository';
}

/** The review status of a pull request. */
export type PullRequestReviewDecision = 'CHANGES_REQUESTED' | 'APPROVED' | 'REVIEW_REQUIRED';

/** An edge in a connection. */
export interface PullRequestReviewEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestReview | null;
  __typename: 'PullRequestReviewEdge';
}

/** The possible events to perform on a pull request review. */
export type PullRequestReviewEvent = 'COMMENT' | 'APPROVE' | 'REQUEST_CHANGES' | 'DISMISS';

/** The possible states of a pull request review. */
export type PullRequestReviewState =
  | 'PENDING'
  | 'COMMENTED'
  | 'APPROVED'
  | 'CHANGES_REQUESTED'
  | 'DISMISSED';

/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThread {
  /** A list of pull request comments associated with the thread. */
  comments: PullRequestReviewCommentConnection;
  /** The side of the diff on which this thread was placed. */
  diffSide: DiffSide;
  id: Scalars['ID'];
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: Scalars['Boolean'];
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: Scalars['Boolean'];
  /** Whether this thread has been resolved */
  isResolved: Scalars['Boolean'];
  /** The line in the file to which this thread refers */
  line: Scalars['Int'] | null;
  /** The original line in the file to which this thread refers. */
  originalLine: Scalars['Int'] | null;
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine: Scalars['Int'] | null;
  /** Identifies the file path of this thread. */
  path: Scalars['String'];
  /** Identifies the pull request associated with this thread. */
  pullRequest: PullRequest;
  /** Identifies the repository associated with this thread. */
  repository: Repository;
  /** The user who resolved this thread */
  resolvedBy: User | null;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide: DiffSide | null;
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine: Scalars['Int'] | null;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: Scalars['Boolean'];
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: Scalars['Boolean'];
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: Scalars['Boolean'];
  __typename: 'PullRequestReviewThread';
}

/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnection {
  /** A list of edges. */
  edges: (PullRequestReviewThreadEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestReviewThread | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestReviewThreadConnection';
}

/** An edge in a connection. */
export interface PullRequestReviewThreadEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestReviewThread | null;
  __typename: 'PullRequestReviewThreadEdge';
}

/** The possible subject types of a pull request review comment. */
export type PullRequestReviewThreadSubjectType = 'LINE' | 'FILE';

/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarker {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The last commit the viewer has seen. */
  lastSeenCommit: Commit;
  /** The pull request to which the marker belongs. */
  pullRequest: PullRequest;
  __typename: 'PullRequestRevisionMarker';
}

/** The possible states of a pull request. */
export type PullRequestState = 'OPEN' | 'CLOSED' | 'MERGED';

/** A repository pull request template. */
export interface PullRequestTemplate {
  /** The body of the template */
  body: Scalars['String'] | null;
  /** The filename of the template */
  filename: Scalars['String'] | null;
  /** The repository the template belongs to */
  repository: Repository;
  __typename: 'PullRequestTemplate';
}

/** A threaded list of comments for a given pull request. */
export interface PullRequestThread {
  /** A list of pull request comments associated with the thread. */
  comments: PullRequestReviewCommentConnection;
  /** The side of the diff on which this thread was placed. */
  diffSide: DiffSide;
  id: Scalars['ID'];
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: Scalars['Boolean'];
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: Scalars['Boolean'];
  /** Whether this thread has been resolved */
  isResolved: Scalars['Boolean'];
  /** The line in the file to which this thread refers */
  line: Scalars['Int'] | null;
  /** Identifies the file path of this thread. */
  path: Scalars['String'];
  /** Identifies the pull request associated with this thread. */
  pullRequest: PullRequest;
  /** Identifies the repository associated with this thread. */
  repository: Repository;
  /** The user who resolved this thread */
  resolvedBy: User | null;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide: DiffSide | null;
  /** The line of the first file diff in the thread. */
  startLine: Scalars['Int'] | null;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType: PullRequestReviewThreadSubjectType;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: Scalars['Boolean'];
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: Scalars['Boolean'];
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: Scalars['Boolean'];
  __typename: 'PullRequestThread';
}

/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnection {
  /** A list of edges. */
  edges: (PullRequestTimelineItemEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PullRequestTimelineItem | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PullRequestTimelineConnection';
}

/** An item in a pull request timeline */
export type PullRequestTimelineItem = (
  | AssignedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | Commit
  | CommitCommentThread
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MergedEvent
  | MilestonedEvent
  | PullRequestReview
  | PullRequestReviewComment
  | PullRequestReviewThread
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent
) & { __isUnion?: true };

/** An edge in a connection. */
export interface PullRequestTimelineItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestTimelineItem | null;
  __typename: 'PullRequestTimelineItemEdge';
}

/** An item in a pull request timeline */
export type PullRequestTimelineItems = (
  | AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent
) & { __isUnion?: true };

/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnection {
  /** A list of edges. */
  edges: (PullRequestTimelineItemsEdge | null)[] | null;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars['Int'];
  /** A list of nodes. */
  nodes: (PullRequestTimelineItems | null)[] | null;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'PullRequestTimelineItemsConnection';
}

/** An edge in a connection. */
export interface PullRequestTimelineItemsEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PullRequestTimelineItems | null;
  __typename: 'PullRequestTimelineItemsEdge';
}

/** The possible item types found in a timeline. */
export type PullRequestTimelineItemsItemType =
  | 'PULL_REQUEST_COMMIT'
  | 'PULL_REQUEST_COMMIT_COMMENT_THREAD'
  | 'PULL_REQUEST_REVIEW'
  | 'PULL_REQUEST_REVIEW_THREAD'
  | 'PULL_REQUEST_REVISION_MARKER'
  | 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT'
  | 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT'
  | 'AUTO_MERGE_DISABLED_EVENT'
  | 'AUTO_MERGE_ENABLED_EVENT'
  | 'AUTO_REBASE_ENABLED_EVENT'
  | 'AUTO_SQUASH_ENABLED_EVENT'
  | 'BASE_REF_CHANGED_EVENT'
  | 'BASE_REF_FORCE_PUSHED_EVENT'
  | 'BASE_REF_DELETED_EVENT'
  | 'DEPLOYED_EVENT'
  | 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT'
  | 'HEAD_REF_DELETED_EVENT'
  | 'HEAD_REF_FORCE_PUSHED_EVENT'
  | 'HEAD_REF_RESTORED_EVENT'
  | 'MERGED_EVENT'
  | 'REVIEW_DISMISSED_EVENT'
  | 'REVIEW_REQUESTED_EVENT'
  | 'REVIEW_REQUEST_REMOVED_EVENT'
  | 'READY_FOR_REVIEW_EVENT'
  | 'CONVERT_TO_DRAFT_EVENT'
  | 'ADDED_TO_MERGE_QUEUE_EVENT'
  | 'REMOVED_FROM_MERGE_QUEUE_EVENT'
  | 'ISSUE_COMMENT'
  | 'CROSS_REFERENCED_EVENT'
  | 'ADDED_TO_PROJECT_EVENT'
  | 'ASSIGNED_EVENT'
  | 'CLOSED_EVENT'
  | 'COMMENT_DELETED_EVENT'
  | 'CONNECTED_EVENT'
  | 'CONVERTED_NOTE_TO_ISSUE_EVENT'
  | 'CONVERTED_TO_DISCUSSION_EVENT'
  | 'DEMILESTONED_EVENT'
  | 'DISCONNECTED_EVENT'
  | 'LABELED_EVENT'
  | 'LOCKED_EVENT'
  | 'MARKED_AS_DUPLICATE_EVENT'
  | 'MENTIONED_EVENT'
  | 'MILESTONED_EVENT'
  | 'MOVED_COLUMNS_IN_PROJECT_EVENT'
  | 'PINNED_EVENT'
  | 'REFERENCED_EVENT'
  | 'REMOVED_FROM_PROJECT_EVENT'
  | 'RENAMED_TITLE_EVENT'
  | 'REOPENED_EVENT'
  | 'SUBSCRIBED_EVENT'
  | 'TRANSFERRED_EVENT'
  | 'UNASSIGNED_EVENT'
  | 'UNLABELED_EVENT'
  | 'UNLOCKED_EVENT'
  | 'USER_BLOCKED_EVENT'
  | 'UNMARKED_AS_DUPLICATE_EVENT'
  | 'UNPINNED_EVENT'
  | 'UNSUBSCRIBED_EVENT';

/** The possible target states when updating a pull request. */
export type PullRequestUpdateState = 'OPEN' | 'CLOSED';

/** A Git push. */
export interface Push {
  id: Scalars['ID'];
  /** The SHA after the push */
  nextSha: Scalars['GitObjectID'] | null;
  /** The permalink for this push. */
  permalink: Scalars['URI'];
  /** The SHA before the push */
  previousSha: Scalars['GitObjectID'] | null;
  /** The actor who pushed */
  pusher: Actor;
  /** The repository that was pushed to */
  repository: Repository;
  __typename: 'Push';
}

/** A team, user, or app who has the ability to push to a protected branch. */
export interface PushAllowance {
  /** The actor that can push. */
  actor: PushAllowanceActor | null;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule: BranchProtectionRule | null;
  id: Scalars['ID'];
  __typename: 'PushAllowance';
}

/** Types that can be an actor. */
export type PushAllowanceActor = (App | Team | User) & { __isUnion?: true };

/** The connection type for PushAllowance. */
export interface PushAllowanceConnection {
  /** A list of edges. */
  edges: (PushAllowanceEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (PushAllowance | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'PushAllowanceConnection';
}

/** An edge in a connection. */
export interface PushAllowanceEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PushAllowance | null;
  __typename: 'PushAllowanceEdge';
}

/** The query root of GitHub's GraphQL interface. */
export interface Query {
  /** Look up a code of conduct by its key */
  codeOfConduct: CodeOfConduct | null;
  /** Look up a code of conduct by its key */
  codesOfConduct: (CodeOfConduct | null)[] | null;
  /** Look up an enterprise by URL slug. */
  enterprise: Enterprise | null;
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation: EnterpriseAdministratorInvitation | null;
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken: EnterpriseAdministratorInvitation | null;
  /** Look up an open source license by its key */
  license: License | null;
  /** Return a list of known open source licenses */
  licenses: (License | null)[];
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories: MarketplaceCategory[];
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory: MarketplaceCategory | null;
  /** Look up a single Marketplace listing */
  marketplaceListing: MarketplaceListing | null;
  /** Look up Marketplace listings */
  marketplaceListings: MarketplaceListingConnection;
  /** Return information about the GitHub instance */
  meta: GitHubMetadata;
  /** Fetches an object given its ID. */
  node: Node | null;
  /** Lookup nodes by a list of IDs. */
  nodes: (Node | null)[];
  /** Lookup a organization by login. */
  organization: Organization | null;
  /** The client's rate limit information. */
  rateLimit: RateLimit | null;
  /** Workaround for re-exposing the root query object. (Refer to https://github.com/facebook/relay/issues/112 for more information.) */
  relay: Query;
  /** Lookup a given repository by the owner and repository name. */
  repository: Repository | null;
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner: RepositoryOwner | null;
  /** Lookup resource by a URL. */
  resource: UniformResourceLocatable | null;
  /** Perform a search across resources, returning a maximum of 1,000 results. */
  search: SearchResultItemConnection;
  /** GitHub Security Advisories */
  securityAdvisories: SecurityAdvisoryConnection;
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory: SecurityAdvisory | null;
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities: SecurityVulnerabilityConnection;
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables: SponsorableItemConnection;
  /** Look up a topic by name. */
  topic: Topic | null;
  /** Lookup a user by login. */
  user: User | null;
  /** The currently authenticated user. */
  viewer: User;
  __typename: 'Query';
}

/** Represents the client's rate limit. */
export interface RateLimit {
  /** The point cost for the current query counting against the rate limit. */
  cost: Scalars['Int'];
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit: Scalars['Int'];
  /** The maximum number of nodes this query may return */
  nodeCount: Scalars['Int'];
  /** The number of points remaining in the current rate limit window. */
  remaining: Scalars['Int'];
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt: Scalars['DateTime'];
  /** The number of points used in the current rate limit window. */
  used: Scalars['Int'];
  __typename: 'RateLimit';
}

/** Represents a subject that can be reacted on. */
export type Reactable = (
  | CommitComment
  | Discussion
  | DiscussionComment
  | Issue
  | IssueComment
  | PullRequest
  | PullRequestReview
  | PullRequestReviewComment
  | Release
  | TeamDiscussion
  | TeamDiscussionComment
) & { __isUnion?: true };

/** The connection type for User. */
export interface ReactingUserConnection {
  /** A list of edges. */
  edges: (ReactingUserEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReactingUserConnection';
}

/** Represents a user that's made a reaction. */
export interface ReactingUserEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: User;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars['DateTime'];
  __typename: 'ReactingUserEdge';
}

/** An emoji reaction to a particular piece of content. */
export interface Reaction {
  /** Identifies the emoji reaction. */
  content: ReactionContent;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The reactable piece of content */
  reactable: Reactable;
  /** Identifies the user who created this reaction. */
  user: User | null;
  __typename: 'Reaction';
}

/** A list of reactions that have been left on the subject. */
export interface ReactionConnection {
  /** A list of edges. */
  edges: (ReactionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Reaction | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars['Boolean'];
  __typename: 'ReactionConnection';
}

/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export type ReactionContent =
  | 'THUMBS_UP'
  | 'THUMBS_DOWN'
  | 'LAUGH'
  | 'HOORAY'
  | 'CONFUSED'
  | 'HEART'
  | 'ROCKET'
  | 'EYES';

/** An edge in a connection. */
export interface ReactionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Reaction | null;
  __typename: 'ReactionEdge';
}

/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroup {
  /** Identifies the emoji reaction. */
  content: ReactionContent;
  /** Identifies when the reaction was created. */
  createdAt: Scalars['DateTime'] | null;
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors: ReactorConnection;
  /** The subject that was reacted to. */
  subject: Reactable;
  /**
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   */
  users: ReactingUserConnection;
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars['Boolean'];
  __typename: 'ReactionGroup';
}

/** A list of fields that reactions can be ordered by. */
export type ReactionOrderField = 'CREATED_AT';

/** Types that can be assigned to reactions. */
export type Reactor = (Bot | Mannequin | Organization | User) & { __isUnion?: true };

/** The connection type for Reactor. */
export interface ReactorConnection {
  /** A list of edges. */
  edges: (ReactorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Reactor | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReactorConnection';
}

/** Represents an author of a reaction. */
export interface ReactorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The author of the reaction. */
  node: Reactor;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars['DateTime'];
  __typename: 'ReactorEdge';
}

/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** The HTTP path for this ready for review event. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this ready for review event. */
  url: Scalars['URI'];
  __typename: 'ReadyForReviewEvent';
}

/** Represents a Git reference. */
export interface Ref {
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests: PullRequestConnection;
  /** Branch protection rules for this ref */
  branchProtectionRule: BranchProtectionRule | null;
  /** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
  compare: Comparison | null;
  id: Scalars['ID'];
  /** The ref name. */
  name: Scalars['String'];
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix: Scalars['String'];
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule: RefUpdateRule | null;
  /** The repository the ref belongs to. */
  repository: Repository;
  /** The object the ref points to. Returns null when object does not exist. */
  target: GitObject | null;
  __typename: 'Ref';
}

/** The connection type for Ref. */
export interface RefConnection {
  /** A list of edges. */
  edges: (RefEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Ref | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RefConnection';
}

/** An edge in a connection. */
export interface RefEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Ref | null;
  __typename: 'RefEdge';
}

/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTarget {
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Scalars['String'][];
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
  include: Scalars['String'][];
  __typename: 'RefNameConditionTarget';
}

/** Properties by which ref connections can be ordered. */
export type RefOrderField = 'TAG_COMMIT_DATE' | 'ALPHABETICAL';

/** A ref update rules for a viewer. */
export interface RefUpdateRule {
  /** Can this branch be deleted. */
  allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars['Boolean'];
  /** Can matching branches be created. */
  blocksCreations: Scalars['Boolean'];
  /** Identifies the protection rule pattern. */
  pattern: Scalars['String'];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount: Scalars['Int'] | null;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts: (Scalars['String'] | null)[] | null;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars['Boolean'];
  /** Are commits required to be signed. */
  requiresSignatures: Scalars['Boolean'];
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews: Scalars['Boolean'];
  /** Can the viewer push to the branch */
  viewerCanPush: Scalars['Boolean'];
  __typename: 'RefUpdateRule';
}

/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the commit associated with the 'referenced' event. */
  commit: Commit | null;
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository: Repository;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference: Scalars['Boolean'];
  /** Object referenced by event. */
  subject: ReferencedSubject;
  __typename: 'ReferencedEvent';
}

/** Any referencable object */
export type ReferencedSubject = (Issue | PullRequest) & { __isUnion?: true };

/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The identity provider for the enterprise. */
  identityProvider: EnterpriseIdentityProvider | null;
  __typename: 'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload';
}

/** Autogenerated return type of RegenerateVerifiableDomainToken */
export interface RegenerateVerifiableDomainTokenPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The verification token that was generated. */
  verificationToken: Scalars['String'] | null;
  __typename: 'RegenerateVerifiableDomainTokenPayload';
}

/** Autogenerated return type of RejectDeployments */
export interface RejectDeploymentsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The affected deployments. */
  deployments: Deployment[] | null;
  __typename: 'RejectDeploymentsPayload';
}

/** A release contains the content for a release. */
export interface Release {
  /** The author of the release */
  author: User | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The description of the release. */
  description: Scalars['String'] | null;
  /** The description of this release rendered to HTML. */
  descriptionHTML: Scalars['HTML'] | null;
  id: Scalars['ID'];
  /** Whether or not the release is a draft */
  isDraft: Scalars['Boolean'];
  /** Whether or not the release is the latest releast */
  isLatest: Scalars['Boolean'];
  /** Whether or not the release is a prerelease */
  isPrerelease: Scalars['Boolean'];
  /** A list of users mentioned in the release description */
  mentions: UserConnection | null;
  /** The title of the release. */
  name: Scalars['String'] | null;
  /** Identifies the date and time when the release was created. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /** List of releases assets which are dependent on this release. */
  releaseAssets: ReleaseAssetConnection;
  /** The repository that the release belongs to. */
  repository: Repository;
  /** The HTTP path for this issue */
  resourcePath: Scalars['URI'];
  /** A description of the release, rendered to HTML without any links in it. */
  shortDescriptionHTML: Scalars['HTML'] | null;
  /** The Git tag the release points to */
  tag: Ref | null;
  /** The tag commit for this release. */
  tagCommit: Commit | null;
  /** The name of the release's Git tag */
  tagName: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue */
  url: Scalars['URI'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  __typename: 'Release';
}

/** A release asset contains the content for a release asset. */
export interface ReleaseAsset {
  /** The asset's content-type */
  contentType: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The number of times this asset was downloaded */
  downloadCount: Scalars['Int'];
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl: Scalars['URI'];
  id: Scalars['ID'];
  /** Identifies the title of the release asset. */
  name: Scalars['String'];
  /** Release that the asset is associated with */
  release: Release | null;
  /** The size (in bytes) of the asset */
  size: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The user that performed the upload */
  uploadedBy: User;
  /** Identifies the URL of the release asset. */
  url: Scalars['URI'];
  __typename: 'ReleaseAsset';
}

/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnection {
  /** A list of edges. */
  edges: (ReleaseAssetEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ReleaseAsset | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReleaseAssetConnection';
}

/** An edge in a connection. */
export interface ReleaseAssetEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ReleaseAsset | null;
  __typename: 'ReleaseAssetEdge';
}

/** The connection type for Release. */
export interface ReleaseConnection {
  /** A list of edges. */
  edges: (ReleaseEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Release | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReleaseConnection';
}

/** An edge in a connection. */
export interface ReleaseEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Release | null;
  __typename: 'ReleaseEdge';
}

/** Properties by which release connections can be ordered. */
export type ReleaseOrderField = 'CREATED_AT' | 'NAME';

/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayload {
  /** The item that was unassigned. */
  assignable: Assignable | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'RemoveAssigneesFromAssignablePayload';
}

/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayload {
  /** The user who was removed as an administrator. */
  admin: User | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated enterprise. */
  enterprise: Enterprise | null;
  /** A message confirming the result of removing an administrator. */
  message: Scalars['String'] | null;
  /** The viewer performing the mutation. */
  viewer: User | null;
  __typename: 'RemoveEnterpriseAdminPayload';
}

/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The identity provider that was removed from the enterprise. */
  identityProvider: EnterpriseIdentityProvider | null;
  __typename: 'RemoveEnterpriseIdentityProviderPayload';
}

/** Autogenerated return type of RemoveEnterpriseMember */
export interface RemoveEnterpriseMemberPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated enterprise. */
  enterprise: Enterprise | null;
  /** The user that was removed from the enterprise. */
  user: User | null;
  /** The viewer performing the mutation. */
  viewer: User | null;
  __typename: 'RemoveEnterpriseMemberPayload';
}

/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated enterprise. */
  enterprise: Enterprise | null;
  /** The organization that was removed from the enterprise. */
  organization: Organization | null;
  /** The viewer performing the mutation. */
  viewer: User | null;
  __typename: 'RemoveEnterpriseOrganizationPayload';
}

/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
export interface RemoveEnterpriseSupportEntitlementPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of removing the support entitlement. */
  message: Scalars['String'] | null;
  __typename: 'RemoveEnterpriseSupportEntitlementPayload';
}

/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The Labelable the labels were removed from. */
  labelable: Labelable | null;
  __typename: 'RemoveLabelsFromLabelablePayload';
}

/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The user that was removed as an outside collaborator. */
  removedUser: User | null;
  __typename: 'RemoveOutsideCollaboratorPayload';
}

/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The reaction object. */
  reaction: Reaction | null;
  /** The reaction groups for the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** The reactable subject. */
  subject: Reactable | null;
  __typename: 'RemoveReactionPayload';
}

/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The starrable. */
  starrable: Starrable | null;
  __typename: 'RemoveStarPayload';
}

/** Autogenerated return type of RemoveUpvote */
export interface RemoveUpvotePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The votable subject. */
  subject: Votable | null;
  __typename: 'RemoveUpvotePayload';
}

/** Represents a 'removed_from_merge_queue' event on a given pull request. */
export interface RemovedFromMergeQueueEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the before commit SHA for the 'removed_from_merge_queue' event. */
  beforeCommit: Commit | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The user who removed this Pull Request from the merge queue */
  enqueuer: User | null;
  id: Scalars['ID'];
  /** The merge queue where this pull request was removed from. */
  mergeQueue: MergeQueue | null;
  /** PullRequest referenced by event. */
  pullRequest: PullRequest | null;
  /** The reason this pull request was removed from the queue. */
  reason: Scalars['String'] | null;
  __typename: 'RemovedFromMergeQueueEvent';
}

/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  __typename: 'RemovedFromProjectEvent';
}

/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the current title of the issue or pull request. */
  currentTitle: Scalars['String'];
  id: Scalars['ID'];
  /** Identifies the previous title of the issue or pull request. */
  previousTitle: Scalars['String'];
  /** Subject that was renamed. */
  subject: RenamedTitleSubject;
  __typename: 'RenamedTitleEvent';
}

/** An object which has a renamable title */
export type RenamedTitleSubject = (Issue | PullRequest) & { __isUnion?: true };

/** Autogenerated return type of ReopenDiscussion */
export interface ReopenDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that was reopened. */
  discussion: Discussion | null;
  __typename: 'ReopenDiscussionPayload';
}

/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was opened. */
  issue: Issue | null;
  __typename: 'ReopenIssuePayload';
}

/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that was reopened. */
  pullRequest: PullRequest | null;
  __typename: 'ReopenPullRequestPayload';
}

/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Object that was reopened. */
  closable: Closable;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The reason the issue state was changed to open. */
  stateReason: IssueStateReason | null;
  __typename: 'ReopenedEvent';
}

/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoAccessAuditEntryVisibility | null;
  __typename: 'RepoAccessAuditEntry';
}

/** The privacy of a repository */
export type RepoAccessAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoAddMemberAuditEntryVisibility | null;
  __typename: 'RepoAddMemberAuditEntry';
}

/** The privacy of a repository */
export type RepoAddMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The name of the topic added to the repository */
  topic: Topic | null;
  /** The name of the topic added to the repository */
  topicName: Scalars['String'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoAddTopicAuditEntry';
}

/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoArchivedAuditEntryVisibility | null;
  __typename: 'RepoArchivedAuditEntry';
}

/** The privacy of a repository */
export type RepoArchivedAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the change was to enable (true) or disable (false) the merge type */
  isEnabled: Scalars['Boolean'] | null;
  /** The merge method affected by the change */
  mergeType: RepoChangeMergeSettingAuditEntryMergeType | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoChangeMergeSettingAuditEntry';
}

/** The merge options available for pull requests to this repository. */
export type RepoChangeMergeSettingAuditEntryMergeType = 'MERGE' | 'REBASE' | 'SQUASH';

/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigDisableAnonymousGitAccessAuditEntry';
}

/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigDisableCollaboratorsOnlyAuditEntry';
}

/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigDisableContributorsOnlyAuditEntry';
}

/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigDisableSockpuppetDisallowedAuditEntry';
}

/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigEnableAnonymousGitAccessAuditEntry';
}

/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigEnableCollaboratorsOnlyAuditEntry';
}

/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigEnableContributorsOnlyAuditEntry';
}

/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigEnableSockpuppetDisallowedAuditEntry';
}

/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigLockAnonymousGitAccessAuditEntry';
}

/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoConfigUnlockAnonymousGitAccessAuditEntry';
}

/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The name of the parent repository for this forked repository. */
  forkParentName: Scalars['String'] | null;
  /** The name of the root repository for this network. */
  forkSourceName: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoCreateAuditEntryVisibility | null;
  __typename: 'RepoCreateAuditEntry';
}

/** The privacy of a repository */
export type RepoCreateAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoDestroyAuditEntryVisibility | null;
  __typename: 'RepoDestroyAuditEntry';
}

/** The privacy of a repository */
export type RepoDestroyAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  /** The visibility of the repository */
  visibility: RepoRemoveMemberAuditEntryVisibility | null;
  __typename: 'RepoRemoveMemberAuditEntry';
}

/** The privacy of a repository */
export type RepoRemoveMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The name of the topic added to the repository */
  topic: Topic | null;
  /** The name of the topic added to the repository */
  topicName: Scalars['String'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepoRemoveTopicAuditEntry';
}

/** The reasons a piece of content can be reported or minimized. */
export type ReportedContentClassifiers =
  | 'SPAM'
  | 'ABUSE'
  | 'OFF_TOPIC'
  | 'OUTDATED'
  | 'DUPLICATE'
  | 'RESOLVED';

/** A repository contains the content for a project. */
export interface Repository {
  /** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
  allowUpdateBranch: Scalars['Boolean'];
  /** Identifies the date and time when the repository was archived. */
  archivedAt: Scalars['DateTime'] | null;
  /** A list of users that can be assigned to issues in this repository. */
  assignableUsers: UserConnection;
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  autoMergeAllowed: Scalars['Boolean'];
  /** A list of branch protection rules for this repository. */
  branchProtectionRules: BranchProtectionRuleConnection;
  /** Returns the code of conduct for this repository */
  codeOfConduct: CodeOfConduct | null;
  /** Information extracted from the repository's `CODEOWNERS` file. */
  codeowners: RepositoryCodeowners | null;
  /** A list of collaborators associated with the repository. */
  collaborators: RepositoryCollaboratorConnection | null;
  /** A list of commit comments associated with the repository. */
  commitComments: CommitCommentConnection;
  /** Returns a list of contact links associated to the repository */
  contactLinks: RepositoryContactLink[] | null;
  /** Returns the contributing guidelines for this repository. */
  contributingGuidelines: ContributingGuidelines | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The Ref associated with the repository's default branch. */
  defaultBranchRef: Ref | null;
  /** Whether or not branches are automatically deleted when merged in this repository. */
  deleteBranchOnMerge: Scalars['Boolean'];
  /** A list of deploy keys that are on this repository. */
  deployKeys: DeployKeyConnection;
  /** Deployments associated with the repository */
  deployments: DeploymentConnection;
  /** The description of the repository. */
  description: Scalars['String'] | null;
  /** The description of the repository rendered to HTML. */
  descriptionHTML: Scalars['HTML'];
  /** Returns a single discussion from the current repository by number. */
  discussion: Discussion | null;
  /** A list of discussion categories that are available in the repository. */
  discussionCategories: DiscussionCategoryConnection;
  /** A discussion category by slug. */
  discussionCategory: DiscussionCategory | null;
  /** A list of discussions that have been opened in the repository. */
  discussions: DiscussionConnection;
  /** The number of kilobytes this repository occupies on disk. */
  diskUsage: Scalars['Int'] | null;
  /** Returns a single active environment from the current repository by name. */
  environment: Environment | null;
  /** A list of environments that are in this repository. */
  environments: EnvironmentConnection;
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Scalars['Int'];
  /** Whether this repository allows forks. */
  forkingAllowed: Scalars['Boolean'];
  /** A list of direct forked repositories. */
  forks: RepositoryConnection;
  /** The funding links for this repository */
  fundingLinks: FundingLink[];
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: Scalars['Boolean'];
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: Scalars['Boolean'];
  /** Whether vulnerability alerts are enabled for the repository. */
  hasVulnerabilityAlertsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: Scalars['Boolean'];
  /** The repository's URL. */
  homepageUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The interaction ability settings for this repository. */
  interactionAbility: RepositoryInteractionAbility | null;
  /** Indicates if the repository is unmaintained. */
  isArchived: Scalars['Boolean'];
  /** Returns true if blank issue creation is allowed */
  isBlankIssuesEnabled: Scalars['Boolean'];
  /** Returns whether or not this repository disabled. */
  isDisabled: Scalars['Boolean'];
  /** Returns whether or not this repository is empty. */
  isEmpty: Scalars['Boolean'];
  /** Identifies if the repository is a fork. */
  isFork: Scalars['Boolean'];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: Scalars['Boolean'];
  /** Indicates if the repository has been locked or not. */
  isLocked: Scalars['Boolean'];
  /** Identifies if the repository is a mirror. */
  isMirror: Scalars['Boolean'];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars['Boolean'];
  /** Returns true if this repository has a security policy */
  isSecurityPolicyEnabled: Scalars['Boolean'] | null;
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: Scalars['Boolean'];
  /** Is this repository a user configuration repository? */
  isUserConfigurationRepository: Scalars['Boolean'];
  /** Returns a single issue from the current repository by number. */
  issue: Issue | null;
  /** Returns a single issue-like object from the current repository by number. */
  issueOrPullRequest: IssueOrPullRequest | null;
  /** Returns a list of issue templates associated to the repository */
  issueTemplates: IssueTemplate[] | null;
  /** A list of issues that have been opened in the repository. */
  issues: IssueConnection;
  /** Returns a single label by name */
  label: Label | null;
  /** A list of labels associated with the repository. */
  labels: LabelConnection | null;
  /** A list containing a breakdown of the language composition of the repository. */
  languages: LanguageConnection | null;
  /** Get the latest release for the repository if one exists. */
  latestRelease: Release | null;
  /** The license associated with the repository */
  licenseInfo: License | null;
  /** The reason the repository has been locked. */
  lockReason: RepositoryLockReason | null;
  /** A list of Users that can be mentioned in the context of the repository. */
  mentionableUsers: UserConnection;
  /** Whether or not PRs are merged with a merge commit on this repository. */
  mergeCommitAllowed: Scalars['Boolean'];
  /** How the default commit message will be generated when merging a pull request. */
  mergeCommitMessage: MergeCommitMessage;
  /** How the default commit title will be generated when merging a pull request. */
  mergeCommitTitle: MergeCommitTitle;
  /** The merge queue for a specified branch, otherwise the default branch if not provided. */
  mergeQueue: MergeQueue | null;
  /** Returns a single milestone from the current repository by number. */
  milestone: Milestone | null;
  /** A list of milestones associated with the repository. */
  milestones: MilestoneConnection | null;
  /** The repository's original mirror URL. */
  mirrorUrl: Scalars['URI'] | null;
  /** The name of the repository. */
  name: Scalars['String'];
  /** The repository's name with owner. */
  nameWithOwner: Scalars['String'];
  /** A Git object in the repository */
  object: GitObject | null;
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: Scalars['URI'];
  /** The User owner of the repository. */
  owner: RepositoryOwner;
  /** A list of packages under the owner. */
  packages: PackageConnection;
  /** The repository parent, if this is a fork. */
  parent: Repository | null;
  /** A list of discussions that have been pinned in this repository. */
  pinnedDiscussions: PinnedDiscussionConnection;
  /** A list of pinned issues for this repository. */
  pinnedIssues: PinnedIssueConnection | null;
  /** The primary language of the repository's code. */
  primaryLanguage: Language | null;
  /** Find project by number. */
  project: Project | null;
  /** Finds and returns the Project according to the provided Project number. */
  projectV2: ProjectV2 | null;
  /** A list of projects under the owner. */
  projects: ProjectConnection;
  /** The HTTP path listing the repository's projects */
  projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing the repository's projects */
  projectsUrl: Scalars['URI'];
  /** List of projects linked to this repository. */
  projectsV2: ProjectV2Connection;
  /** Returns a single pull request from the current repository by number. */
  pullRequest: PullRequest | null;
  /** Returns a list of pull request templates associated to the repository */
  pullRequestTemplates: PullRequestTemplate[] | null;
  /** A list of pull requests that have been opened in the repository. */
  pullRequests: PullRequestConnection;
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt: Scalars['DateTime'] | null;
  /** Whether or not rebase-merging is enabled on this repository. */
  rebaseMergeAllowed: Scalars['Boolean'];
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection;
  /** Fetch a given ref from the repository */
  ref: Ref | null;
  /** Fetch a list of refs from the repository */
  refs: RefConnection | null;
  /** Lookup a single release given various criteria. */
  release: Release | null;
  /** List of releases which are dependent on this repository. */
  releases: ReleaseConnection;
  /** A list of applied repository-topic associations for this repository. */
  repositoryTopics: RepositoryTopicConnection;
  /** The HTTP path for this repository */
  resourcePath: Scalars['URI'];
  /** Returns a single ruleset from the current repository by ID. */
  ruleset: RepositoryRuleset | null;
  /** A list of rulesets for this repository. */
  rulesets: RepositoryRulesetConnection | null;
  /** The security policy URL. */
  securityPolicyUrl: Scalars['URI'] | null;
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: Scalars['HTML'];
  /** Whether or not squash-merging is enabled on this repository. */
  squashMergeAllowed: Scalars['Boolean'];
  /** How the default commit message will be generated when squash merging a pull request. */
  squashMergeCommitMessage: SquashMergeCommitMessage;
  /** How the default commit title will be generated when squash merging a pull request. */
  squashMergeCommitTitle: SquashMergeCommitTitle;
  /**
   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.
   * Whether a squash merge commit can use the pull request title as default.
   */
  squashPrTitleUsedAsDefault: Scalars['Boolean'];
  /** The SSH URL to clone this repository */
  sshUrl: Scalars['GitSSHRemote'];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection;
  /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */
  submodules: SubmoduleConnection;
  /** Temporary authentication token for cloning this repository. */
  tempCloneToken: Scalars['String'] | null;
  /** The repository from which this repository was generated, if any. */
  templateRepository: Repository | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this repository */
  url: Scalars['URI'];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: Scalars['Boolean'];
  /** Indicates whether the viewer has admin permissions on this repository. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Indicates whether the viewer can update the topics of this repository. */
  viewerCanUpdateTopics: Scalars['Boolean'];
  /** The last commit email for the viewer. */
  viewerDefaultCommitEmail: Scalars['String'] | null;
  /** The last used merge method by the viewer or the default for the repository. */
  viewerDefaultMergeMethod: PullRequestMergeMethod;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  viewerPermission: RepositoryPermission | null;
  /** A list of emails this viewer can commit with. */
  viewerPossibleCommitEmails: Scalars['String'][] | null;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
  /** Returns a single vulnerability alert from the current repository by number. */
  vulnerabilityAlert: RepositoryVulnerabilityAlert | null;
  /** A list of vulnerability alerts that are on this repository. */
  vulnerabilityAlerts: RepositoryVulnerabilityAlertConnection | null;
  /** A list of users watching the repository. */
  watchers: UserConnection;
  /** Whether contributors are required to sign off on web-based commits in this repository. */
  webCommitSignoffRequired: Scalars['Boolean'];
  __typename: 'Repository';
}

/** The affiliation of a user to a repository */
export type RepositoryAffiliation = 'OWNER' | 'COLLABORATOR' | 'ORGANIZATION_MEMBER';

/** Metadata for an audit entry with action repo.* */
export type RepositoryAuditEntryData = (
  | OrgRestoreMemberMembershipRepositoryAuditEntryData
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamRemoveRepositoryAuditEntry
) & { __isUnion?: true };

/** Information extracted from a repository's `CODEOWNERS` file. */
export interface RepositoryCodeowners {
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors: RepositoryCodeownersError[];
  __typename: 'RepositoryCodeowners';
}

/** An error in a `CODEOWNERS` file. */
export interface RepositoryCodeownersError {
  /** The column number where the error occurs. */
  column: Scalars['Int'];
  /** A short string describing the type of error. */
  kind: Scalars['String'];
  /** The line number where the error occurs. */
  line: Scalars['Int'];
  /** A complete description of the error, combining information from other fields. */
  message: Scalars['String'];
  /** The path to the file when the error occurs. */
  path: Scalars['String'];
  /** The content of the line where the error occurs. */
  source: Scalars['String'];
  /** A suggestion of how to fix the error. */
  suggestion: Scalars['String'] | null;
  __typename: 'RepositoryCodeownersError';
}

/** The connection type for User. */
export interface RepositoryCollaboratorConnection {
  /** A list of edges. */
  edges: (RepositoryCollaboratorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryCollaboratorConnection';
}

/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: User;
  /** The permission the user has on the repository. */
  permission: RepositoryPermission;
  /** A list of sources for the user's access to the repository. */
  permissionSources: PermissionSource[] | null;
  __typename: 'RepositoryCollaboratorEdge';
}

/** A list of repositories owned by the subject. */
export interface RepositoryConnection {
  /** A list of edges. */
  edges: (RepositoryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Repository | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total size in kilobytes of all repositories in the connection. Value will never be larger than max 32-bit signed integer. */
  totalDiskUsage: Scalars['Int'];
  __typename: 'RepositoryConnection';
}

/** A repository contact link. */
export interface RepositoryContactLink {
  /** The contact link purpose. */
  about: Scalars['String'];
  /** The contact link name. */
  name: Scalars['String'];
  /** The contact link URL. */
  url: Scalars['URI'];
  __typename: 'RepositoryContactLink';
}

/** The reason a repository is listed as 'contributed'. */
export type RepositoryContributionType =
  | 'COMMIT'
  | 'ISSUE'
  | 'PULL_REQUEST'
  | 'REPOSITORY'
  | 'PULL_REQUEST_REVIEW';

/** Represents an author of discussions in repositories. */
export type RepositoryDiscussionAuthor = (Organization | User) & { __isUnion?: true };

/** Represents an author of discussion comments in repositories. */
export type RepositoryDiscussionCommentAuthor = (Organization | User) & { __isUnion?: true };

/** An edge in a connection. */
export interface RepositoryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Repository | null;
  __typename: 'RepositoryEdge';
}

/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTarget {
  /** One of these repo IDs must match the repo. */
  repositoryIds: Scalars['ID'][];
  __typename: 'RepositoryIdConditionTarget';
}

/** A subset of repository info. */
export type RepositoryInfo = Repository & { __isUnion?: true };

/** Repository interaction limit that applies to this object. */
export interface RepositoryInteractionAbility {
  /** The time the currently active limit expires. */
  expiresAt: Scalars['DateTime'] | null;
  /** The current limit that is enabled on this object. */
  limit: RepositoryInteractionLimit;
  /** The origin of the currently active interaction limit. */
  origin: RepositoryInteractionLimitOrigin;
  __typename: 'RepositoryInteractionAbility';
}

/** A repository interaction limit. */
export type RepositoryInteractionLimit =
  | 'EXISTING_USERS'
  | 'CONTRIBUTORS_ONLY'
  | 'COLLABORATORS_ONLY'
  | 'NO_LIMIT';

/** The length for a repository interaction limit to be enabled for. */
export type RepositoryInteractionLimitExpiry =
  | 'ONE_DAY'
  | 'THREE_DAYS'
  | 'ONE_WEEK'
  | 'ONE_MONTH'
  | 'SIX_MONTHS';

/** Indicates where an interaction limit is configured. */
export type RepositoryInteractionLimitOrigin = 'REPOSITORY' | 'ORGANIZATION' | 'USER';

/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitation {
  /** The email address that received the invitation. */
  email: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The user who received the invitation. */
  invitee: User | null;
  /** The user who created the invitation. */
  inviter: User;
  /** The permalink for this repository invitation. */
  permalink: Scalars['URI'];
  /** The permission granted on this repository by this invitation. */
  permission: RepositoryPermission;
  /** The Repository the user is invited to. */
  repository: RepositoryInfo | null;
  __typename: 'RepositoryInvitation';
}

/** A list of repository invitations. */
export interface RepositoryInvitationConnection {
  /** A list of edges. */
  edges: (RepositoryInvitationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryInvitation | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryInvitationConnection';
}

/** An edge in a connection. */
export interface RepositoryInvitationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryInvitation | null;
  __typename: 'RepositoryInvitationEdge';
}

/** Properties by which repository invitation connections can be ordered. */
export type RepositoryInvitationOrderField = 'CREATED_AT';

/** The possible reasons a given repository could be in a locked state. */
export type RepositoryLockReason =
  | 'MOVING'
  | 'BILLING'
  | 'RENAME'
  | 'MIGRATING'
  | 'TRADE_RESTRICTION'
  | 'TRANSFERRING_OWNERSHIP';

/** A GitHub Enterprise Importer (GEI) repository migration. */
export interface RepositoryMigration {
  /** The migration flag to continue on error. */
  continueOnError: Scalars['Boolean'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['String'] | null;
  /** The reason the migration failed. */
  failureReason: Scalars['String'] | null;
  id: Scalars['ID'];
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl: Scalars['URI'] | null;
  /** The migration source. */
  migrationSource: MigrationSource;
  /** The target repository name. */
  repositoryName: Scalars['String'];
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl: Scalars['URI'];
  /** The migration state. */
  state: MigrationState;
  /** The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount: Scalars['Int'];
  __typename: 'RepositoryMigration';
}

/** The connection type for RepositoryMigration. */
export interface RepositoryMigrationConnection {
  /** A list of edges. */
  edges: (RepositoryMigrationEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryMigration | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryMigrationConnection';
}

/** Represents a repository migration. */
export interface RepositoryMigrationEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryMigration | null;
  __typename: 'RepositoryMigrationEdge';
}

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export type RepositoryMigrationOrderDirection = 'ASC' | 'DESC';

/** Properties by which repository migrations can be ordered. */
export type RepositoryMigrationOrderField = 'CREATED_AT';

/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTarget {
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Scalars['String'][];
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: Scalars['String'][];
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected: Scalars['Boolean'];
  __typename: 'RepositoryNameConditionTarget';
}

/** Represents a object that belongs to a repository. */
export type RepositoryNode = (
  | CommitComment
  | CommitCommentThread
  | DependabotUpdate
  | Discussion
  | DiscussionCategory
  | Issue
  | IssueComment
  | PinnedDiscussion
  | PullRequest
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewComment
  | RepositoryVulnerabilityAlert
) & { __isUnion?: true };

/** Properties by which repository connections can be ordered. */
export type RepositoryOrderField =
  | 'CREATED_AT'
  | 'UPDATED_AT'
  | 'PUSHED_AT'
  | 'NAME'
  | 'STARGAZERS';

/** Represents an owner of a Repository. */
export type RepositoryOwner = (Organization | User) & { __isUnion?: true };

/** The access level to a repository */
export type RepositoryPermission = 'ADMIN' | 'MAINTAIN' | 'WRITE' | 'TRIAGE' | 'READ';

/** The privacy of a repository */
export type RepositoryPrivacy = 'PUBLIC' | 'PRIVATE';

/** A repository rule. */
export interface RepositoryRule {
  id: Scalars['ID'];
  /** The parameters for this rule. */
  parameters: RuleParameters | null;
  /** The repository ruleset associated with this rule configuration */
  repositoryRuleset: RepositoryRuleset | null;
  /** The type of rule. */
  type: RepositoryRuleType;
  __typename: 'RepositoryRule';
}

/** Set of conditions that determine if a ruleset will evaluate */
export interface RepositoryRuleConditions {
  /** Configuration for the ref_name condition */
  refName: RefNameConditionTarget | null;
  /** Configuration for the repository_id condition */
  repositoryId: RepositoryIdConditionTarget | null;
  /** Configuration for the repository_name condition */
  repositoryName: RepositoryNameConditionTarget | null;
  __typename: 'RepositoryRuleConditions';
}

/** The connection type for RepositoryRule. */
export interface RepositoryRuleConnection {
  /** A list of edges. */
  edges: (RepositoryRuleEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryRule | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryRuleConnection';
}

/** An edge in a connection. */
export interface RepositoryRuleEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryRule | null;
  __typename: 'RepositoryRuleEdge';
}

/** The rule types supported in rulesets */
export type RepositoryRuleType =
  | 'CREATION'
  | 'UPDATE'
  | 'DELETION'
  | 'REQUIRED_LINEAR_HISTORY'
  | 'MERGE_QUEUE'
  | 'REQUIRED_REVIEW_THREAD_RESOLUTION'
  | 'REQUIRED_DEPLOYMENTS'
  | 'REQUIRED_SIGNATURES'
  | 'PULL_REQUEST'
  | 'REQUIRED_STATUS_CHECKS'
  | 'REQUIRED_WORKFLOW_STATUS_CHECKS'
  | 'NON_FAST_FORWARD'
  | 'AUTHORIZATION'
  | 'TAG'
  | 'MERGE_QUEUE_LOCKED_REF'
  | 'LOCK_BRANCH'
  | 'MAX_REF_UPDATES'
  | 'COMMIT_MESSAGE_PATTERN'
  | 'COMMIT_AUTHOR_EMAIL_PATTERN'
  | 'COMMITTER_EMAIL_PATTERN'
  | 'BRANCH_NAME_PATTERN'
  | 'TAG_NAME_PATTERN'
  | 'WORKFLOWS'
  | 'RULESET_REQUIRED_SIGNATURES'
  | 'SECRET_SCANNING'
  | 'WORKFLOW_UPDATES';

/** A repository ruleset. */
export interface RepositoryRuleset {
  /** The actors that can bypass this ruleset */
  bypassActors: RepositoryRulesetBypassActorConnection | null;
  /** The set of conditions that must evaluate to true for this ruleset to apply */
  conditions: RepositoryRuleConditions;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The enforcement level of this ruleset */
  enforcement: RuleEnforcement;
  id: Scalars['ID'];
  /** Name of the ruleset. */
  name: Scalars['String'];
  /** List of rules. */
  rules: RepositoryRuleConnection | null;
  /** Source of ruleset. */
  source: RuleSource;
  /** Target of the ruleset. */
  target: RepositoryRulesetTarget | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'RepositoryRuleset';
}

/** A team or app that has the ability to bypass a rules defined on a ruleset */
export interface RepositoryRulesetBypassActor {
  /** The actor that can bypass rules. */
  actor: BypassActor | null;
  /** The mode for the bypass actor */
  bypassMode: RepositoryRulesetBypassActorBypassMode | null;
  id: Scalars['ID'];
  /** This actor represents the ability for an organization admin to bypass */
  organizationAdmin: Scalars['Boolean'];
  /** If the actor is a repository role, the repository role's ID that can bypass */
  repositoryRoleDatabaseId: Scalars['Int'] | null;
  /** If the actor is a repository role, the repository role's name that can bypass */
  repositoryRoleName: Scalars['String'] | null;
  /** Identifies the ruleset associated with the allowed actor */
  repositoryRuleset: RepositoryRuleset | null;
  __typename: 'RepositoryRulesetBypassActor';
}

/** The bypass mode for a specific actor on a ruleset. */
export type RepositoryRulesetBypassActorBypassMode = 'ALWAYS' | 'PULL_REQUEST';

/** The connection type for RepositoryRulesetBypassActor. */
export interface RepositoryRulesetBypassActorConnection {
  /** A list of edges. */
  edges: (RepositoryRulesetBypassActorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryRulesetBypassActor | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryRulesetBypassActorConnection';
}

/** An edge in a connection. */
export interface RepositoryRulesetBypassActorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryRulesetBypassActor | null;
  __typename: 'RepositoryRulesetBypassActorEdge';
}

/** The connection type for RepositoryRuleset. */
export interface RepositoryRulesetConnection {
  /** A list of edges. */
  edges: (RepositoryRulesetEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryRuleset | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryRulesetConnection';
}

/** An edge in a connection. */
export interface RepositoryRulesetEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryRuleset | null;
  __typename: 'RepositoryRulesetEdge';
}

/** The targets supported for rulesets */
export type RepositoryRulesetTarget = 'BRANCH' | 'TAG';

/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopic {
  id: Scalars['ID'];
  /** The HTTP path for this repository-topic. */
  resourcePath: Scalars['URI'];
  /** The topic. */
  topic: Topic;
  /** The HTTP URL for this repository-topic. */
  url: Scalars['URI'];
  __typename: 'RepositoryTopic';
}

/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnection {
  /** A list of edges. */
  edges: (RepositoryTopicEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryTopic | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryTopicConnection';
}

/** An edge in a connection. */
export interface RepositoryTopicEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryTopic | null;
  __typename: 'RepositoryTopicEdge';
}

/** The repository's visibility level. */
export type RepositoryVisibility = 'PRIVATE' | 'PUBLIC' | 'INTERNAL';

/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepositoryVisibilityChangeDisableAuditEntry';
}

/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath: Scalars['URI'] | null;
  /** The slug of the enterprise. */
  enterpriseSlug: Scalars['String'] | null;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl: Scalars['URI'] | null;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'RepositoryVisibilityChangeEnableAuditEntry';
}

/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export interface RepositoryVulnerabilityAlert {
  /** When was the alert auto-dismissed? */
  autoDismissedAt: Scalars['DateTime'] | null;
  /** When was the alert created? */
  createdAt: Scalars['DateTime'];
  /** The associated Dependabot update */
  dependabotUpdate: DependabotUpdate | null;
  /** The scope of an alert's dependency */
  dependencyScope: RepositoryVulnerabilityAlertDependencyScope | null;
  /** Comment explaining the reason the alert was dismissed */
  dismissComment: Scalars['String'] | null;
  /** The reason the alert was dismissed */
  dismissReason: Scalars['String'] | null;
  /** When was the alert dismissed? */
  dismissedAt: Scalars['DateTime'] | null;
  /** The user who dismissed the alert */
  dismisser: User | null;
  /** When was the alert fixed? */
  fixedAt: Scalars['DateTime'] | null;
  id: Scalars['ID'];
  /** Identifies the alert number. */
  number: Scalars['Int'];
  /** The associated repository */
  repository: Repository;
  /** The associated security advisory */
  securityAdvisory: SecurityAdvisory | null;
  /** The associated security vulnerability */
  securityVulnerability: SecurityVulnerability | null;
  /** Identifies the state of the alert. */
  state: RepositoryVulnerabilityAlertState;
  /** The vulnerable manifest filename */
  vulnerableManifestFilename: Scalars['String'];
  /** The vulnerable manifest path */
  vulnerableManifestPath: Scalars['String'];
  /** The vulnerable requirements */
  vulnerableRequirements: Scalars['String'] | null;
  __typename: 'RepositoryVulnerabilityAlert';
}

/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnection {
  /** A list of edges. */
  edges: (RepositoryVulnerabilityAlertEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RepositoryVulnerabilityAlert | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RepositoryVulnerabilityAlertConnection';
}

/** The possible scopes of an alert's dependency. */
export type RepositoryVulnerabilityAlertDependencyScope = 'RUNTIME' | 'DEVELOPMENT';

/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RepositoryVulnerabilityAlert | null;
  __typename: 'RepositoryVulnerabilityAlertEdge';
}

/** The possible states of an alert */
export type RepositoryVulnerabilityAlertState = 'OPEN' | 'FIXED' | 'DISMISSED' | 'AUTO_DISMISSED';

/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that is getting requests. */
  pullRequest: PullRequest | null;
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge: UserEdge | null;
  __typename: 'RequestReviewsPayload';
}

/** The possible states that can be requested when creating a check run. */
export type RequestableCheckStatusState =
  | 'QUEUED'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'WAITING'
  | 'PENDING';

/** Types that can be requested reviewers. */
export type RequestedReviewer = (Bot | Mannequin | Team | User) & { __isUnion?: true };

/** The connection type for RequestedReviewer. */
export interface RequestedReviewerConnection {
  /** A list of edges. */
  edges: (RequestedReviewerEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (RequestedReviewer | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'RequestedReviewerConnection';
}

/** An edge in a connection. */
export interface RequestedReviewerEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: RequestedReviewer | null;
  __typename: 'RequestedReviewerEdge';
}

/** Represents a type that can be required by a pull request for merging. */
export type RequirableByPullRequest = (CheckRun | StatusContext) & { __isUnion?: true };

/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParameters {
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: Scalars['String'][];
  __typename: 'RequiredDeploymentsParameters';
}

/** Represents a required status check for a protected branch, but not any specific run of that check. */
export interface RequiredStatusCheckDescription {
  /** The App that must provide this status in order for it to be accepted. */
  app: App | null;
  /** The name of this status. */
  context: Scalars['String'];
  __typename: 'RequiredStatusCheckDescription';
}

/** Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParameters {
  /** Status checks that are required. */
  requiredStatusChecks: StatusCheckConfiguration[];
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
  strictRequiredStatusChecksPolicy: Scalars['Boolean'];
  __typename: 'RequiredStatusChecksParameters';
}

/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayload {
  /** The requested check suite. */
  checkSuite: CheckSuite | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'RerequestCheckSuitePayload';
}

/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The thread to resolve. */
  thread: PullRequestReviewThread | null;
  __typename: 'ResolveReviewThreadPayload';
}

/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContribution {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: User;
  __typename: 'RestrictedContribution';
}

/** Autogenerated return type of RetireSponsorsTier */
export interface RetireSponsorsTierPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The tier that was retired. */
  sponsorsTier: SponsorsTier | null;
  __typename: 'RetireSponsorsTierPayload';
}

/** Autogenerated return type of RevertPullRequest */
export interface RevertPullRequestPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The pull request that was reverted. */
  pullRequest: PullRequest | null;
  /** The new pull request that reverts the input pull request. */
  revertPullRequest: PullRequest | null;
  __typename: 'RevertPullRequestPayload';
}

/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowance {
  /** The actor that can dismiss. */
  actor: ReviewDismissalAllowanceActor | null;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule: BranchProtectionRule | null;
  id: Scalars['ID'];
  __typename: 'ReviewDismissalAllowance';
}

/** Types that can be an actor. */
export type ReviewDismissalAllowanceActor = (App | Team | User) & { __isUnion?: true };

/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnection {
  /** A list of edges. */
  edges: (ReviewDismissalAllowanceEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ReviewDismissalAllowance | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReviewDismissalAllowanceConnection';
}

/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ReviewDismissalAllowance | null;
  __typename: 'ReviewDismissalAllowanceEdge';
}

/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  dismissalMessage: Scalars['String'] | null;
  /** Identifies the optional message associated with the event, rendered to HTML. */
  dismissalMessageHTML: Scalars['String'] | null;
  id: Scalars['ID'];
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  previousReviewState: PullRequestReviewState;
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the commit which caused the review to become stale. */
  pullRequestCommit: PullRequestCommit | null;
  /** The HTTP path for this review dismissed event. */
  resourcePath: Scalars['URI'];
  /** Identifies the review associated with the 'review_dismissed' event. */
  review: PullRequestReview | null;
  /** The HTTP URL for this review dismissed event. */
  url: Scalars['URI'];
  __typename: 'ReviewDismissedEvent';
}

/** A request for a user to review a pull request. */
export interface ReviewRequest {
  /** Whether this request was created for a code owner */
  asCodeOwner: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** Identifies the pull request associated with this review request. */
  pullRequest: PullRequest;
  /** The reviewer that is requested. */
  requestedReviewer: RequestedReviewer | null;
  __typename: 'ReviewRequest';
}

/** The connection type for ReviewRequest. */
export interface ReviewRequestConnection {
  /** A list of edges. */
  edges: (ReviewRequestEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (ReviewRequest | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'ReviewRequestConnection';
}

/** An edge in a connection. */
export interface ReviewRequestEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ReviewRequest | null;
  __typename: 'ReviewRequestEdge';
}

/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer: RequestedReviewer | null;
  __typename: 'ReviewRequestRemovedEvent';
}

/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: PullRequest;
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer: RequestedReviewer | null;
  __typename: 'ReviewRequestedEvent';
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 *
 */
export interface ReviewStatusHovercardContext {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** The current status of the pull request with respect to code review. */
  reviewDecision: PullRequestReviewDecision | null;
  __typename: 'ReviewStatusHovercardContext';
}

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export interface RevokeEnterpriseOrganizationsMigratorRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organizations that had the migrator role revoked for the given user. */
  organizations: OrganizationConnection | null;
  __typename: 'RevokeEnterpriseOrganizationsMigratorRolePayload';
}

/** Autogenerated return type of RevokeMigratorRole */
export interface RevokeMigratorRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Did the operation succeed? */
  success: Scalars['Boolean'] | null;
  __typename: 'RevokeMigratorRolePayload';
}

/** Possible roles a user may have in relation to an organization. */
export type RoleInOrganization = 'OWNER' | 'DIRECT_MEMBER' | 'UNAFFILIATED';

/** The level of enforcement for a rule or ruleset. */
export type RuleEnforcement = 'DISABLED' | 'ACTIVE' | 'EVALUATE';

/** Types which can be parameters for `RepositoryRule` objects. */
export type RuleParameters = (
  | BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters
) & { __isUnion?: true };

/** Types which can have `RepositoryRule` objects. */
export type RuleSource = (Organization | Repository) & { __isUnion?: true };

/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export type SamlDigestAlgorithm = 'SHA1' | 'SHA256' | 'SHA384' | 'SHA512';

/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export type SamlSignatureAlgorithm = 'RSA_SHA1' | 'RSA_SHA256' | 'RSA_SHA384' | 'RSA_SHA512';

/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReply {
  /** The body of the saved reply. */
  body: Scalars['String'];
  /** The saved reply body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The title of the saved reply. */
  title: Scalars['String'];
  /** The user that saved this reply. */
  user: Actor | null;
  __typename: 'SavedReply';
}

/** The connection type for SavedReply. */
export interface SavedReplyConnection {
  /** A list of edges. */
  edges: (SavedReplyEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SavedReply | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SavedReplyConnection';
}

/** An edge in a connection. */
export interface SavedReplyEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SavedReply | null;
  __typename: 'SavedReplyEdge';
}

/** Properties by which saved reply connections can be ordered. */
export type SavedReplyOrderField = 'UPDATED_AT';

/** The results of a search. */
export type SearchResultItem = (
  | App
  | Discussion
  | Issue
  | MarketplaceListing
  | Organization
  | PullRequest
  | Repository
  | User
) & { __isUnion?: true };

/** A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages. */
export interface SearchResultItemConnection {
  /** The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  codeCount: Scalars['Int'];
  /** The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  discussionCount: Scalars['Int'];
  /** A list of edges. */
  edges: (SearchResultItemEdge | null)[] | null;
  /** The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  issueCount: Scalars['Int'];
  /** A list of nodes. */
  nodes: (SearchResultItem | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  repositoryCount: Scalars['Int'];
  /** The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  userCount: Scalars['Int'];
  /** The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  wikiCount: Scalars['Int'];
  __typename: 'SearchResultItemConnection';
}

/** An edge in a connection. */
export interface SearchResultItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SearchResultItem | null;
  /** Text matches on the result found. */
  textMatches: (TextMatch | null)[] | null;
  __typename: 'SearchResultItemEdge';
}

/** Represents the individual results of a search. */
export type SearchType = 'ISSUE' | 'REPOSITORY' | 'USER' | 'DISCUSSION';

/** A GitHub Security Advisory */
export interface SecurityAdvisory {
  /** The classification of the advisory */
  classification: SecurityAdvisoryClassification;
  /** The CVSS associated with this advisory */
  cvss: CVSS;
  /** CWEs associated with this Advisory */
  cwes: CWEConnection;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** This is a long plaintext description of the advisory */
  description: Scalars['String'];
  /** The GitHub Security Advisory ID */
  ghsaId: Scalars['String'];
  id: Scalars['ID'];
  /** A list of identifiers for this advisory */
  identifiers: SecurityAdvisoryIdentifier[];
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink: Scalars['URI'] | null;
  /** The organization that originated the advisory */
  origin: Scalars['String'];
  /** The permalink for the advisory */
  permalink: Scalars['URI'] | null;
  /** When the advisory was published */
  publishedAt: Scalars['DateTime'];
  /** A list of references for this advisory */
  references: SecurityAdvisoryReference[];
  /** The severity of the advisory */
  severity: SecurityAdvisorySeverity;
  /** A short plaintext summary of the advisory */
  summary: Scalars['String'];
  /** When the advisory was last updated */
  updatedAt: Scalars['DateTime'];
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities: SecurityVulnerabilityConnection;
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt: Scalars['DateTime'] | null;
  __typename: 'SecurityAdvisory';
}

/** Classification of the advisory. */
export type SecurityAdvisoryClassification = 'GENERAL' | 'MALWARE';

/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnection {
  /** A list of edges. */
  edges: (SecurityAdvisoryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SecurityAdvisory | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SecurityAdvisoryConnection';
}

/** The possible ecosystems of a security vulnerability's package. */
export type SecurityAdvisoryEcosystem =
  | 'COMPOSER'
  | 'ERLANG'
  | 'ACTIONS'
  | 'GO'
  | 'MAVEN'
  | 'NPM'
  | 'NUGET'
  | 'PIP'
  | 'PUB'
  | 'RUBYGEMS'
  | 'RUST'
  | 'SWIFT';

/** An edge in a connection. */
export interface SecurityAdvisoryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SecurityAdvisory | null;
  __typename: 'SecurityAdvisoryEdge';
}

/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifier {
  /** The identifier type, e.g. GHSA, CVE */
  type: Scalars['String'];
  /** The identifier */
  value: Scalars['String'];
  __typename: 'SecurityAdvisoryIdentifier';
}

/** Identifier formats available for advisories. */
export type SecurityAdvisoryIdentifierType = 'CVE' | 'GHSA';

/** Properties by which security advisory connections can be ordered. */
export type SecurityAdvisoryOrderField = 'PUBLISHED_AT' | 'UPDATED_AT';

/** An individual package */
export interface SecurityAdvisoryPackage {
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem: SecurityAdvisoryEcosystem;
  /** The package name */
  name: Scalars['String'];
  __typename: 'SecurityAdvisoryPackage';
}

/** An individual package version */
export interface SecurityAdvisoryPackageVersion {
  /** The package name or version */
  identifier: Scalars['String'];
  __typename: 'SecurityAdvisoryPackageVersion';
}

/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReference {
  /** A publicly accessible reference */
  url: Scalars['URI'];
  __typename: 'SecurityAdvisoryReference';
}

/** Severity of the vulnerability. */
export type SecurityAdvisorySeverity = 'LOW' | 'MODERATE' | 'HIGH' | 'CRITICAL';

/** An individual vulnerability within an Advisory */
export interface SecurityVulnerability {
  /** The Advisory associated with this Vulnerability */
  advisory: SecurityAdvisory;
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion: SecurityAdvisoryPackageVersion | null;
  /** A description of the vulnerable package */
  package: SecurityAdvisoryPackage;
  /** The severity of the vulnerability within this package */
  severity: SecurityAdvisorySeverity;
  /** When the vulnerability was last updated */
  updatedAt: Scalars['DateTime'];
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   *
   */
  vulnerableVersionRange: Scalars['String'];
  __typename: 'SecurityVulnerability';
}

/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnection {
  /** A list of edges. */
  edges: (SecurityVulnerabilityEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SecurityVulnerability | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SecurityVulnerabilityConnection';
}

/** An edge in a connection. */
export interface SecurityVulnerabilityEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SecurityVulnerability | null;
  __typename: 'SecurityVulnerabilityEdge';
}

/** Properties by which security vulnerability connections can be ordered. */
export type SecurityVulnerabilityOrderField = 'UPDATED_AT';

/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The identity provider for the enterprise. */
  identityProvider: EnterpriseIdentityProvider | null;
  __typename: 'SetEnterpriseIdentityProviderPayload';
}

/** Autogenerated return type of SetOrganizationInteractionLimit */
export interface SetOrganizationInteractionLimitPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organization that the interaction limit was set for. */
  organization: Organization | null;
  __typename: 'SetOrganizationInteractionLimitPayload';
}

/** Autogenerated return type of SetRepositoryInteractionLimit */
export interface SetRepositoryInteractionLimitPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository that the interaction limit was set for. */
  repository: Repository | null;
  __typename: 'SetRepositoryInteractionLimitPayload';
}

/** Autogenerated return type of SetUserInteractionLimit */
export interface SetUserInteractionLimitPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The user that the interaction limit was set for. */
  user: User | null;
  __typename: 'SetUserInteractionLimitPayload';
}

/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignature {
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer: User | null;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
  __typename: 'SmimeSignature';
}

/** Social media profile associated with a user. */
export interface SocialAccount {
  /** Name of the social media account as it appears on the profile. */
  displayName: Scalars['String'];
  /** Software or company that hosts the social media account. */
  provider: SocialAccountProvider;
  /** URL of the social media account. */
  url: Scalars['URI'];
  __typename: 'SocialAccount';
}

/** The connection type for SocialAccount. */
export interface SocialAccountConnection {
  /** A list of edges. */
  edges: (SocialAccountEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SocialAccount | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SocialAccountConnection';
}

/** An edge in a connection. */
export interface SocialAccountEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SocialAccount | null;
  __typename: 'SocialAccountEdge';
}

/** Software or company that hosts social media accounts. */
export type SocialAccountProvider =
  | 'GENERIC'
  | 'FACEBOOK'
  | 'HOMETOWN'
  | 'INSTAGRAM'
  | 'LINKEDIN'
  | 'MASTODON'
  | 'REDDIT'
  | 'TWITCH'
  | 'TWITTER'
  | 'YOUTUBE'
  | 'NPM';

/** Entities that can sponsor others via GitHub Sponsors */
export type Sponsor = (Organization | User) & { __isUnion?: true };

/** The connection type for Sponsor. */
export interface SponsorConnection {
  /** A list of edges. */
  edges: (SponsorEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Sponsor | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SponsorConnection';
}

/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export interface SponsorEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Sponsor | null;
  __typename: 'SponsorEdge';
}

/** Properties by which sponsor connections can be ordered. */
export type SponsorOrderField = 'LOGIN' | 'RELEVANCE';

/** Entities that can sponsor or be sponsored through GitHub Sponsors. */
export type Sponsorable = (Organization | User) & { __isUnion?: true };

/** Entities that can be sponsored via GitHub Sponsors */
export type SponsorableItem = (Organization | User) & { __isUnion?: true };

/** The connection type for SponsorableItem. */
export interface SponsorableItemConnection {
  /** A list of edges. */
  edges: (SponsorableItemEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SponsorableItem | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SponsorableItemConnection';
}

/** An edge in a connection. */
export interface SponsorableItemEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SponsorableItem | null;
  __typename: 'SponsorableItemEdge';
}

/** Properties by which sponsorable connections can be ordered. */
export type SponsorableOrderField = 'LOGIN';

/** An event related to sponsorship activity. */
export interface SponsorsActivity {
  /** What action this activity indicates took place. */
  action: SponsorsActivityAction;
  /** The sponsor's current privacy level. */
  currentPrivacyLevel: SponsorshipPrivacy | null;
  id: Scalars['ID'];
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier: SponsorsTier | null;
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor: Sponsor | null;
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable: Sponsorable;
  /** The associated sponsorship tier. */
  sponsorsTier: SponsorsTier | null;
  /** The timestamp of this event. */
  timestamp: Scalars['DateTime'] | null;
  /** Was this sponsorship made alongside other sponsorships at the same time from the same sponsor? */
  viaBulkSponsorship: Scalars['Boolean'];
  __typename: 'SponsorsActivity';
}

/** The possible actions that GitHub Sponsors activities can represent. */
export type SponsorsActivityAction =
  | 'NEW_SPONSORSHIP'
  | 'CANCELLED_SPONSORSHIP'
  | 'TIER_CHANGE'
  | 'REFUND'
  | 'PENDING_CHANGE'
  | 'SPONSOR_MATCH_DISABLED';

/** The connection type for SponsorsActivity. */
export interface SponsorsActivityConnection {
  /** A list of edges. */
  edges: (SponsorsActivityEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SponsorsActivity | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SponsorsActivityConnection';
}

/** An edge in a connection. */
export interface SponsorsActivityEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SponsorsActivity | null;
  __typename: 'SponsorsActivityEdge';
}

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export type SponsorsActivityOrderField = 'TIMESTAMP';

/** The possible time periods for which Sponsors activities can be requested. */
export type SponsorsActivityPeriod = 'DAY' | 'WEEK' | 'MONTH' | 'ALL';

/** Represents countries or regions for billing and residence for a GitHub Sponsors profile. */
export type SponsorsCountryOrRegionCode =
  | 'AF'
  | 'AX'
  | 'AL'
  | 'DZ'
  | 'AS'
  | 'AD'
  | 'AO'
  | 'AI'
  | 'AQ'
  | 'AG'
  | 'AR'
  | 'AM'
  | 'AW'
  | 'AU'
  | 'AT'
  | 'AZ'
  | 'BS'
  | 'BH'
  | 'BD'
  | 'BB'
  | 'BY'
  | 'BE'
  | 'BZ'
  | 'BJ'
  | 'BM'
  | 'BT'
  | 'BO'
  | 'BQ'
  | 'BA'
  | 'BW'
  | 'BV'
  | 'BR'
  | 'IO'
  | 'BN'
  | 'BG'
  | 'BF'
  | 'BI'
  | 'KH'
  | 'CM'
  | 'CA'
  | 'CV'
  | 'KY'
  | 'CF'
  | 'TD'
  | 'CL'
  | 'CN'
  | 'CX'
  | 'CC'
  | 'CO'
  | 'KM'
  | 'CG'
  | 'CD'
  | 'CK'
  | 'CR'
  | 'CI'
  | 'HR'
  | 'CW'
  | 'CY'
  | 'CZ'
  | 'DK'
  | 'DJ'
  | 'DM'
  | 'DO'
  | 'EC'
  | 'EG'
  | 'SV'
  | 'GQ'
  | 'ER'
  | 'EE'
  | 'ET'
  | 'FK'
  | 'FO'
  | 'FJ'
  | 'FI'
  | 'FR'
  | 'GF'
  | 'PF'
  | 'TF'
  | 'GA'
  | 'GM'
  | 'GE'
  | 'DE'
  | 'GH'
  | 'GI'
  | 'GR'
  | 'GL'
  | 'GD'
  | 'GP'
  | 'GU'
  | 'GT'
  | 'GG'
  | 'GN'
  | 'GW'
  | 'GY'
  | 'HT'
  | 'HM'
  | 'HN'
  | 'HK'
  | 'HU'
  | 'IS'
  | 'IN'
  | 'ID'
  | 'IR'
  | 'IQ'
  | 'IE'
  | 'IM'
  | 'IL'
  | 'IT'
  | 'JM'
  | 'JP'
  | 'JE'
  | 'JO'
  | 'KZ'
  | 'KE'
  | 'KI'
  | 'KR'
  | 'KW'
  | 'KG'
  | 'LA'
  | 'LV'
  | 'LB'
  | 'LS'
  | 'LR'
  | 'LY'
  | 'LI'
  | 'LT'
  | 'LU'
  | 'MO'
  | 'MK'
  | 'MG'
  | 'MW'
  | 'MY'
  | 'MV'
  | 'ML'
  | 'MT'
  | 'MH'
  | 'MQ'
  | 'MR'
  | 'MU'
  | 'YT'
  | 'MX'
  | 'FM'
  | 'MD'
  | 'MC'
  | 'MN'
  | 'ME'
  | 'MS'
  | 'MA'
  | 'MZ'
  | 'MM'
  | 'NA'
  | 'NR'
  | 'NP'
  | 'NL'
  | 'NC'
  | 'NZ'
  | 'NI'
  | 'NE'
  | 'NG'
  | 'NU'
  | 'NF'
  | 'MP'
  | 'NO'
  | 'OM'
  | 'PK'
  | 'PW'
  | 'PS'
  | 'PA'
  | 'PG'
  | 'PY'
  | 'PE'
  | 'PH'
  | 'PN'
  | 'PL'
  | 'PT'
  | 'PR'
  | 'QA'
  | 'RE'
  | 'RO'
  | 'RU'
  | 'RW'
  | 'BL'
  | 'SH'
  | 'KN'
  | 'LC'
  | 'MF'
  | 'PM'
  | 'VC'
  | 'WS'
  | 'SM'
  | 'ST'
  | 'SA'
  | 'SN'
  | 'RS'
  | 'SC'
  | 'SL'
  | 'SG'
  | 'SX'
  | 'SK'
  | 'SI'
  | 'SB'
  | 'SO'
  | 'ZA'
  | 'GS'
  | 'SS'
  | 'ES'
  | 'LK'
  | 'SD'
  | 'SR'
  | 'SJ'
  | 'SZ'
  | 'SE'
  | 'CH'
  | 'TW'
  | 'TJ'
  | 'TZ'
  | 'TH'
  | 'TL'
  | 'TG'
  | 'TK'
  | 'TO'
  | 'TT'
  | 'TN'
  | 'TR'
  | 'TM'
  | 'TC'
  | 'TV'
  | 'UG'
  | 'UA'
  | 'AE'
  | 'GB'
  | 'UM'
  | 'US'
  | 'UY'
  | 'UZ'
  | 'VU'
  | 'VA'
  | 'VE'
  | 'VN'
  | 'VG'
  | 'VI'
  | 'WF'
  | 'EH'
  | 'YE'
  | 'ZM'
  | 'ZW';

/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export interface SponsorsGoal {
  /** A description of the goal from the maintainer. */
  description: Scalars['String'] | null;
  /** What the objective of this goal is. */
  kind: SponsorsGoalKind;
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete: Scalars['Int'];
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue: Scalars['Int'];
  /** A brief summary of the kind and target value of this goal. */
  title: Scalars['String'];
  __typename: 'SponsorsGoal';
}

/** The different kinds of goals a GitHub Sponsors member can have. */
export type SponsorsGoalKind = 'TOTAL_SPONSORS_COUNT' | 'MONTHLY_SPONSORSHIP_AMOUNT';

/** A GitHub Sponsors listing. */
export interface SponsorsListing {
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal: SponsorsGoal | null;
  /** The Stripe Connect account currently in use for payouts for this Sponsors listing, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  activeStripeConnectAccount: StripeConnectAccount | null;
  /** The name of the country or region with the maintainer's bank account or fiscal host. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion: Scalars['String'] | null;
  /** The email address used by GitHub to contact the sponsorable about their GitHub Sponsors profile. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  contactEmailAddress: Scalars['String'] | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
  dashboardResourcePath: Scalars['URI'];
  /** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
  dashboardUrl: Scalars['URI'];
  /** The records featured on the GitHub Sponsors profile. */
  featuredItems: SponsorsListingFeaturedItem[];
  /** The fiscal host used for payments, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  fiscalHost: Organization | null;
  /** The full description of the listing. */
  fullDescription: Scalars['String'];
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML: Scalars['HTML'];
  id: Scalars['ID'];
  /** Whether this listing is publicly visible. */
  isPublic: Scalars['Boolean'];
  /** The listing's full name. */
  name: Scalars['String'];
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate: Scalars['Date'] | null;
  /** The name of the country or region where the maintainer resides. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  residenceCountryOrRegion: Scalars['String'] | null;
  /** The HTTP path for this Sponsors listing. */
  resourcePath: Scalars['URI'];
  /** The short description of the listing. */
  shortDescription: Scalars['String'];
  /** The short name of the listing. */
  slug: Scalars['String'];
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable: Sponsorable;
  /** The tiers for this GitHub Sponsors profile. */
  tiers: SponsorsTierConnection | null;
  /** The HTTP URL for this Sponsors listing. */
  url: Scalars['URI'];
  __typename: 'SponsorsListing';
}

/** A record that can be featured on a GitHub Sponsors profile. */
export type SponsorsListingFeatureableItem = (Repository | User) & { __isUnion?: true };

/** A record that is promoted on a GitHub Sponsors profile. */
export interface SponsorsListingFeaturedItem {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Will either be a description from the sponsorable maintainer about why they featured this item, or the item's description itself, such as a user's bio from their GitHub profile page. */
  description: Scalars['String'] | null;
  /** The record that is featured on the GitHub Sponsors profile. */
  featureable: SponsorsListingFeatureableItem;
  id: Scalars['ID'];
  /** The position of this featured item on the GitHub Sponsors profile with a lower position indicating higher precedence. Starts at 1. */
  position: Scalars['Int'];
  /** The GitHub Sponsors profile that features this record. */
  sponsorsListing: SponsorsListing;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'SponsorsListingFeaturedItem';
}

/** The different kinds of records that can be featured on a GitHub Sponsors profile page. */
export type SponsorsListingFeaturedItemFeatureableType = 'REPOSITORY' | 'USER';

/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTier {
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo: SponsorsTierAdminInfo | null;
  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */
  closestLesserValueTier: SponsorsTier | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The description of the tier. */
  description: Scalars['String'];
  /** The tier description rendered to HTML */
  descriptionHTML: Scalars['HTML'];
  id: Scalars['ID'];
  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount: Scalars['Boolean'];
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime: Scalars['Boolean'];
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents: Scalars['Int'];
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars: Scalars['Int'];
  /** The name of the tier. */
  name: Scalars['String'];
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing: SponsorsListing;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'SponsorsTier';
}

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfo {
  /** Indicates whether this tier is still a work in progress by the sponsorable and not yet published to the associated GitHub Sponsors profile. Draft tiers cannot be used for new sponsorships and will not be in use on existing sponsorships. Draft tiers cannot be seen by anyone but the admins of the GitHub Sponsors profile. */
  isDraft: Scalars['Boolean'];
  /** Indicates whether this tier is published to the associated GitHub Sponsors profile. Published tiers are visible to anyone who can see the GitHub Sponsors profile, and are available for use in sponsorships if the GitHub Sponsors profile is publicly visible. */
  isPublished: Scalars['Boolean'];
  /** Indicates whether this tier has been retired from the associated GitHub Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors profile and cannot be chosen for new sponsorships. Existing sponsorships may still use retired tiers if the sponsor selected the tier before it was retired. */
  isRetired: Scalars['Boolean'];
  /** The sponsorships using this tier. */
  sponsorships: SponsorshipConnection;
  __typename: 'SponsorsTierAdminInfo';
}

/** The connection type for SponsorsTier. */
export interface SponsorsTierConnection {
  /** A list of edges. */
  edges: (SponsorsTierEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SponsorsTier | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SponsorsTierConnection';
}

/** An edge in a connection. */
export interface SponsorsTierEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SponsorsTier | null;
  __typename: 'SponsorsTierEdge';
}

/** Properties by which Sponsors tiers connections can be ordered. */
export type SponsorsTierOrderField = 'CREATED_AT' | 'MONTHLY_PRICE_IN_CENTS';

/** A sponsorship relationship between a sponsor and a maintainer */
export interface Sponsorship {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Whether the sponsorship is active. False implies the sponsor is a past sponsor of the maintainer, while true implies they are a current sponsor. */
  isActive: Scalars['Boolean'];
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment: Scalars['Boolean'];
  /** Whether the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail: Scalars['Boolean'] | null;
  /**
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   * The entity that is being sponsored
   */
  maintainer: User;
  /** The privacy level for this sponsorship. */
  privacyLevel: SponsorshipPrivacy;
  /**
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   */
  sponsor: User | null;
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity: Sponsor | null;
  /** The entity that is being sponsored */
  sponsorable: Sponsorable;
  /** The associated sponsorship tier */
  tier: SponsorsTier | null;
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt: Scalars['DateTime'] | null;
  __typename: 'Sponsorship';
}

/** The connection type for Sponsorship. */
export interface SponsorshipConnection {
  /** A list of edges. */
  edges: (SponsorshipEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Sponsorship | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents: Scalars['Int'];
  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars: Scalars['Int'];
  __typename: 'SponsorshipConnection';
}

/** An edge in a connection. */
export interface SponsorshipEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Sponsorship | null;
  __typename: 'SponsorshipEdge';
}

/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export interface SponsorshipNewsletter {
  /** The author of the newsletter. */
  author: User | null;
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished: Scalars['Boolean'];
  /** The user or organization this newsletter is from. */
  sponsorable: Sponsorable;
  /** The subject of the newsletter, what it's about. */
  subject: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'SponsorshipNewsletter';
}

/** The connection type for SponsorshipNewsletter. */
export interface SponsorshipNewsletterConnection {
  /** A list of edges. */
  edges: (SponsorshipNewsletterEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (SponsorshipNewsletter | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SponsorshipNewsletterConnection';
}

/** An edge in a connection. */
export interface SponsorshipNewsletterEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SponsorshipNewsletter | null;
  __typename: 'SponsorshipNewsletterEdge';
}

/** Properties by which sponsorship update connections can be ordered. */
export type SponsorshipNewsletterOrderField = 'CREATED_AT';

/** Properties by which sponsorship connections can be ordered. */
export type SponsorshipOrderField = 'CREATED_AT';

/** The privacy of a sponsorship */
export type SponsorshipPrivacy = 'PUBLIC' | 'PRIVATE';

/** The possible default commit messages for squash merges. */
export type SquashMergeCommitMessage = 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';

/** The possible default commit titles for squash merges. */
export type SquashMergeCommitTitle = 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';

/** Represents an SSH signature on a Commit or Tag. */
export interface SshSignature {
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Hex-encoded fingerprint of the key that signed this object. */
  keyFingerprint: Scalars['String'] | null;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer: User | null;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
  __typename: 'SshSignature';
}

/** Properties by which star connections can be ordered. */
export type StarOrderField = 'STARRED_AT';

/** The connection type for User. */
export interface StargazerConnection {
  /** A list of edges. */
  edges: (StargazerEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'StargazerConnection';
}

/** Represents a user that's starred a repository. */
export interface StargazerEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: User;
  /** Identifies when the item was starred. */
  starredAt: Scalars['DateTime'];
  __typename: 'StargazerEdge';
}

/** Things that can be starred. */
export type Starrable = (Gist | Repository | Topic) & { __isUnion?: true };

/** The connection type for Repository. */
export interface StarredRepositoryConnection {
  /** A list of edges. */
  edges: (StarredRepositoryEdge | null)[] | null;
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit: Scalars['Boolean'];
  /** A list of nodes. */
  nodes: (Repository | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'StarredRepositoryConnection';
}

/** Represents a starred repository. */
export interface StarredRepositoryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Repository;
  /** Identifies when the item was starred. */
  starredAt: Scalars['DateTime'];
  __typename: 'StarredRepositoryEdge';
}

/** Autogenerated return type of StartOrganizationMigration */
export interface StartOrganizationMigrationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new organization migration. */
  orgMigration: OrganizationMigration | null;
  __typename: 'StartOrganizationMigrationPayload';
}

/** Autogenerated return type of StartRepositoryMigration */
export interface StartRepositoryMigrationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The new repository migration. */
  repositoryMigration: RepositoryMigration | null;
  __typename: 'StartRepositoryMigrationPayload';
}

/** Represents a commit status. */
export interface Status {
  /** A list of status contexts and check runs for this commit. */
  combinedContexts: StatusCheckRollupContextConnection;
  /** The commit this status is attached to. */
  commit: Commit | null;
  /** Looks up an individual status context by context name. */
  context: StatusContext | null;
  /** The individual status contexts for this commit. */
  contexts: StatusContext[];
  id: Scalars['ID'];
  /** The combined commit status. */
  state: StatusState;
  __typename: 'Status';
}

/** Required status check */
export interface StatusCheckConfiguration {
  /** The status check context name that must be present on the commit. */
  context: Scalars['String'];
  /** The optional integration ID that this status check must originate from. */
  integrationId: Scalars['Int'] | null;
  __typename: 'StatusCheckConfiguration';
}

/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollup {
  /** The commit the status and check runs are attached to. */
  commit: Commit | null;
  /** A list of status contexts and check runs for this commit. */
  contexts: StatusCheckRollupContextConnection;
  id: Scalars['ID'];
  /** The combined status for the commit. */
  state: StatusState;
  __typename: 'StatusCheckRollup';
}

/** Types that can be inside a StatusCheckRollup context. */
export type StatusCheckRollupContext = (CheckRun | StatusContext) & { __isUnion?: true };

/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnection {
  /** The number of check runs in this rollup. */
  checkRunCount: Scalars['Int'];
  /** Counts of check runs by state. */
  checkRunCountsByState: CheckRunStateCount[] | null;
  /** A list of edges. */
  edges: (StatusCheckRollupContextEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (StatusCheckRollupContext | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The number of status contexts in this rollup. */
  statusContextCount: Scalars['Int'];
  /** Counts of status contexts by state. */
  statusContextCountsByState: StatusContextStateCount[] | null;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'StatusCheckRollupContextConnection';
}

/** An edge in a connection. */
export interface StatusCheckRollupContextEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: StatusCheckRollupContext | null;
  __typename: 'StatusCheckRollupContextEdge';
}

/** Represents an individual commit status context */
export interface StatusContext {
  /** The avatar of the OAuth application or the user that created the status */
  avatarUrl: Scalars['URI'] | null;
  /** This commit this status context is attached to. */
  commit: Commit | null;
  /** The name of this status context. */
  context: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The actor who created this status context. */
  creator: Actor | null;
  /** The description for this status context. */
  description: Scalars['String'] | null;
  id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars['Boolean'];
  /** The state of this status context. */
  state: StatusState;
  /** The URL for this status context. */
  targetUrl: Scalars['URI'] | null;
  __typename: 'StatusContext';
}

/** Represents a count of the state of a status context. */
export interface StatusContextStateCount {
  /** The number of statuses with this state. */
  count: Scalars['Int'];
  /** The state of a status context. */
  state: StatusState;
  __typename: 'StatusContextStateCount';
}

/** The possible commit status states. */
export type StatusState = 'EXPECTED' | 'ERROR' | 'FAILURE' | 'PENDING' | 'SUCCESS';

/** A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors. */
export interface StripeConnectAccount {
  /** The account number used to identify this Stripe Connect account. */
  accountId: Scalars['String'];
  /** The name of the country or region of an external account, such as a bank account, tied to the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion: Scalars['String'] | null;
  /** The name of the country or region of the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization. */
  countryOrRegion: Scalars['String'] | null;
  /** Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile. */
  isActive: Scalars['Boolean'];
  /** The GitHub Sponsors profile associated with this Stripe Connect account. */
  sponsorsListing: SponsorsListing;
  /** The URL to access this Stripe Connect account on Stripe's website. */
  stripeDashboardUrl: Scalars['URI'];
  __typename: 'StripeConnectAccount';
}

/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The submitted pull request review. */
  pullRequestReview: PullRequestReview | null;
  __typename: 'SubmitPullRequestReviewPayload';
}

/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface Submodule {
  /** The branch of the upstream submodule for tracking updates */
  branch: Scalars['String'] | null;
  /** The git URL of the submodule repository */
  gitUrl: Scalars['URI'];
  /** The name of the submodule in .gitmodules */
  name: Scalars['String'];
  /** The name of the submodule in .gitmodules (Base64-encoded) */
  nameRaw: Scalars['Base64String'];
  /** The path in the superproject that this submodule is located in */
  path: Scalars['String'];
  /** The path in the superproject that this submodule is located in (Base64-encoded) */
  pathRaw: Scalars['Base64String'];
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid: Scalars['GitObjectID'] | null;
  __typename: 'Submodule';
}

/** The connection type for Submodule. */
export interface SubmoduleConnection {
  /** A list of edges. */
  edges: (SubmoduleEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Submodule | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'SubmoduleConnection';
}

/** An edge in a connection. */
export interface SubmoduleEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Submodule | null;
  __typename: 'SubmoduleEdge';
}

/** Entities that can be subscribed to for web and email notifications. */
export type Subscribable = (
  | Commit
  | Discussion
  | Issue
  | PullRequest
  | Repository
  | Team
  | TeamDiscussion
) & { __isUnion?: true };

/** Entities that can be subscribed to for web and email notifications. */
export type SubscribableThread = Issue & { __isUnion?: true };

/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Object referenced by event. */
  subscribable: Subscribable;
  __typename: 'SubscribedEvent';
}

/** The possible states of a subscription. */
export type SubscriptionState = 'UNSUBSCRIBED' | 'SUBSCRIBED' | 'IGNORED';

/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewer {
  /** Is this suggestion based on past commits? */
  isAuthor: Scalars['Boolean'];
  /** Is this suggestion based on past review comments? */
  isCommenter: Scalars['Boolean'];
  /** Identifies the user suggested to review the pull request. */
  reviewer: User;
  __typename: 'SuggestedReviewer';
}

/** Represents a Git tag. */
export interface Tag {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['URI'];
  id: Scalars['ID'];
  /** The Git tag message. */
  message: Scalars['String'] | null;
  /** The Git tag name. */
  name: Scalars['String'];
  /** The Git object ID */
  oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Repository;
  /** Details about the tag author. */
  tagger: GitActor | null;
  /** The Git object the tag points to. */
  target: GitObject;
  __typename: 'Tag';
}

/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParameters {
  /** How this rule will appear to users. */
  name: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate: Scalars['Boolean'];
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
  __typename: 'TagNamePatternParameters';
}

/** A team of users in an organization. */
export interface Team {
  /** A list of teams that are ancestors of this team. */
  ancestors: TeamConnection;
  /** A URL pointing to the team's avatar. */
  avatarUrl: Scalars['URI'] | null;
  /** List of child teams belonging to this team */
  childTeams: TeamConnection;
  /** The slug corresponding to the organization and team. */
  combinedSlug: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The description of the team. */
  description: Scalars['String'] | null;
  /** Find a team discussion by its number. */
  discussion: TeamDiscussion | null;
  /** A list of team discussions. */
  discussions: TeamDiscussionConnection;
  /** The HTTP path for team discussions */
  discussionsResourcePath: Scalars['URI'];
  /** The HTTP URL for team discussions */
  discussionsUrl: Scalars['URI'];
  /** The HTTP path for editing this team */
  editTeamResourcePath: Scalars['URI'];
  /** The HTTP URL for editing this team */
  editTeamUrl: Scalars['URI'];
  id: Scalars['ID'];
  /** A list of pending invitations for users to this team */
  invitations: OrganizationInvitationConnection | null;
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: UserStatusConnection;
  /** A list of users who are members of this team. */
  members: TeamMemberConnection;
  /** The HTTP path for the team' members */
  membersResourcePath: Scalars['URI'];
  /** The HTTP URL for the team' members */
  membersUrl: Scalars['URI'];
  /** The name of the team. */
  name: Scalars['String'];
  /** The HTTP path creating a new team */
  newTeamResourcePath: Scalars['URI'];
  /** The HTTP URL creating a new team */
  newTeamUrl: Scalars['URI'];
  /** The notification setting that the team has set. */
  notificationSetting: TeamNotificationSetting;
  /** The organization that owns this team. */
  organization: Organization;
  /** The parent team of the team. */
  parentTeam: Team | null;
  /** The level of privacy the team has. */
  privacy: TeamPrivacy;
  /** Finds and returns the project according to the provided project number. */
  projectV2: ProjectV2 | null;
  /** List of projects this team has collaborator access to. */
  projectsV2: ProjectV2Connection;
  /** A list of repositories this team has access to. */
  repositories: TeamRepositoryConnection;
  /** The HTTP path for this team's repositories */
  repositoriesResourcePath: Scalars['URI'];
  /** The HTTP URL for this team's repositories */
  repositoriesUrl: Scalars['URI'];
  /** The HTTP path for this team */
  resourcePath: Scalars['URI'];
  /** The slug corresponding to the team. */
  slug: Scalars['String'];
  /** The HTTP path for this team's teams */
  teamsResourcePath: Scalars['URI'];
  /** The HTTP URL for this team's teams */
  teamsUrl: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this team */
  url: Scalars['URI'];
  /** Team is adminable by the viewer. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  __typename: 'Team';
}

/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped: Scalars['Boolean'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'TeamAddMemberAuditEntry';
}

/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped: Scalars['Boolean'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'TeamAddRepositoryAuditEntry';
}

/** Metadata for an audit entry with action team.* */
export type TeamAuditEntryData = (
  | OrgRestoreMemberMembershipTeamAuditEntryData
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
) & { __isUnion?: true };

/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped: Scalars['Boolean'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The new parent team. */
  parentTeam: Team | null;
  /** The name of the new parent team */
  parentTeamName: Scalars['String'] | null;
  /** The name of the former parent team */
  parentTeamNameWas: Scalars['String'] | null;
  /** The HTTP path for the parent team */
  parentTeamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the parent team */
  parentTeamUrl: Scalars['URI'] | null;
  /** The former parent team. */
  parentTeamWas: Team | null;
  /** The HTTP path for the previous parent team */
  parentTeamWasResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the previous parent team */
  parentTeamWasUrl: Scalars['URI'] | null;
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'TeamChangeParentTeamAuditEntry';
}

/** The connection type for Team. */
export interface TeamConnection {
  /** A list of edges. */
  edges: (TeamEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Team | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'TeamConnection';
}

/** A team discussion. */
export interface TeamDiscussion {
  /** The actor who authored the comment. */
  author: Actor | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Author's association with the discussion's team.
   */
  authorAssociation: CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the discussion body hash.
   */
  bodyVersion: Scalars['String'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * A list of comments on this discussion.
   */
  comments: TeamDiscussionCommentConnection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for discussion comments
   */
  commentsResourcePath: Scalars['URI'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for discussion comments
   */
  commentsUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the discussion is pinned.
   */
  isPinned: Scalars['Boolean'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the discussion is only visible to team members and org admins.
   */
  isPrivate: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the discussion within its team.
   */
  number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for this discussion
   */
  resourcePath: Scalars['URI'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The team that defines the context of this discussion.
   */
  team: Team;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The title of the discussion
   */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for this discussion
   */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the current viewer can pin this discussion.
   */
  viewerCanPin: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription: SubscriptionState | null;
  __typename: 'TeamDiscussion';
}

/** A comment on a team discussion. */
export interface TeamDiscussionComment {
  /** The actor who authored the comment. */
  author: Actor | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Author's association with the comment's team.
   */
  authorAssociation: CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The current version of the body content.
   */
  bodyVersion: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The discussion this comment is about.
   */
  discussion: TeamDiscussion;
  /** The actor who edited the comment. */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt: Scalars['DateTime'] | null;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the comment number.
   */
  number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  publishedAt: Scalars['DateTime'] | null;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups: ReactionGroup[] | null;
  /** A list of Reactions left on the Issue. */
  reactions: ReactionConnection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for this comment
   */
  resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for this comment
   */
  url: Scalars['URI'];
  /** A list of edits to this content. */
  userContentEdits: UserContentEditConnection | null;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  __typename: 'TeamDiscussionComment';
}

/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnection {
  /** A list of edges. */
  edges: (TeamDiscussionCommentEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (TeamDiscussionComment | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'TeamDiscussionCommentConnection';
}

/** An edge in a connection. */
export interface TeamDiscussionCommentEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TeamDiscussionComment | null;
  __typename: 'TeamDiscussionCommentEdge';
}

/** Properties by which team discussion comment connections can be ordered. */
export type TeamDiscussionCommentOrderField = 'NUMBER';

/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnection {
  /** A list of edges. */
  edges: (TeamDiscussionEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (TeamDiscussion | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'TeamDiscussionConnection';
}

/** An edge in a connection. */
export interface TeamDiscussionEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TeamDiscussion | null;
  __typename: 'TeamDiscussionEdge';
}

/** Properties by which team discussion connections can be ordered. */
export type TeamDiscussionOrderField = 'CREATED_AT';

/** An edge in a connection. */
export interface TeamEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Team | null;
  __typename: 'TeamEdge';
}

/** The connection type for User. */
export interface TeamMemberConnection {
  /** A list of edges. */
  edges: (TeamMemberEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'TeamMemberConnection';
}

/** Represents a user who is a member of a team. */
export interface TeamMemberEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath: Scalars['URI'];
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl: Scalars['URI'];
  node: User;
  /** The role the member has on the team. */
  role: TeamMemberRole;
  __typename: 'TeamMemberEdge';
}

/** Properties by which team member connections can be ordered. */
export type TeamMemberOrderField = 'LOGIN' | 'CREATED_AT';

/** The possible team member roles; either 'maintainer' or 'member'. */
export type TeamMemberRole = 'MAINTAINER' | 'MEMBER';

/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export type TeamMembershipType = 'IMMEDIATE' | 'CHILD_TEAM' | 'ALL';

/** The possible team notification values. */
export type TeamNotificationSetting = 'NOTIFICATIONS_ENABLED' | 'NOTIFICATIONS_DISABLED';

/** Properties by which team connections can be ordered. */
export type TeamOrderField = 'NAME';

/** The possible team privacy values. */
export type TeamPrivacy = 'SECRET' | 'VISIBLE';

/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped: Scalars['Boolean'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'TeamRemoveMemberAuditEntry';
}

/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntry {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor: AuditEntryActor | null;
  /** The IP address of the actor */
  actorIp: Scalars['String'] | null;
  /** A readable representation of the actor's location */
  actorLocation: ActorLocation | null;
  /** The username of the user who initiated the action */
  actorLogin: Scalars['String'] | null;
  /** The HTTP path for the actor. */
  actorResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the actor. */
  actorUrl: Scalars['URI'] | null;
  /** The time the action was initiated */
  createdAt: Scalars['PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped: Scalars['Boolean'] | null;
  /** The corresponding operation type for the action */
  operationType: OperationType | null;
  /** The Organization associated with the Audit Entry. */
  organization: Organization | null;
  /** The name of the Organization. */
  organizationName: Scalars['String'] | null;
  /** The HTTP path for the organization */
  organizationResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the organization */
  organizationUrl: Scalars['URI'] | null;
  /** The repository associated with the action */
  repository: Repository | null;
  /** The name of the repository */
  repositoryName: Scalars['String'] | null;
  /** The HTTP path for the repository */
  repositoryResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the repository */
  repositoryUrl: Scalars['URI'] | null;
  /** The team associated with the action */
  team: Team | null;
  /** The name of the team */
  teamName: Scalars['String'] | null;
  /** The HTTP path for this team */
  teamResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for this team */
  teamUrl: Scalars['URI'] | null;
  /** The user affected by the action */
  user: User | null;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin: Scalars['String'] | null;
  /** The HTTP path for the user. */
  userResourcePath: Scalars['URI'] | null;
  /** The HTTP URL for the user. */
  userUrl: Scalars['URI'] | null;
  __typename: 'TeamRemoveRepositoryAuditEntry';
}

/** The connection type for Repository. */
export interface TeamRepositoryConnection {
  /** A list of edges. */
  edges: (TeamRepositoryEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (Repository | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'TeamRepositoryConnection';
}

/** Represents a team repository. */
export interface TeamRepositoryEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Repository;
  /** The permission level the team has on the repository */
  permission: RepositoryPermission;
  __typename: 'TeamRepositoryEdge';
}

/** Properties by which team repository connections can be ordered. */
export type TeamRepositoryOrderField =
  | 'CREATED_AT'
  | 'UPDATED_AT'
  | 'PUSHED_AT'
  | 'NAME'
  | 'PERMISSION'
  | 'STARGAZERS';

/** The role of a user on a team. */
export type TeamRole = 'ADMIN' | 'MEMBER';

/** A text match within a search result. */
export interface TextMatch {
  /** The specific text fragment within the property matched on. */
  fragment: Scalars['String'];
  /** Highlights within the matched fragment. */
  highlights: TextMatchHighlight[];
  /** The property matched on. */
  property: Scalars['String'];
  __typename: 'TextMatch';
}

/** Represents a single highlight in a search result match. */
export interface TextMatchHighlight {
  /** The indice in the fragment where the matched text begins. */
  beginIndice: Scalars['Int'];
  /** The indice in the fragment where the matched text ends. */
  endIndice: Scalars['Int'];
  /** The text matched. */
  text: Scalars['String'];
  __typename: 'TextMatchHighlight';
}

/** The possible states of a thread subscription form action */
export type ThreadSubscriptionFormAction = 'NONE' | 'SUBSCRIBE' | 'UNSUBSCRIBE';

/** The possible states of a subscription. */
export type ThreadSubscriptionState =
  | 'UNAVAILABLE'
  | 'DISABLED'
  | 'IGNORING_LIST'
  | 'SUBSCRIBED_TO_THREAD_EVENTS'
  | 'IGNORING_THREAD'
  | 'SUBSCRIBED_TO_LIST'
  | 'SUBSCRIBED_TO_THREAD_TYPE'
  | 'SUBSCRIBED_TO_THREAD'
  | 'NONE';

/** A topic aggregates entities that are related to a subject. */
export interface Topic {
  id: Scalars['ID'];
  /** The topic's name. */
  name: Scalars['String'];
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   *
   */
  relatedTopics: Topic[];
  /** A list of repositories. */
  repositories: RepositoryConnection;
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: StargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
  __typename: 'Topic';
}

/** Metadata for an audit entry with a topic. */
export type TopicAuditEntryData = (RepoAddTopicAuditEntry | RepoRemoveTopicAuditEntry) & {
  __isUnion?: true;
};

/** Reason that the suggested topic is declined. */
export type TopicSuggestionDeclineReason =
  | 'NOT_RELEVANT'
  | 'TOO_SPECIFIC'
  | 'PERSONAL_PREFERENCE'
  | 'TOO_GENERAL';

/** The possible states of a tracked issue. */
export type TrackedIssueStates = 'OPEN' | 'CLOSED';

/** Autogenerated return type of TransferEnterpriseOrganization */
export interface TransferEnterpriseOrganizationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organization for which a transfer was initiated. */
  organization: Organization | null;
  __typename: 'TransferEnterpriseOrganizationPayload';
}

/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was transferred */
  issue: Issue | null;
  __typename: 'TransferIssuePayload';
}

/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The repository this came from */
  fromRepository: Repository | null;
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Issue;
  __typename: 'TransferredEvent';
}

/** Represents a Git tree. */
export interface Tree {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['URI'];
  /** A list of tree entries. */
  entries: TreeEntry[] | null;
  id: Scalars['ID'];
  /** The Git object ID */
  oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Repository;
  __typename: 'Tree';
}

/** Represents a Git tree entry. */
export interface TreeEntry {
  /** The extension of the file */
  extension: Scalars['String'] | null;
  /** Whether or not this tree entry is generated */
  isGenerated: Scalars['Boolean'];
  /** The programming language this file is written in. */
  language: Language | null;
  /** Number of lines in the file. */
  lineCount: Scalars['Int'] | null;
  /** Entry file mode. */
  mode: Scalars['Int'];
  /** Entry file name. */
  name: Scalars['String'];
  /** Entry file name. (Base64-encoded) */
  nameRaw: Scalars['Base64String'];
  /** Entry file object. */
  object: GitObject | null;
  /** Entry file Git object ID. */
  oid: Scalars['GitObjectID'];
  /** The full path of the file. */
  path: Scalars['String'] | null;
  /** The full path of the file. (Base64-encoded) */
  pathRaw: Scalars['Base64String'] | null;
  /** The Repository the tree entry belongs to */
  repository: Repository;
  /** Entry byte size */
  size: Scalars['Int'];
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule: Submodule | null;
  /** Entry file type. */
  type: Scalars['String'];
  __typename: 'TreeEntry';
}

/** Autogenerated return type of UnarchiveProjectV2Item */
export interface UnarchiveProjectV2ItemPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item unarchived from the project. */
  item: ProjectV2Item | null;
  __typename: 'UnarchiveProjectV2ItemPayload';
}

/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository that was unarchived. */
  repository: Repository | null;
  __typename: 'UnarchiveRepositoryPayload';
}

/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the assignable associated with the event. */
  assignable: Assignable;
  /** Identifies the user or mannequin that was unassigned. */
  assignee: Assignee | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   * Identifies the subject (user) who was unassigned.
   */
  user: User | null;
  __typename: 'UnassignedEvent';
}

/** Autogenerated return type of UnfollowOrganization */
export interface UnfollowOrganizationPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The organization that was unfollowed. */
  organization: Organization | null;
  __typename: 'UnfollowOrganizationPayload';
}

/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The user that was unfollowed. */
  user: User | null;
  __typename: 'UnfollowUserPayload';
}

/** Represents a type that can be retrieved by a URL. */
export type UniformResourceLocatable = (
  | Bot
  | CheckRun
  | ClosedEvent
  | Commit
  | ConvertToDraftEvent
  | CrossReferencedEvent
  | Gist
  | Issue
  | Mannequin
  | MergedEvent
  | Milestone
  | Organization
  | PullRequest
  | PullRequestCommit
  | ReadyForReviewEvent
  | Release
  | Repository
  | RepositoryTopic
  | ReviewDismissedEvent
  | TeamDiscussion
  | TeamDiscussionComment
  | User
  | Workflow
  | WorkflowRun
  | WorkflowRunFile
) & { __isUnion?: true };

/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignature {
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer: User | null;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
  __typename: 'UnknownSignature';
}

/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the label associated with the 'unlabeled' event. */
  label: Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Labelable;
  __typename: 'UnlabeledEvent';
}

/** Autogenerated return type of UnlinkProjectV2FromRepository */
export interface UnlinkProjectV2FromRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository the project is no longer linked to. */
  repository: Repository | null;
  __typename: 'UnlinkProjectV2FromRepositoryPayload';
}

/** Autogenerated return type of UnlinkProjectV2FromTeam */
export interface UnlinkProjectV2FromTeamPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The team the project is unlinked from */
  team: Team | null;
  __typename: 'UnlinkProjectV2FromTeamPayload';
}

/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The linked Project. */
  project: Project | null;
  /** The linked Repository. */
  repository: Repository | null;
  __typename: 'UnlinkRepositoryFromProjectPayload';
}

/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The item that was unlocked. */
  unlockedRecord: Lockable | null;
  __typename: 'UnlockLockablePayload';
}

/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Object that was unlocked. */
  lockable: Lockable;
  __typename: 'UnlockedEvent';
}

/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
export interface UnmarkDiscussionCommentAsAnswerPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The discussion that includes the comment. */
  discussion: Discussion | null;
  __typename: 'UnmarkDiscussionCommentAsAnswerPayload';
}

/** Autogenerated return type of UnmarkFileAsViewed */
export interface UnmarkFileAsViewedPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated pull request. */
  pullRequest: PullRequest | null;
  __typename: 'UnmarkFileAsViewedPayload';
}

/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue or pull request that was marked as a duplicate. */
  duplicate: IssueOrPullRequest | null;
  __typename: 'UnmarkIssueAsDuplicatePayload';
}

/** Autogenerated return type of UnmarkProjectV2AsTemplate */
export interface UnmarkProjectV2AsTemplatePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The project. */
  projectV2: ProjectV2 | null;
  __typename: 'UnmarkProjectV2AsTemplatePayload';
}

/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical: IssueOrPullRequest | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate: IssueOrPullRequest | null;
  id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars['Boolean'];
  __typename: 'UnmarkedAsDuplicateEvent';
}

/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The comment that was unminimized. */
  unminimizedComment: Minimizable | null;
  __typename: 'UnminimizeCommentPayload';
}

/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue that was unpinned */
  issue: Issue | null;
  __typename: 'UnpinIssuePayload';
}

/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Issue;
  __typename: 'UnpinnedEvent';
}

/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The thread to resolve. */
  thread: PullRequestReviewThread | null;
  __typename: 'UnresolveReviewThreadPayload';
}

/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** Object referenced by event. */
  subscribable: Subscribable;
  __typename: 'UnsubscribedEvent';
}

/** Entities that can be updated. */
export type Updatable = (
  | CommitComment
  | Discussion
  | DiscussionComment
  | GistComment
  | Issue
  | IssueComment
  | Project
  | ProjectV2
  | PullRequest
  | PullRequestReview
  | PullRequestReviewComment
  | TeamDiscussion
  | TeamDiscussionComment
) & { __isUnion?: true };

/** Comments that can be updated. */
export type UpdatableComment = (
  | CommitComment
  | DiscussionComment
  | GistComment
  | Issue
  | IssueComment
  | PullRequest
  | PullRequestReview
  | PullRequestReviewComment
  | TeamDiscussion
  | TeamDiscussionComment
) & { __isUnion?: true };

/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayload {
  /** The newly created BranchProtectionRule. */
  branchProtectionRule: BranchProtectionRule | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'UpdateBranchProtectionRulePayload';
}

/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayload {
  /** The updated check run. */
  checkRun: CheckRun | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  __typename: 'UpdateCheckRunPayload';
}

/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated repository. */
  repository: Repository | null;
  __typename: 'UpdateCheckSuitePreferencesPayload';
}

/** Autogenerated return type of UpdateDiscussionComment */
export interface UpdateDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The modified discussion comment. */
  comment: DiscussionComment | null;
  __typename: 'UpdateDiscussionCommentPayload';
}

/** Autogenerated return type of UpdateDiscussion */
export interface UpdateDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The modified discussion. */
  discussion: Discussion | null;
  __typename: 'UpdateDiscussionPayload';
}

/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of changing the administrator's role. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseAdministratorRolePayload';
}

/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated base repository permission setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the base repository permission setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can change repository visibility setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can change repository visibility setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can create repositories setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can create repositories setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can delete issues setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can delete issues setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can delete repositories setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can make purchases setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can make purchases setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanMakePurchasesSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can update protected branches setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated organization projects setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the organization projects setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseOrganizationProjectsSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
export interface UpdateEnterpriseOwnerOrganizationRolePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of changing the owner's organization role. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseOwnerOrganizationRolePayload';
}

/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated enterprise. */
  enterprise: Enterprise | null;
  __typename: 'UpdateEnterpriseProfilePayload';
}

/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated repository projects setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the repository projects setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseRepositoryProjectsSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated team discussions setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the team discussions setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseTeamDiscussionsSettingPayload';
}

/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise: Enterprise | null;
  /** A message confirming the result of updating the two factor authentication required setting. */
  message: Scalars['String'] | null;
  __typename: 'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';
}

/** Autogenerated return type of UpdateEnvironment */
export interface UpdateEnvironmentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated environment. */
  environment: Environment | null;
  __typename: 'UpdateEnvironmentPayload';
}

/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The IP allow list owner on which the setting was updated. */
  owner: IpAllowListOwner | null;
  __typename: 'UpdateIpAllowListEnabledSettingPayload';
}

/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The IP allow list entry that was updated. */
  ipAllowListEntry: IpAllowListEntry | null;
  __typename: 'UpdateIpAllowListEntryPayload';
}

/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The IP allow list owner on which the setting was updated. */
  owner: IpAllowListOwner | null;
  __typename: 'UpdateIpAllowListForInstalledAppsEnabledSettingPayload';
}

/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated comment. */
  issueComment: IssueComment | null;
  __typename: 'UpdateIssueCommentPayload';
}

/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The issue. */
  issue: Issue | null;
  __typename: 'UpdateIssuePayload';
}

/** Autogenerated return type of UpdateNotificationRestrictionSetting */
export interface UpdateNotificationRestrictionSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The owner on which the setting was updated. */
  owner: VerifiableDomainOwner | null;
  __typename: 'UpdateNotificationRestrictionSettingPayload';
}

/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message: Scalars['String'] | null;
  /** The organization with the updated allow private repository forking setting. */
  organization: Organization | null;
  __typename: 'UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload';
}

/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
export interface UpdateOrganizationWebCommitSignoffSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of updating the web commit signoff setting. */
  message: Scalars['String'] | null;
  /** The organization with the updated web commit signoff setting. */
  organization: Organization | null;
  __typename: 'UpdateOrganizationWebCommitSignoffSettingPayload';
}

/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParameters {
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: Scalars['Boolean'];
  __typename: 'UpdateParameters';
}

/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated ProjectCard. */
  projectCard: ProjectCard | null;
  __typename: 'UpdateProjectCardPayload';
}

/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated project column. */
  projectColumn: ProjectColumn | null;
  __typename: 'UpdateProjectColumnPayload';
}

/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated project. */
  project: Project | null;
  __typename: 'UpdateProjectPayload';
}

/** Autogenerated return type of UpdateProjectV2Collaborators */
export interface UpdateProjectV2CollaboratorsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The collaborators granted a role */
  collaborators: ProjectV2ActorConnection | null;
  __typename: 'UpdateProjectV2CollaboratorsPayload';
}

/** Autogenerated return type of UpdateProjectV2DraftIssue */
export interface UpdateProjectV2DraftIssuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The draft issue updated in the project. */
  draftIssue: DraftIssue | null;
  __typename: 'UpdateProjectV2DraftIssuePayload';
}

/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
export interface UpdateProjectV2ItemFieldValuePayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated item. */
  projectV2Item: ProjectV2Item | null;
  __typename: 'UpdateProjectV2ItemFieldValuePayload';
}

/** Autogenerated return type of UpdateProjectV2ItemPosition */
export interface UpdateProjectV2ItemPositionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The items in the new order */
  items: ProjectV2ItemConnection | null;
  __typename: 'UpdateProjectV2ItemPositionPayload';
}

/** Autogenerated return type of UpdateProjectV2 */
export interface UpdateProjectV2Payload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated Project. */
  projectV2: ProjectV2 | null;
  __typename: 'UpdateProjectV2Payload';
}

/** Autogenerated return type of UpdatePullRequestBranch */
export interface UpdatePullRequestBranchPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated pull request. */
  pullRequest: PullRequest | null;
  __typename: 'UpdatePullRequestBranchPayload';
}

/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayload {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated pull request. */
  pullRequest: PullRequest | null;
  __typename: 'UpdatePullRequestPayload';
}

/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated comment. */
  pullRequestReviewComment: PullRequestReviewComment | null;
  __typename: 'UpdatePullRequestReviewCommentPayload';
}

/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated pull request review. */
  pullRequestReview: PullRequestReview | null;
  __typename: 'UpdatePullRequestReviewPayload';
}

/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated Ref. */
  ref: Ref | null;
  __typename: 'UpdateRefPayload';
}

/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated repository. */
  repository: Repository | null;
  __typename: 'UpdateRepositoryPayload';
}

/** Autogenerated return type of UpdateRepositoryRuleset */
export interface UpdateRepositoryRulesetPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The newly created Ruleset. */
  ruleset: RepositoryRuleset | null;
  __typename: 'UpdateRepositoryRulesetPayload';
}

/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
export interface UpdateRepositoryWebCommitSignoffSettingPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** A message confirming the result of updating the web commit signoff setting. */
  message: Scalars['String'] | null;
  /** The updated repository. */
  repository: Repository | null;
  __typename: 'UpdateRepositoryWebCommitSignoffSettingPayload';
}

/** Autogenerated return type of UpdateSponsorshipPreferences */
export interface UpdateSponsorshipPreferencesPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The sponsorship that was updated. */
  sponsorship: Sponsorship | null;
  __typename: 'UpdateSponsorshipPreferencesPayload';
}

/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The input subscribable entity. */
  subscribable: Subscribable | null;
  __typename: 'UpdateSubscriptionPayload';
}

/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated comment. */
  teamDiscussionComment: TeamDiscussionComment | null;
  __typename: 'UpdateTeamDiscussionCommentPayload';
}

/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The updated discussion. */
  teamDiscussion: TeamDiscussion | null;
  __typename: 'UpdateTeamDiscussionPayload';
}

/** Autogenerated return type of UpdateTeamsRepository */
export interface UpdateTeamsRepositoryPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The repository that was updated. */
  repository: Repository | null;
  /** The teams granted permission on the repository. */
  teams: Team[] | null;
  __typename: 'UpdateTeamsRepositoryPayload';
}

/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** Names of the provided topics that are not valid. */
  invalidTopicNames: Scalars['String'][] | null;
  /** The updated repository. */
  repository: Repository | null;
  __typename: 'UpdateTopicsPayload';
}

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface User {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars['Boolean'];
  /** A URL pointing to the user's public avatar. */
  avatarUrl: Scalars['URI'];
  /** The user's public profile bio. */
  bio: Scalars['String'] | null;
  /** The user's public profile bio as HTML. */
  bioHTML: Scalars['HTML'];
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars['Boolean'];
  /** A list of commit comments made by this user. */
  commitComments: CommitCommentConnection;
  /** The user's public profile company. */
  company: Scalars['String'] | null;
  /** The user's public profile company as HTML. */
  companyHTML: Scalars['HTML'];
  /** The collection of contributions this user has made to different repositories. */
  contributionsCollection: ContributionsCollection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The user's publicly visible profile email. */
  email: Scalars['String'];
  /** A list of enterprises that the user belongs to. */
  enterprises: EnterpriseConnection | null;
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** A list of users the given user is followed by. */
  followers: FollowerConnection;
  /** A list of users the given user is following. */
  following: FollowingConnection;
  /** Find gist by repo name. */
  gist: Gist | null;
  /** A list of gist comments made by this user. */
  gistComments: GistCommentConnection;
  /** A list of the Gists the user has created. */
  gists: GistConnection;
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars['Boolean'];
  /** The hovercard information for this user in a given context */
  hovercard: Hovercard;
  id: Scalars['ID'];
  /** The interaction ability settings for this user. */
  interactionAbility: RepositoryInteractionAbility | null;
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  isBountyHunter: Scalars['Boolean'];
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  isCampusExpert: Scalars['Boolean'];
  /** Whether or not this user is a GitHub Developer Program member. */
  isDeveloperProgramMember: Scalars['Boolean'];
  /** Whether or not this user is a GitHub employee. */
  isEmployee: Scalars['Boolean'];
  /** Whether or not this user is following the viewer. Inverse of viewerIsFollowing */
  isFollowingViewer: Scalars['Boolean'];
  /** Whether or not this user is a member of the GitHub Stars Program. */
  isGitHubStar: Scalars['Boolean'];
  /** Whether or not the user has marked themselves as for hire. */
  isHireable: Scalars['Boolean'];
  /** Whether or not this user is a site administrator. */
  isSiteAdmin: Scalars['Boolean'];
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars['Boolean'];
  /** Whether or not this user is the viewing user. */
  isViewer: Scalars['Boolean'];
  /** A list of issue comments made by this user. */
  issueComments: IssueCommentConnection;
  /** A list of issues associated with this user. */
  issues: IssueConnection;
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: ProfileItemShowcase;
  /** The user's public profile location. */
  location: Scalars['String'] | null;
  /** The username used to login. */
  login: Scalars['String'];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The user's public profile name. */
  name: Scalars['String'] | null;
  /** Find an organization by its login that the user belongs to. */
  organization: Organization | null;
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  organizationVerifiedDomainEmails: Scalars['String'][];
  /** A list of organizations the user belongs to. */
  organizations: OrganizationConnection;
  /** A list of packages under the owner. */
  packages: PackageConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  project: Project | null;
  /** Find a project by number. */
  projectV2: ProjectV2 | null;
  /** A list of projects under the owner. */
  projects: ProjectConnection;
  /** The HTTP path listing user's projects */
  projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing user's projects */
  projectsUrl: Scalars['URI'];
  /** A list of projects under the owner. */
  projectsV2: ProjectV2Connection;
  /** The user's profile pronouns */
  pronouns: Scalars['String'] | null;
  /** A list of public keys associated with this user. */
  publicKeys: PublicKeyConnection;
  /** A list of pull requests associated with this user. */
  pullRequests: PullRequestConnection;
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects: ProjectV2Connection;
  /** A list of repositories that the user owns. */
  repositories: RepositoryConnection;
  /** A list of repositories that the user recently contributed to. */
  repositoriesContributedTo: RepositoryConnection;
  /** Find Repository. */
  repository: Repository | null;
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: DiscussionCommentConnection;
  /** Discussions this user has started. */
  repositoryDiscussions: DiscussionConnection;
  /** The HTTP path for this user */
  resourcePath: Scalars['URI'];
  /** Replies this user has saved */
  savedReplies: SavedReplyConnection | null;
  /** The user's social media accounts, ordered as they appear on the user's profile. */
  socialAccounts: SocialAccountConnection;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing: SponsorsListing | null;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor: Sponsorship | null;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable: Sponsorship | null;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: SponsorshipNewsletterConnection;
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer: SponsorshipConnection;
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor: SponsorshipConnection;
  /** Repositories the user has starred. */
  starredRepositories: StarredRepositoryConnection;
  /** The user's description of what they're currently doing. */
  status: UserStatus | null;
  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   *
   */
  topRepositories: RepositoryConnection;
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents: Scalars['Int'] | null;
  /** The user's Twitter username. */
  twitterUsername: Scalars['String'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this user */
  url: Scalars['URI'];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Whether or not the viewer is able to follow the user. */
  viewerCanFollow: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars['Boolean'];
  /** Whether or not this user is followed by the viewer. Inverse of isFollowingViewer. */
  viewerIsFollowing: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars['Boolean'];
  /** A list of repositories the given user is watching. */
  watching: RepositoryConnection;
  /** A URL pointing to the user's public website/blog. */
  websiteUrl: Scalars['URI'] | null;
  __typename: 'User';
}

/** The possible durations that a user can be blocked for. */
export type UserBlockDuration = 'ONE_DAY' | 'THREE_DAYS' | 'ONE_WEEK' | 'ONE_MONTH' | 'PERMANENT';

/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEvent {
  /** Identifies the actor who performed the event. */
  actor: Actor | null;
  /** Number of days that the user was blocked for. */
  blockDuration: UserBlockDuration;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  /** The user who was blocked. */
  subject: User | null;
  __typename: 'UserBlockedEvent';
}

/** The connection type for User. */
export interface UserConnection {
  /** A list of edges. */
  edges: (UserEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (User | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'UserConnection';
}

/** An edit on user content */
export interface UserContentEdit {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the date and time when the object was deleted. */
  deletedAt: Scalars['DateTime'] | null;
  /** The actor who deleted this content */
  deletedBy: Actor | null;
  /** A summary of the changes for this edit */
  diff: Scalars['String'] | null;
  /** When this content was edited */
  editedAt: Scalars['DateTime'];
  /** The actor who edited this content */
  editor: Actor | null;
  id: Scalars['ID'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  __typename: 'UserContentEdit';
}

/** A list of edits to content. */
export interface UserContentEditConnection {
  /** A list of edges. */
  edges: (UserContentEditEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (UserContentEdit | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'UserContentEditConnection';
}

/** An edge in a connection. */
export interface UserContentEditEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: UserContentEdit | null;
  __typename: 'UserContentEditEdge';
}

/** Represents a user. */
export interface UserEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User | null;
  __typename: 'UserEdge';
}

/** Email attributes from External Identity */
export interface UserEmailMetadata {
  /** Boolean to identify primary emails */
  primary: Scalars['Boolean'] | null;
  /** Type of email */
  type: Scalars['String'] | null;
  /** Email id */
  value: Scalars['String'];
  __typename: 'UserEmailMetadata';
}

/** The user's description of what they're currently doing. */
export interface UserStatus {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** An emoji summarizing the user's status. */
  emoji: Scalars['String'] | null;
  /** The status emoji as HTML. */
  emojiHTML: Scalars['HTML'] | null;
  /** If set, the status will not be shown after this date. */
  expiresAt: Scalars['DateTime'] | null;
  id: Scalars['ID'];
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability: Scalars['Boolean'];
  /** A brief message describing what the user is doing. */
  message: Scalars['String'] | null;
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization: Organization | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The user who has this status. */
  user: User;
  __typename: 'UserStatus';
}

/** The connection type for UserStatus. */
export interface UserStatusConnection {
  /** A list of edges. */
  edges: (UserStatusEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (UserStatus | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'UserStatusConnection';
}

/** An edge in a connection. */
export interface UserStatusEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: UserStatus | null;
  __typename: 'UserStatusEdge';
}

/** Properties by which user status connections can be ordered. */
export type UserStatusOrderField = 'UPDATED_AT';

/** A domain that can be verified or approved for an organization or an enterprise. */
export interface VerifiableDomain {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The DNS host name that should be used for verification. */
  dnsHostName: Scalars['URI'] | null;
  /** The unicode encoded domain. */
  domain: Scalars['URI'];
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName: Scalars['Boolean'];
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Whether or not the domain is approved. */
  isApproved: Scalars['Boolean'];
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement: Scalars['Boolean'];
  /** Whether or not the domain is verified. */
  isVerified: Scalars['Boolean'];
  /** The owner of the domain. */
  owner: VerifiableDomainOwner;
  /** The punycode encoded domain. */
  punycodeEncodedDomain: Scalars['URI'];
  /** The time that the current verification token will expire. */
  tokenExpirationTime: Scalars['DateTime'] | null;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The current verification token for the domain. */
  verificationToken: Scalars['String'] | null;
  __typename: 'VerifiableDomain';
}

/** The connection type for VerifiableDomain. */
export interface VerifiableDomainConnection {
  /** A list of edges. */
  edges: (VerifiableDomainEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (VerifiableDomain | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'VerifiableDomainConnection';
}

/** An edge in a connection. */
export interface VerifiableDomainEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: VerifiableDomain | null;
  __typename: 'VerifiableDomainEdge';
}

/** Properties by which verifiable domain connections can be ordered. */
export type VerifiableDomainOrderField = 'DOMAIN' | 'CREATED_AT';

/** Types that can own a verifiable domain. */
export type VerifiableDomainOwner = (Enterprise | Organization) & { __isUnion?: true };

/** Autogenerated return type of VerifyVerifiableDomain */
export interface VerifyVerifiableDomainPayload {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Scalars['String'] | null;
  /** The verifiable domain that was verified. */
  domain: VerifiableDomain | null;
  __typename: 'VerifyVerifiableDomainPayload';
}

/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContext {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Identifies the user who is related to this context. */
  viewer: User;
  __typename: 'ViewerHovercardContext';
}

/** A subject that may be upvoted. */
export type Votable = (Discussion | DiscussionComment) & { __isUnion?: true };

/** A workflow contains meta information about an Actions workflow file. */
export interface Workflow {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  id: Scalars['ID'];
  /** The name of the workflow. */
  name: Scalars['String'];
  /** The HTTP path for this workflow */
  resourcePath: Scalars['URI'];
  /** The runs of the workflow. */
  runs: WorkflowRunConnection;
  /** The state of the workflow. */
  state: WorkflowState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this workflow */
  url: Scalars['URI'];
  __typename: 'Workflow';
}

/** A workflow that must run for this rule to pass */
export interface WorkflowFileReference {
  /** The path to the workflow file */
  path: Scalars['String'];
  /** The ref (branch or tag) of the workflow file to use */
  ref: Scalars['String'] | null;
  /** The ID of the repository where the workflow is defined */
  repositoryId: Scalars['Int'];
  /** The commit SHA of the workflow file to use */
  sha: Scalars['String'] | null;
  __typename: 'WorkflowFileReference';
}

/** A workflow run. */
export interface WorkflowRun {
  /** The check suite this workflow run belongs to. */
  checkSuite: CheckSuite;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'] | null;
  /** The log of deployment reviews */
  deploymentReviews: DeploymentReviewConnection;
  /** The event that triggered the workflow run */
  event: Scalars['String'];
  /** The workflow file */
  file: WorkflowRunFile | null;
  id: Scalars['ID'];
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests: DeploymentRequestConnection;
  /** The HTTP path for this workflow run */
  resourcePath: Scalars['URI'];
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this workflow run */
  url: Scalars['URI'];
  /** The workflow executed in this workflow run. */
  workflow: Workflow;
  __typename: 'WorkflowRun';
}

/** The connection type for WorkflowRun. */
export interface WorkflowRunConnection {
  /** A list of edges. */
  edges: (WorkflowRunEdge | null)[] | null;
  /** A list of nodes. */
  nodes: (WorkflowRun | null)[] | null;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  __typename: 'WorkflowRunConnection';
}

/** An edge in a connection. */
export interface WorkflowRunEdge {
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: WorkflowRun | null;
  __typename: 'WorkflowRunEdge';
}

/** An executed workflow file for a workflow run. */
export interface WorkflowRunFile {
  id: Scalars['ID'];
  /** The path of the workflow file relative to its repository. */
  path: Scalars['String'];
  /** The direct link to the file in the repository which stores the workflow file. */
  repositoryFileUrl: Scalars['URI'];
  /** The repository name and owner which stores the workflow file. */
  repositoryName: Scalars['URI'];
  /** The HTTP path for this workflow run file */
  resourcePath: Scalars['URI'];
  /** The parent workflow run execution for this file. */
  run: WorkflowRun;
  /** The HTTP URL for this workflow run file */
  url: Scalars['URI'];
  /** If the viewer has permissions to push to the repository which stores the workflow. */
  viewerCanPushRepository: Scalars['Boolean'];
  /** If the viewer has permissions to read the repository which stores the workflow. */
  viewerCanReadRepository: Scalars['Boolean'];
  __typename: 'WorkflowRunFile';
}

/** Properties by which workflow run connections can be ordered. */
export type WorkflowRunOrderField = 'CREATED_AT';

/** The possible states for a workflow. */
export type WorkflowState =
  | 'ACTIVE'
  | 'DELETED'
  | 'DISABLED_FORK'
  | 'DISABLED_INACTIVITY'
  | 'DISABLED_MANUALLY';

/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParameters {
  /** Workflows that must pass for this rule to pass. */
  workflows: WorkflowFileReference[];
  __typename: 'WorkflowsParameters';
}

/** Autogenerated input type of AbortQueuedMigrations */
export interface AbortQueuedMigrationsInput {
  /** The ID of the organization that is running the migrations. */
  ownerId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AbortQueuedMigrations */
export interface AbortQueuedMigrationsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Did the operation succeed? */
  success?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AbortRepositoryMigration */
export interface AbortRepositoryMigrationInput {
  /** The ID of the migration to be aborted. */
  migrationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AbortRepositoryMigration */
export interface AbortRepositoryMigrationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Did the operation succeed? */
  success?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationInput {
  /** The id of the invitation being accepted */
  invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The invitation that was accepted. */
  invitation?: EnterpriseAdministratorInvitationGenqlSelection;
  /** A message confirming the result of accepting an administrator invitation. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The accepted topic. */
  topic?: TopicGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface ActorGenqlSelection {
  /** A URL pointing to the actor's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The username of the actor. */
  login?: boolean | number;
  /** The HTTP path for this actor. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this actor. */
  url?: boolean | number;
  on_Bot?: BotGenqlSelection;
  on_EnterpriseUserAccount?: EnterpriseUserAccountGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Location information for an actor */
export interface ActorLocationGenqlSelection {
  /** City */
  city?: boolean | number;
  /** Country name */
  country?: boolean | number;
  /** Country code */
  countryCode?: boolean | number;
  /** Region name */
  region?: boolean | number;
  /** Region or state code */
  regionCode?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignableInput {
  /** The id of the assignable object to add assignees to. */
  assignableId: Scalars['ID'];
  /** The id of users to add as assignees. */
  assigneeIds: Scalars['ID'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayloadGenqlSelection {
  /** The item that was assigned. */
  assignable?: AssignableGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddComment */
export interface AddCommentInput {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddComment */
export interface AddCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The edge from the subject's comment connection. */
  commentEdge?: IssueCommentEdgeGenqlSelection;
  /** The subject */
  subject?: NodeGenqlSelection;
  /** The edge from the subject's timeline connection. */
  timelineEdge?: IssueTimelineItemEdgeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddDiscussionComment */
export interface AddDiscussionCommentInput {
  /** The Node ID of the discussion to comment on. */
  discussionId: Scalars['ID'];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: Scalars['ID'] | null;
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddDiscussionComment */
export interface AddDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created discussion comment. */
  comment?: DiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddDiscussionPollVote */
export interface AddDiscussionPollVoteInput {
  /** The Node ID of the discussion poll option to vote for. */
  pollOptionId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddDiscussionPollVote */
export interface AddDiscussionPollVotePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The poll option that a vote was added to. */
  pollOption?: DiscussionPollOptionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddEnterpriseOrganizationMember */
export interface AddEnterpriseOrganizationMemberInput {
  /** The ID of the enterprise which owns the organization. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization the users will be added to. */
  organizationId: Scalars['ID'];
  /** The IDs of the enterprise members to add. */
  userIds: Scalars['ID'][];
  /** The role to assign the users in the organization */
  role?: OrganizationMemberRole | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddEnterpriseOrganizationMember */
export interface AddEnterpriseOrganizationMemberPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The users who were added to the organization. */
  users?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export interface AddEnterpriseSupportEntitlementInput {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will receive the support entitlement. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddEnterpriseSupportEntitlement */
export interface AddEnterpriseSupportEntitlementPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of adding the support entitlement. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddLabelsToLabelable */
export interface AddLabelsToLabelableInput {
  /** The id of the labelable object to add labels to. */
  labelableId: Scalars['ID'];
  /** The ids of the labels to add. */
  labelIds: Scalars['ID'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item that was labeled. */
  labelable?: LabelableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddProjectCard */
export interface AddProjectCardInput {
  /** The Node ID of the ProjectColumn. */
  projectColumnId: Scalars['ID'];
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: Scalars['ID'] | null;
  /** The note on the card. */
  note?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayloadGenqlSelection {
  /** The edge from the ProjectColumn's card connection. */
  cardEdge?: ProjectCardEdgeGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The ProjectColumn */
  projectColumn?: ProjectColumnGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddProjectColumn */
export interface AddProjectColumnInput {
  /** The Node ID of the project. */
  projectId: Scalars['ID'];
  /** The name of the column. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The edge from the project's column connection. */
  columnEdge?: ProjectColumnEdgeGenqlSelection;
  /** The project */
  project?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddProjectV2DraftIssue */
export interface AddProjectV2DraftIssueInput {
  /** The ID of the Project to add the draft issue to. */
  projectId: Scalars['ID'];
  /** The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access. */
  title: Scalars['String'];
  /** The body of the draft issue. */
  body?: Scalars['String'] | null;
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: Scalars['ID'][] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddProjectV2DraftIssue */
export interface AddProjectV2DraftIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The draft issue added to the project. */
  projectItem?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddProjectV2ItemById */
export interface AddProjectV2ItemByIdInput {
  /** The ID of the Project to add the item to. */
  projectId: Scalars['ID'];
  /** The id of the Issue or Pull Request to add. */
  contentId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddProjectV2ItemById */
export interface AddProjectV2ItemByIdPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item added to the project. */
  item?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentInput {
  /**
   * The node ID of the pull request reviewing
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  pullRequestId?: Scalars['ID'] | null;
  /**
   * The Node ID of the review to modify.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  pullRequestReviewId?: Scalars['ID'] | null;
  /**
   * The SHA of the commit to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  commitOID?: Scalars['GitObjectID'] | null;
  /**
   * The text of the comment. This field is required
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  body?: Scalars['String'] | null;
  /**
   * The relative path of the file to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  path?: Scalars['String'] | null;
  /**
   * The line index in the diff to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  position?: Scalars['Int'] | null;
  /**
   * The comment id to reply to.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  inReplyTo?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created comment. */
  comment?: PullRequestReviewCommentGenqlSelection;
  /** The edge from the review's comment connection. */
  commentEdge?: PullRequestReviewCommentEdgeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddPullRequestReview */
export interface AddPullRequestReviewInput {
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The commit OID the review pertains to. */
  commitOID?: Scalars['GitObjectID'] | null;
  /** The contents of the review body comment. */
  body?: Scalars['String'] | null;
  /** The event to perform on the pull request review. */
  event?: PullRequestReviewEvent | null;
  /**
   * The review line comments.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `comments` will be removed. use the `threads` argument instead
   * **Reason:** We are deprecating comment fields that use diff-relative positioning
   *
   */
  comments?: (DraftPullRequestReviewComment | null)[] | null;
  /** The review line comment threads. */
  threads?: (DraftPullRequestReviewThread | null)[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created pull request review. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  /** The edge from the pull request's review connection. */
  reviewEdge?: PullRequestReviewEdgeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadInput {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** Body of the thread's first comment. */
  body: Scalars['String'];
  /** The node ID of the pull request reviewing */
  pullRequestId?: Scalars['ID'] | null;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: Scalars['ID'] | null;
  /** The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments. */
  line?: Scalars['Int'] | null;
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: DiffSide | null;
  /** The first line of the range to which the comment refers. */
  startLine?: Scalars['Int'] | null;
  /** The side of the diff on which the start line resides. */
  startSide?: DiffSide | null;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: PullRequestReviewThreadSubjectType | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created thread. */
  thread?: PullRequestReviewThreadGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddPullRequestReviewThreadReply */
export interface AddPullRequestReviewThreadReplyInput {
  /** The Node ID of the pending review to which the reply will belong. */
  pullRequestReviewId?: Scalars['ID'] | null;
  /** The Node ID of the thread to which this reply is being written. */
  pullRequestReviewThreadId: Scalars['ID'];
  /** The text of the reply. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddPullRequestReviewThreadReply */
export interface AddPullRequestReviewThreadReplyPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created reply. */
  comment?: PullRequestReviewCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddReaction */
export interface AddReactionInput {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The name of the emoji to react with. */
  content: ReactionContent;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddReaction */
export interface AddReactionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The reaction object. */
  reaction?: ReactionGenqlSelection;
  /** The reaction groups for the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** The reactable subject. */
  subject?: ReactableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddStar */
export interface AddStarInput {
  /** The Starrable ID to star. */
  starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddStar */
export interface AddStarPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The starrable. */
  starrable?: StarrableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddUpvote */
export interface AddUpvoteInput {
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddUpvote */
export interface AddUpvotePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The votable subject. */
  subject?: VotableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of AddVerifiableDomain */
export interface AddVerifiableDomainInput {
  /** The ID of the owner to add the domain to */
  ownerId: Scalars['ID'];
  /** The URL of the domain */
  domain: Scalars['URI'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of AddVerifiableDomain */
export interface AddVerifiableDomainPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The verifiable domain that was added. */
  domain?: VerifiableDomainGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'added_to_merge_queue' event on a given pull request. */
export interface AddedToMergeQueueEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who added this Pull Request to the merge queue */
  enqueuer?: UserGenqlSelection;
  id?: boolean | number;
  /** The merge queue where this pull request was added to. */
  mergeQueue?: MergeQueueGenqlSelection;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an announcement banner. */
export interface AnnouncementBannerGenqlSelection {
  /** The text of the announcement */
  announcement?: boolean | number;
  /** The expiration date of the announcement, if any */
  announcementExpiresAt?: boolean | number;
  /** Whether the announcement can be dismissed by the user */
  announcementUserDismissible?: boolean | number;
  on_Enterprise?: EnterpriseGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub App. */
export interface AppGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The description of the app. */
  description?: boolean | number;
  id?: boolean | number;
  /** The IP addresses of the app. */
  ipAllowListEntries?: IpAllowListEntryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for IP allow list entries returned. */
      orderBy?: IpAllowListEntryOrder | null;
    };
  };
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor?: boolean | number;
  /** A URL pointing to the app's logo. */
  logoUrl?:
    | {
        __args: {
          /** The size of the resulting image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The name of the app. */
  name?: boolean | number;
  /** A slug based on the name of the app for use in URLs. */
  slug?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The URL to the app's homepage. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ApproveDeployments */
export interface ApproveDeploymentsInput {
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  environmentIds: Scalars['ID'][];
  /** Optional comment for approving deployments */
  comment?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ApproveDeployments */
export interface ApproveDeploymentsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The affected deployments. */
  deployments?: DeploymentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ApproveVerifiableDomain */
export interface ApproveVerifiableDomainInput {
  /** The ID of the verifiable domain to approve. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ApproveVerifiableDomain */
export interface ApproveVerifiableDomainPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The verifiable domain that was approved. */
  domain?: VerifiableDomainGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ArchiveProjectV2Item */
export interface ArchiveProjectV2ItemInput {
  /** The ID of the Project to archive the item from. */
  projectId: Scalars['ID'];
  /** The ID of the ProjectV2Item to archive. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ArchiveProjectV2Item */
export interface ArchiveProjectV2ItemPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item archived from the project. */
  item?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ArchiveRepository */
export interface ArchiveRepositoryInput {
  /** The ID of the repository to mark as archived. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository that was marked as archived. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object that can have users assigned to it. */
export interface AssignableGenqlSelection {
  /** A list of Users assigned to this object. */
  assignees?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the assignable associated with the event. */
  assignable?: AssignableGenqlSelection;
  /** Identifies the user or mannequin that was assigned. */
  assignee?: AssigneeGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   * Identifies the user who was assigned.
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be assigned to issues. */
export interface AssigneeGenqlSelection {
  on_Bot?: BotGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** An entry in the audit log. */
export interface AuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryGenqlSelection;
  on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryGenqlSelection;
  on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryGenqlSelection;
  on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryGenqlSelection;
  on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryGenqlSelection;
  on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryGenqlSelection;
  on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryGenqlSelection;
  on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgCreateAuditEntry?: OrgCreateAuditEntryGenqlSelection;
  on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryGenqlSelection;
  on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryGenqlSelection;
  on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryGenqlSelection;
  on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryGenqlSelection;
  on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntryGenqlSelection;
  on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryGenqlSelection;
  on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryGenqlSelection;
  on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryGenqlSelection;
  on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryGenqlSelection;
  on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryGenqlSelection;
  on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_RepoAccessAuditEntry?: RepoAccessAuditEntryGenqlSelection;
  on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryGenqlSelection;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryGenqlSelection;
  on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryGenqlSelection;
  on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoCreateAuditEntry?: RepoCreateAuditEntryGenqlSelection;
  on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryGenqlSelection;
  on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryGenqlSelection;
  on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryGenqlSelection;
  on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can initiate an audit log event. */
export interface AuditEntryActorGenqlSelection {
  on_Bot?: BotGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** Ordering options for Audit Log connections. */
export interface AuditLogOrder {
  /** The field to order Audit Logs by. */
  field?: AuditLogOrderField | null;
  /** The ordering direction. */
  direction?: OrderDirection | null;
}

/** Represents a 'auto_merge_disabled' event on a given pull request. */
export interface AutoMergeDisabledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who disabled auto-merge for this Pull Request */
  disabler?: UserGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event */
  pullRequest?: PullRequestGenqlSelection;
  /** The reason auto-merge was disabled */
  reason?: boolean | number;
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'auto_merge_enabled' event on a given pull request. */
export interface AutoMergeEnabledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who enabled auto-merge for this Pull Request */
  enabler?: UserGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an auto-merge request for a pull request */
export interface AutoMergeRequestGenqlSelection {
  /** The email address of the author of this auto-merge request. */
  authorEmail?: boolean | number;
  /** The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging. */
  commitBody?: boolean | number;
  /** The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging */
  commitHeadline?: boolean | number;
  /** When was this auto-merge request was enabled. */
  enabledAt?: boolean | number;
  /** The actor who created the auto-merge request. */
  enabledBy?: ActorGenqlSelection;
  /** The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging. */
  mergeMethod?: boolean | number;
  /** The pull request that this auto-merge request is set against. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export interface AutoRebaseEnabledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler?: UserGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'auto_squash_enabled' event on a given pull request. */
export interface AutoSquashEnabledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler?: UserGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The new base for this PR */
  newBase?: boolean | number;
  /** The old base for this PR */
  oldBase?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The new base for this PR */
  newBase?: boolean | number;
  /** The old base for this PR */
  oldBase?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'base_ref_deleted' event on a given pull request. */
export interface BaseRefDeletedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit?: CommitGenqlSelection;
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git blame. */
export interface BlameGenqlSelection {
  /** The list of ranges from a Git blame. */
  ranges?: BlameRangeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a range of information from a Git blame. */
export interface BlameRangeGenqlSelection {
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */
  age?: boolean | number;
  /** Identifies the line author */
  commit?: CommitGenqlSelection;
  /** The ending line for the range */
  endingLine?: boolean | number;
  /** The starting line for the range */
  startingLine?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git blob. */
export interface BlobGenqlSelection {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: boolean | number;
  /** Byte size of Blob object */
  byteSize?: boolean | number;
  /** The HTTP path for this Git object */
  commitResourcePath?: boolean | number;
  /** The HTTP URL for this Git object */
  commitUrl?: boolean | number;
  id?: boolean | number;
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  isBinary?: boolean | number;
  /** Indicates whether the contents is truncated */
  isTruncated?: boolean | number;
  /** The Git object ID */
  oid?: boolean | number;
  /** The Repository the Git object belongs to */
  repository?: RepositoryGenqlSelection;
  /** UTF8 text data or null if the Blob is binary */
  text?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface BotGenqlSelection {
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The username of the actor. */
  login?: boolean | number;
  /** The HTTP path for this bot */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this bot */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types which can be actors for `BranchActorAllowance` objects. */
export interface BranchActorAllowanceActorGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParametersGenqlSelection {
  /** How this rule will appear to users. */
  name?: boolean | number;
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | number;
  /** The operator to use for matching. */
  operator?: boolean | number;
  /** The pattern to match with. */
  pattern?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParametersInput {
  /** How this rule will appear to users. */
  name?: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Scalars['Boolean'] | null;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
}

/** A branch protection rule. */
export interface BranchProtectionRuleGenqlSelection {
  /** Can this branch be deleted. */
  allowsDeletions?: boolean | number;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: boolean | number;
  /** Is branch creation a protected operation. */
  blocksCreations?: boolean | number;
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts?: BranchProtectionRuleConflictConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances?: BypassForcePushAllowanceConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances?: BypassPullRequestAllowanceConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The actor who created this branch protection rule. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: boolean | number;
  id?: boolean | number;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: boolean | number;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: boolean | number;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: boolean | number;
  /** Repository refs that are protected by this rule */
  matchingRefs?: RefConnectionGenqlSelection & {
    __args?: {
      /** Filters refs with query on name */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the protection rule pattern. */
  pattern?: boolean | number;
  /** A list push allowances for this branch protection rule. */
  pushAllowances?: PushAllowanceConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The repository associated with this branch protection rule. */
  repository?: RepositoryGenqlSelection;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: boolean | number;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: boolean | number;
  /** List of required deployment environments that must be deployed successfully to update matching branches */
  requiredDeploymentEnvironments?: boolean | number;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: boolean | number;
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks?: RequiredStatusCheckDescriptionGenqlSelection;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: boolean | number;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: boolean | number;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: boolean | number;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: boolean | number;
  /** Does this branch require deployment to specific environments before merging */
  requiresDeployments?: boolean | number;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: boolean | number;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: boolean | number;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: boolean | number;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: boolean | number;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: boolean | number;
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances?: ReviewDismissalAllowanceConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflictGenqlSelection {
  /** Identifies the branch protection rule. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule?: BranchProtectionRuleGenqlSelection;
  /** Identifies the branch ref that has conflicting rules */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnectionGenqlSelection {
  /** A list of edges. */
  edges?: BranchProtectionRuleConflictEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: BranchProtectionRuleConflictGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: BranchProtectionRuleConflictGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnectionGenqlSelection {
  /** A list of edges. */
  edges?: BranchProtectionRuleEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: BranchProtectionRuleGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface BranchProtectionRuleEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: BranchProtectionRuleGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once. */
export interface BulkSponsorship {
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Scalars['ID'] | null;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Scalars['String'] | null;
  /** The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. */
  amount: Scalars['Int'];
}

/** Types that can represent a repository ruleset bypass actor. */
export interface BypassActorGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  __typename?: boolean | number;
}

/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
export interface BypassForcePushAllowanceGenqlSelection {
  /** The actor that can force push. */
  actor?: BranchActorAllowanceActorGenqlSelection;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for BypassForcePushAllowance. */
export interface BypassForcePushAllowanceConnectionGenqlSelection {
  /** A list of edges. */
  edges?: BypassForcePushAllowanceEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: BypassForcePushAllowanceGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface BypassForcePushAllowanceEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: BypassForcePushAllowanceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
export interface BypassPullRequestAllowanceGenqlSelection {
  /** The actor that can bypass. */
  actor?: BranchActorAllowanceActorGenqlSelection;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for BypassPullRequestAllowance. */
export interface BypassPullRequestAllowanceConnectionGenqlSelection {
  /** A list of edges. */
  edges?: BypassPullRequestAllowanceEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: BypassPullRequestAllowanceGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface BypassPullRequestAllowanceEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: BypassPullRequestAllowanceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The Common Vulnerability Scoring System */
export interface CVSSGenqlSelection {
  /** The CVSS score associated with this advisory */
  score?: boolean | number;
  /** The CVSS vector string associated with this advisory */
  vectorString?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A common weakness enumeration */
export interface CWEGenqlSelection {
  /** The id of the CWE */
  cweId?: boolean | number;
  /** A detailed description of this CWE */
  description?: boolean | number;
  id?: boolean | number;
  /** The name of this CWE */
  name?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CWE. */
export interface CWEConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CWEEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CWEGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CWEEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CWEGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationInput {
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The invitation that was canceled. */
  invitation?: EnterpriseAdministratorInvitationGenqlSelection;
  /** A message confirming the result of canceling an administrator invitation. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CancelSponsorship */
export interface CancelSponsorshipInput {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Scalars['ID'] | null;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Scalars['String'] | null;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Scalars['ID'] | null;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CancelSponsorship */
export interface CancelSponsorshipPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier?: SponsorsTierGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ChangeUserStatus */
export interface ChangeUserStatusInput {
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: Scalars['String'] | null;
  /** A short description of your current status. */
  message?: Scalars['String'] | null;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  organizationId?: Scalars['ID'] | null;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  limitedAvailability?: Scalars['Boolean'] | null;
  /** If set, the user status will not be shown after this date. */
  expiresAt?: Scalars['DateTime'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Your updated status. */
  status?: UserStatusGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A single check annotation. */
export interface CheckAnnotationGenqlSelection {
  /** The annotation's severity level. */
  annotationLevel?: boolean | number;
  /** The path to the file that this annotation was made on. */
  blobUrl?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The position of this annotation. */
  location?: CheckAnnotationSpanGenqlSelection;
  /** The annotation's message. */
  message?: boolean | number;
  /** The path that this annotation was made on. */
  path?: boolean | number;
  /** Additional information about the annotation. */
  rawDetails?: boolean | number;
  /** The annotation's title */
  title?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CheckAnnotationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CheckAnnotationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationData {
  /** The path of the file to add an annotation to. */
  path: Scalars['String'];
  /** The location of the annotation */
  location: CheckAnnotationRange;
  /** Represents an annotation's information level */
  annotationLevel: CheckAnnotationLevel;
  /** A short description of the feedback for these lines of code. */
  message: Scalars['String'];
  /** The title that represents the annotation. */
  title?: Scalars['String'] | null;
  /** Details about this annotation. */
  rawDetails?: Scalars['String'] | null;
}

/** An edge in a connection. */
export interface CheckAnnotationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CheckAnnotationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A character position in a check annotation. */
export interface CheckAnnotationPositionGenqlSelection {
  /** Column number (1 indexed). */
  column?: boolean | number;
  /** Line number (1 indexed). */
  line?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationRange {
  /** The starting line of the range. */
  startLine: Scalars['Int'];
  /** The starting column of the range. */
  startColumn?: Scalars['Int'] | null;
  /** The ending line of the range. */
  endLine: Scalars['Int'];
  /** The ending column of the range. */
  endColumn?: Scalars['Int'] | null;
}

/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpanGenqlSelection {
  /** End position (inclusive). */
  end?: CheckAnnotationPositionGenqlSelection;
  /** Start position (inclusive). */
  start?: CheckAnnotationPositionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A check run. */
export interface CheckRunGenqlSelection {
  /** The check run's annotations */
  annotations?: CheckAnnotationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The check suite that this run is a part of. */
  checkSuite?: CheckSuiteGenqlSelection;
  /** Identifies the date and time when the check run was completed. */
  completedAt?: boolean | number;
  /** The conclusion of the check run. */
  conclusion?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The corresponding deployment for this job, if any */
  deployment?: DeploymentGenqlSelection;
  /** The URL from which to find full details of the check run on the integrator's site. */
  detailsUrl?: boolean | number;
  /** A reference for the check run on the integrator's system. */
  externalId?: boolean | number;
  id?: boolean | number;
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?:
    | {
        __args: {
          /** The id of the pull request this is required for */
          pullRequestId?: Scalars['ID'] | null;
          /** The number of the pull request this is required for */
          pullRequestNumber?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The name of the check for this check run. */
  name?: boolean | number;
  /** Information about a pending deployment, if any, in this check run */
  pendingDeploymentRequest?: DeploymentRequestGenqlSelection;
  /** The permalink to the check run summary. */
  permalink?: boolean | number;
  /** The repository associated with this check run. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this check run. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the check run was started. */
  startedAt?: boolean | number;
  /** The current status of the check run. */
  status?: boolean | number;
  /** The check run's steps */
  steps?: CheckStepConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Step number */
      number?: Scalars['Int'] | null;
    };
  };
  /** A string representing the check run's summary */
  summary?: boolean | number;
  /** A string representing the check run's text */
  text?: boolean | number;
  /** A string representing the check run */
  title?: boolean | number;
  /** The HTTP URL for this check run. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Possible further actions the integrator can perform. */
export interface CheckRunAction {
  /** The text to be displayed on a button in the web UI. */
  label: Scalars['String'];
  /** A short explanation of what this action would do. */
  description: Scalars['String'];
  /** A reference for the action on the integrator's system.  */
  identifier: Scalars['String'];
}

/** The connection type for CheckRun. */
export interface CheckRunConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CheckRunEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CheckRunGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CheckRunEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CheckRunGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The filters that are available when fetching check runs. */
export interface CheckRunFilter {
  /** Filters the check runs by this type. */
  checkType?: CheckRunType | null;
  /** Filters the check runs created by this application ID. */
  appId?: Scalars['Int'] | null;
  /** Filters the check runs by this name. */
  checkName?: Scalars['String'] | null;
  /** Filters the check runs by this status. Superceded by statuses. */
  status?: CheckStatusState | null;
  /** Filters the check runs by this status. Overrides status. */
  statuses?: CheckStatusState[] | null;
  /** Filters the check runs by these conclusions. */
  conclusions?: CheckConclusionState[] | null;
}

/** Descriptive details about the check run. */
export interface CheckRunOutput {
  /** A title to provide for this check run. */
  title: Scalars['String'];
  /** The summary of the check run (supports Commonmark). */
  summary: Scalars['String'];
  /** The details of the check run (supports Commonmark). */
  text?: Scalars['String'] | null;
  /** The annotations that are made as part of the check run. */
  annotations?: CheckAnnotationData[] | null;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: CheckRunOutputImage[] | null;
}

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export interface CheckRunOutputImage {
  /** The alternative text for the image. */
  alt: Scalars['String'];
  /** The full URL of the image. */
  imageUrl: Scalars['URI'];
  /** A short image description. */
  caption?: Scalars['String'] | null;
}

/** Represents a count of the state of a check run. */
export interface CheckRunStateCountGenqlSelection {
  /** The number of check runs with this state. */
  count?: boolean | number;
  /** The state of a check run. */
  state?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A single check step. */
export interface CheckStepGenqlSelection {
  /** Identifies the date and time when the check step was completed. */
  completedAt?: boolean | number;
  /** The conclusion of the check step. */
  conclusion?: boolean | number;
  /** A reference for the check step on the integrator's system. */
  externalId?: boolean | number;
  /** The step's name. */
  name?: boolean | number;
  /** The index of the step in the list of steps of the parent check run. */
  number?: boolean | number;
  /** Number of seconds to completion. */
  secondsToCompletion?: boolean | number;
  /** Identifies the date and time when the check step was started. */
  startedAt?: boolean | number;
  /** The current status of the check step. */
  status?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CheckStep. */
export interface CheckStepConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CheckStepEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CheckStepGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CheckStepEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CheckStepGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A check suite. */
export interface CheckSuiteGenqlSelection {
  /** The GitHub App which created this check suite. */
  app?: AppGenqlSelection;
  /** The name of the branch for this check suite. */
  branch?: RefGenqlSelection;
  /** The check runs associated with a check suite. */
  checkRuns?: CheckRunConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filters the check runs by this type. */
      filterBy?: CheckRunFilter | null;
    };
  };
  /** The commit for this check suite */
  commit?: CommitGenqlSelection;
  /** The conclusion of this check suite. */
  conclusion?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who triggered the check suite. */
  creator?: UserGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The push that triggered this check suite. */
  push?: PushGenqlSelection;
  /** The repository associated with this check suite. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this check suite */
  resourcePath?: boolean | number;
  /** The status of this check suite. */
  status?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this check suite */
  url?: boolean | number;
  /** The workflow run associated with this check suite. */
  workflowRun?: WorkflowRunGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The auto-trigger preferences that are available for check suites. */
export interface CheckSuiteAutoTriggerPreference {
  /** The node ID of the application that owns the check suite. */
  appId: Scalars['ID'];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: Scalars['Boolean'];
}

/** The connection type for CheckSuite. */
export interface CheckSuiteConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CheckSuiteEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CheckSuiteGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CheckSuiteEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CheckSuiteGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The filters that are available when fetching check suites. */
export interface CheckSuiteFilter {
  /** Filters the check suites created by this application ID. */
  appId?: Scalars['Int'] | null;
  /** Filters the check suites by this name. */
  checkName?: Scalars['String'] | null;
}

/** An object which can have its data claimed or claim data from another. */
export interface ClaimableGenqlSelection {
  on_Mannequin?: MannequinGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** Autogenerated input type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelableInput {
  /** The id of the labelable object to clear the labels from. */
  labelableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item that was unlabeled. */
  labelable?: LabelableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ClearProjectV2ItemFieldValue */
export interface ClearProjectV2ItemFieldValueInput {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be cleared. */
  itemId: Scalars['ID'];
  /** The ID of the field to be cleared. */
  fieldId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ClearProjectV2ItemFieldValue */
export interface ClearProjectV2ItemFieldValuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated item. */
  projectV2Item?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CloneProject */
export interface CloneProjectInput {
  /** The owner ID to create the project under. */
  targetOwnerId: Scalars['ID'];
  /** The source project to clone. */
  sourceId: Scalars['ID'];
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: Scalars['Boolean'];
  /** The name of the project. */
  name: Scalars['String'];
  /** The description of the project. */
  body?: Scalars['String'] | null;
  /** The visibility of the project, defaults to false (private). */
  public?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CloneProject */
export interface CloneProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId?: boolean | number;
  /** The new cloned project. */
  project?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CloneTemplateRepository */
export interface CloneTemplateRepositoryInput {
  /** The Node ID of the template repository. */
  repositoryId: Scalars['ID'];
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId: Scalars['ID'];
  /** A short description of the new repository. */
  description?: Scalars['String'] | null;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  includeAllBranches?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object that can be closed */
export interface ClosableGenqlSelection {
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  on_Discussion?: DiscussionGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_Milestone?: MilestoneGenqlSelection;
  on_Project?: ProjectGenqlSelection;
  on_ProjectV2?: ProjectV2GenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CloseDiscussion */
export interface CloseDiscussionInput {
  /** ID of the discussion to be closed. */
  discussionId: Scalars['ID'];
  /** The reason why the discussion is being closed. */
  reason?: DiscussionCloseReason | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CloseDiscussion */
export interface CloseDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that was closed. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CloseIssue */
export interface CloseIssueInput {
  /** ID of the issue to be closed. */
  issueId: Scalars['ID'];
  /** The reason the issue is to be closed. */
  stateReason?: IssueClosedStateReason | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was closed. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ClosePullRequest */
export interface ClosePullRequestInput {
  /** ID of the pull request to be closed. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that was closed. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Object that was closed. */
  closable?: ClosableGenqlSelection;
  /** Object which triggered the creation of this event. */
  closer?: CloserGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The HTTP path for this closed event. */
  resourcePath?: boolean | number;
  /** The reason the issue state was changed to closed. */
  stateReason?: boolean | number;
  /** The HTTP URL for this closed event. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The object which triggered a `ClosedEvent`. */
export interface CloserGenqlSelection {
  on_Commit?: CommitGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_GitObject?: GitObjectGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** The Code of Conduct for a repository */
export interface CodeOfConductGenqlSelection {
  /** The body of the Code of Conduct */
  body?: boolean | number;
  id?: boolean | number;
  /** The key for the Code of Conduct */
  key?: boolean | number;
  /** The formal name of the Code of Conduct */
  name?: boolean | number;
  /** The HTTP path for this Code of Conduct */
  resourcePath?: boolean | number;
  /** The HTTP URL for this Code of Conduct */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a comment. */
export interface CommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The user who authored the deleted comment. */
  deletedCommentAuthor?: ActorGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git commit. */
export interface CommitGenqlSelection {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: boolean | number;
  /** The number of additions in this commit. */
  additions?: boolean | number;
  /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */
  associatedPullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for pull requests. */
      orderBy?: PullRequestOrder | null;
    };
  };
  /** Authorship details of the commit. */
  author?: GitActorGenqlSelection;
  /** Check if the committer and the author match. */
  authoredByCommitter?: boolean | number;
  /** The datetime when this commit was authored. */
  authoredDate?: boolean | number;
  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   *
   */
  authors?: GitActorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Fetches `git blame` information. */
  blame?: BlameGenqlSelection & {
    __args: {
      /** The file whose Git blame information you want. */
      path: Scalars['String'];
    };
  };
  /**
   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.
   * We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
   */
  changedFiles?: boolean | number;
  /** The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`. */
  changedFilesIfAvailable?: boolean | number;
  /** The check suites associated with a commit. */
  checkSuites?: CheckSuiteConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filters the check suites by this type. */
      filterBy?: CheckSuiteFilter | null;
    };
  };
  /** Comments made on the commit. */
  comments?: CommitCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path for this Git object */
  commitResourcePath?: boolean | number;
  /** The HTTP URL for this Git object */
  commitUrl?: boolean | number;
  /** The datetime when this commit was committed. */
  committedDate?: boolean | number;
  /** Check if committed via GitHub web UI. */
  committedViaWeb?: boolean | number;
  /** Committer details of the commit. */
  committer?: GitActorGenqlSelection;
  /** The number of deletions in this commit. */
  deletions?: boolean | number;
  /** The deployments associated with a commit. */
  deployments?: DeploymentConnectionGenqlSelection & {
    __args?: {
      /** Environments to list deployments for */
      environments?: Scalars['String'][] | null;
      /** Ordering options for deployments returned from the connection. */
      orderBy?: DeploymentOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The tree entry representing the file located at the given path. */
  file?: TreeEntryGenqlSelection & {
    __args: {
      /** The path for the file */
      path: Scalars['String'];
    };
  };
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  history?: CommitHistoryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If non-null, filters history to only show commits touching files under this path. */
      path?: Scalars['String'] | null;
      /** If non-null, filters history to only show commits with matching authorship. */
      author?: CommitAuthor | null;
      /** Allows specifying a beginning time or date for fetching commits. */
      since?: Scalars['GitTimestamp'] | null;
      /** Allows specifying an ending time or date for fetching commits. */
      until?: Scalars['GitTimestamp'] | null;
    };
  };
  id?: boolean | number;
  /** The Git commit message */
  message?: boolean | number;
  /** The Git commit message body */
  messageBody?: boolean | number;
  /** The commit message body rendered to HTML. */
  messageBodyHTML?: boolean | number;
  /** The Git commit message headline */
  messageHeadline?: boolean | number;
  /** The commit message headline rendered to HTML. */
  messageHeadlineHTML?: boolean | number;
  /** The Git object ID */
  oid?: boolean | number;
  /** The organization this commit was made on behalf of. */
  onBehalfOf?: OrganizationGenqlSelection;
  /** The parents of a commit. */
  parents?: CommitConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /**
   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC.
   * The datetime when this commit was pushed.
   */
  pushedDate?: boolean | number;
  /** The Repository this commit belongs to */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this commit */
  resourcePath?: boolean | number;
  /** Commit signing information, if present. */
  signature?: GitSignatureGenqlSelection;
  /** Status information for this commit */
  status?: StatusGenqlSelection;
  /** Check and Status rollup information for this commit. */
  statusCheckRollup?: StatusCheckRollupGenqlSelection;
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  submodules?: SubmoduleConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl?: boolean | number;
  /** Commit's root Tree */
  tree?: TreeGenqlSelection;
  /** The HTTP path for the tree of this commit */
  treeResourcePath?: boolean | number;
  /** The HTTP URL for the tree of this commit */
  treeUrl?: boolean | number;
  /** The HTTP URL for this commit */
  url?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies an author for filtering Git commits. */
export interface CommitAuthor {
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  id?: Scalars['ID'] | null;
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: Scalars['String'][] | null;
}

/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParametersGenqlSelection {
  /** How this rule will appear to users. */
  name?: boolean | number;
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | number;
  /** The operator to use for matching. */
  operator?: boolean | number;
  /** The pattern to match with. */
  pattern?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParametersInput {
  /** How this rule will appear to users. */
  name?: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Scalars['Boolean'] | null;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
}

/** Represents a comment on a given Commit. */
export interface CommitCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** Identifies the comment body. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the commit associated with the comment, if the commit exists. */
  commit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Identifies the file path associated with the comment. */
  path?: boolean | number;
  /** Identifies the line position associated with the comment. */
  position?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path permalink for this commit comment. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL permalink for this commit comment. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CommitComment. */
export interface CommitCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CommitCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CommitCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CommitCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CommitCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A thread of comments on a commit. */
export interface CommitCommentThreadGenqlSelection {
  /** The comments that exist in this thread. */
  comments?: CommitCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The commit the comments were made on. */
  commit?: CommitGenqlSelection;
  id?: boolean | number;
  /** The file the comments were made on. */
  path?: boolean | number;
  /** The position in the diff for the commit that the comment was made on. */
  position?: boolean | number;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Commit. */
export interface CommitConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CommitEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CommitGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for commit contribution connections. */
export interface CommitContributionOrder {
  /** The field by which to order commit contributions. */
  field: CommitContributionOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepositoryGenqlSelection {
  /** The commit contributions, each representing a day. */
  contributions?: CreatedCommitContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for commit contributions returned from the connection. */
      orderBy?: CommitContributionOrder | null;
    };
  };
  /** The repository in which the commits were made. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath?: boolean | number;
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CommitEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CommitGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Commit. */
export interface CommitHistoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CommitEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CommitGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A message to include with a new commit */
export interface CommitMessage {
  /** The headline of the message. */
  headline: Scalars['String'];
  /** The body of the message. */
  body?: Scalars['String'] | null;
}

/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParametersGenqlSelection {
  /** How this rule will appear to users. */
  name?: boolean | number;
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | number;
  /** The operator to use for matching. */
  operator?: boolean | number;
  /** The pattern to match with. */
  pattern?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParametersInput {
  /** How this rule will appear to users. */
  name?: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Scalars['Boolean'] | null;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
}

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * `repositoryNameWithOwner` and `branchName`.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using `repositoryNameWithOwner` and `branchName`:
 *
 *     {
 *       "repositoryNameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 *
 *
 */
export interface CommittableBranch {
  /** The Node ID of the Ref to be updated. */
  id?: Scalars['ID'] | null;
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: Scalars['String'] | null;
  /** The unqualified name of the branch to append the commit to. */
  branchName?: Scalars['String'] | null;
}

/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParametersGenqlSelection {
  /** How this rule will appear to users. */
  name?: boolean | number;
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | number;
  /** The operator to use for matching. */
  operator?: boolean | number;
  /** The pattern to match with. */
  pattern?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParametersInput {
  /** How this rule will appear to users. */
  name?: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Scalars['Boolean'] | null;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
}

/** Represents a comparison between two commit revisions. */
export interface ComparisonGenqlSelection {
  /** The number of commits ahead of the base branch. */
  aheadBy?: boolean | number;
  /** The base revision of this comparison. */
  baseTarget?: GitObjectGenqlSelection;
  /** The number of commits behind the base branch. */
  behindBy?: boolean | number;
  /** The commits which compose this comparison. */
  commits?: ComparisonCommitConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The head revision of this comparison. */
  headTarget?: GitObjectGenqlSelection;
  id?: boolean | number;
  /** The status of this comparison. */
  status?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Commit. */
export interface ComparisonCommitConnectionGenqlSelection {
  /** The total count of authors and co-authors across all commits. */
  authorCount?: boolean | number;
  /** A list of edges. */
  edges?: CommitEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CommitGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Reference originated in a different repository. */
  isCrossRepository?: boolean | number;
  /** Issue or pull request that made the reference. */
  source?: ReferencedSubjectGenqlSelection;
  /** Issue or pull request which was connected. */
  subject?: ReferencedSubjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The Contributing Guidelines for a repository. */
export interface ContributingGuidelinesGenqlSelection {
  /** The body of the Contributing Guidelines. */
  body?: boolean | number;
  /** The HTTP path for the Contributing Guidelines. */
  resourcePath?: boolean | number;
  /** The HTTP URL for the Contributing Guidelines. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface ContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  on_CreatedCommitContribution?: CreatedCommitContributionGenqlSelection;
  on_CreatedIssueContribution?: CreatedIssueContributionGenqlSelection;
  on_CreatedPullRequestContribution?: CreatedPullRequestContributionGenqlSelection;
  on_CreatedPullRequestReviewContribution?: CreatedPullRequestReviewContributionGenqlSelection;
  on_CreatedRepositoryContribution?: CreatedRepositoryContributionGenqlSelection;
  on_JoinedGitHubContribution?: JoinedGitHubContributionGenqlSelection;
  on_RestrictedContribution?: RestrictedContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendarGenqlSelection {
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors?: boolean | number;
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween?: boolean | number;
  /** A list of the months of contributions in this calendar. */
  months?: ContributionCalendarMonthGenqlSelection;
  /** The count of total contributions in the calendar. */
  totalContributions?: boolean | number;
  /** A list of the weeks of contributions in this calendar. */
  weeks?: ContributionCalendarWeekGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDayGenqlSelection {
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color?: boolean | number;
  /** How many contributions were made by the user on this day. */
  contributionCount?: boolean | number;
  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */
  contributionLevel?: boolean | number;
  /** The day this square represents. */
  date?: boolean | number;
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonthGenqlSelection {
  /** The date of the first day of this month. */
  firstDay?: boolean | number;
  /** The name of the month. */
  name?: boolean | number;
  /** How many weeks started in this month. */
  totalWeeks?: boolean | number;
  /** The year the month occurred in. */
  year?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeekGenqlSelection {
  /** The days of contributions in this week. */
  contributionDays?: ContributionCalendarDayGenqlSelection;
  /** The date of the earliest square in this week. */
  firstDay?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for contribution connections. */
export interface ContributionOrder {
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollectionGenqlSelection {
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository?: CommitContributionsByRepositoryGenqlSelection & {
    __args?: {
      /** How many repositories should be included. */
      maxRepositories?: Scalars['Int'] | null;
    };
  };
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar?: ContributionCalendarGenqlSelection;
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears?: boolean | number;
  /**
   * Determine if this collection's time span ends in the current month.
   *
   */
  doesEndInCurrentMonth?: boolean | number;
  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate?: boolean | number;
  /** The ending date and time of this collection. */
  endedAt?: boolean | number;
  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstIssueContribution?: CreatedIssueOrRestrictedContributionGenqlSelection;
  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution?: CreatedPullRequestOrRestrictedContributionGenqlSelection;
  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */
  firstRepositoryContribution?: CreatedRepositoryOrRestrictedContributionGenqlSelection;
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast?: boolean | number;
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions?: boolean | number;
  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions?: boolean | number;
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay?: boolean | number;
  /** A list of issues the user opened. */
  issueContributions?: CreatedIssueContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Should the user's first issue ever be excluded from the result. */
      excludeFirst?: Scalars['Boolean'] | null;
      /** Should the user's most commented issue be excluded from the result. */
      excludePopular?: Scalars['Boolean'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository?: IssueContributionsByRepositoryGenqlSelection & {
    __args?: {
      /** How many repositories should be included. */
      maxRepositories?: Scalars['Int'] | null;
      /** Should the user's first issue ever be excluded from the result. */
      excludeFirst?: Scalars['Boolean'] | null;
      /** Should the user's most commented issue be excluded from the result. */
      excludePopular?: Scalars['Boolean'] | null;
    };
  };
  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution?: JoinedGitHubContributionGenqlSelection;
  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate?: boolean | number;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   *
   */
  mostRecentCollectionWithActivity?: ContributionsCollectionGenqlSelection;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   *
   */
  mostRecentCollectionWithoutActivity?: ContributionsCollectionGenqlSelection;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   *
   */
  popularIssueContribution?: CreatedIssueContributionGenqlSelection;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   *
   */
  popularPullRequestContribution?: CreatedPullRequestContributionGenqlSelection;
  /** Pull request contributions made by the user. */
  pullRequestContributions?: CreatedPullRequestContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Should the user's first pull request ever be excluded from the result. */
      excludeFirst?: Scalars['Boolean'] | null;
      /** Should the user's most commented pull request be excluded from the result. */
      excludePopular?: Scalars['Boolean'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository?: PullRequestContributionsByRepositoryGenqlSelection & {
    __args?: {
      /** How many repositories should be included. */
      maxRepositories?: Scalars['Int'] | null;
      /** Should the user's first pull request ever be excluded from the result. */
      excludeFirst?: Scalars['Boolean'] | null;
      /** Should the user's most commented pull request be excluded from the result. */
      excludePopular?: Scalars['Boolean'] | null;
    };
  };
  /**
   * Pull request review contributions made by the user. Returns the most recently
   * submitted review for each PR reviewed by the user.
   *
   */
  pullRequestReviewContributions?: CreatedPullRequestReviewContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository?: PullRequestReviewContributionsByRepositoryGenqlSelection & {
    __args?: {
      /** How many repositories should be included. */
      maxRepositories?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions?: CreatedRepositoryContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Should the user's first repository ever be excluded from the result. */
      excludeFirst?: Scalars['Boolean'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount?: boolean | number;
  /** The beginning date and time of this collection. */
  startedAt?: boolean | number;
  /** How many commits were made by the user in this time span. */
  totalCommitContributions?: boolean | number;
  /** How many issues the user opened. */
  totalIssueContributions?:
    | {
        __args: {
          /** Should the user's first issue ever be excluded from this count. */
          excludeFirst?: Scalars['Boolean'] | null;
          /** Should the user's most commented issue be excluded from this count. */
          excludePopular?: Scalars['Boolean'] | null;
        };
      }
    | boolean
    | number;
  /** How many pull requests the user opened. */
  totalPullRequestContributions?:
    | {
        __args: {
          /** Should the user's first pull request ever be excluded from this count. */
          excludeFirst?: Scalars['Boolean'] | null;
          /** Should the user's most commented pull request be excluded from this count. */
          excludePopular?: Scalars['Boolean'] | null;
        };
      }
    | boolean
    | number;
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions?: boolean | number;
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits?: boolean | number;
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues?:
    | {
        __args: {
          /** Should the user's first issue ever be excluded from this count. */
          excludeFirst?: Scalars['Boolean'] | null;
          /** Should the user's most commented issue be excluded from this count. */
          excludePopular?: Scalars['Boolean'] | null;
        };
      }
    | boolean
    | number;
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews?: boolean | number;
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests?:
    | {
        __args: {
          /** Should the user's first pull request ever be excluded from this count. */
          excludeFirst?: Scalars['Boolean'] | null;
          /** Should the user's most commented pull request be excluded from this count. */
          excludePopular?: Scalars['Boolean'] | null;
        };
      }
    | boolean
    | number;
  /** How many repositories the user created. */
  totalRepositoryContributions?:
    | {
        __args: {
          /** Should the user's first repository ever be excluded from this count. */
          excludeFirst?: Scalars['Boolean'] | null;
        };
      }
    | boolean
    | number;
  /** The user who made the contributions in this collection. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssueInput {
  /** The ProjectCard ID to convert. */
  projectCardId: Scalars['ID'];
  /** The ID of the repository to create the issue in. */
  repositoryId: Scalars['ID'];
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: Scalars['String'] | null;
  /** The body of the newly created issue. */
  body?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated ProjectCard. */
  projectCard?: ProjectCardGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ConvertPullRequestToDraft */
export interface ConvertPullRequestToDraftInput {
  /** ID of the pull request to convert to draft */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ConvertPullRequestToDraft */
export interface ConvertPullRequestToDraftPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that is now a draft. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** The HTTP path for this convert to draft event. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this convert to draft event. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'converted_to_discussion' event on a given issue. */
export interface ConvertedToDiscussionEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The discussion that the issue was converted into. */
  discussion?: DiscussionGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CopyProjectV2 */
export interface CopyProjectV2Input {
  /** The ID of the source Project to copy. */
  projectId: Scalars['ID'];
  /** The owner ID of the new project. */
  ownerId: Scalars['ID'];
  /** The title of the project. */
  title: Scalars['String'];
  /** Include draft issues in the new project */
  includeDraftIssues?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CopyProjectV2 */
export interface CopyProjectV2PayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The copied project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateAttributionInvitation */
export interface CreateAttributionInvitationInput {
  /** The Node ID of the owner scoping the reattributable data. */
  ownerId: Scalars['ID'];
  /** The Node ID of the account owning the data to reattribute. */
  sourceId: Scalars['ID'];
  /** The Node ID of the account which may claim the data. */
  targetId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateAttributionInvitation */
export interface CreateAttributionInvitationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The owner scoping the reattributable data. */
  owner?: OrganizationGenqlSelection;
  /** The account owning the data to reattribute. */
  source?: ClaimableGenqlSelection;
  /** The account which may claim the data. */
  target?: ClaimableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRuleInput {
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  pattern: Scalars['String'];
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: Scalars['Boolean'] | null;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Scalars['Int'] | null;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: Scalars['Boolean'] | null;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: Scalars['Boolean'] | null;
  /** Is branch creation a protected operation. */
  blocksCreations?: Scalars['Boolean'] | null;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: Scalars['Boolean'] | null;
  /** Can this branch be deleted. */
  allowsDeletions?: Scalars['Boolean'] | null;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: Scalars['Boolean'] | null;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: Scalars['Boolean'] | null;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: Scalars['Boolean'] | null;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: Scalars['Boolean'] | null;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: Scalars['Boolean'] | null;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: Scalars['Boolean'] | null;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: Scalars['ID'][] | null;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: Scalars['ID'][] | null;
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: Scalars['ID'][] | null;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: Scalars['Boolean'] | null;
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: Scalars['ID'][] | null;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Scalars['String'][] | null;
  /** The list of required status checks */
  requiredStatusChecks?: RequiredStatusCheckInput[] | null;
  /** Are successful deployments required before merging. */
  requiresDeployments?: Scalars['Boolean'] | null;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: Scalars['String'][] | null;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: Scalars['Boolean'] | null;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: Scalars['Boolean'] | null;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: Scalars['Boolean'] | null;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayloadGenqlSelection {
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateCheckRun */
export interface CreateCheckRunInput {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the check. */
  name: Scalars['String'];
  /** The SHA of the head commit. */
  headSha: Scalars['GitObjectID'];
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: Scalars['URI'] | null;
  /** A reference for the run on the integrator's system. */
  externalId?: Scalars['String'] | null;
  /** The current status. */
  status?: RequestableCheckStatusState | null;
  /** The time that the check run began. */
  startedAt?: Scalars['DateTime'] | null;
  /** The final conclusion of the check. */
  conclusion?: CheckConclusionState | null;
  /** The time that the check run finished. */
  completedAt?: Scalars['DateTime'] | null;
  /** Descriptive details about the run. */
  output?: CheckRunOutput | null;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: CheckRunAction[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayloadGenqlSelection {
  /** The newly created check run. */
  checkRun?: CheckRunGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateCheckSuite */
export interface CreateCheckSuiteInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The SHA of the head commit. */
  headSha: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayloadGenqlSelection {
  /** The newly created check suite. */
  checkSuite?: CheckSuiteGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateCommitOnBranch */
export interface CreateCommitOnBranchInput {
  /** The Ref to be updated.  Must be a branch. */
  branch: CommittableBranch;
  /** A description of changes to files in this commit. */
  fileChanges?: FileChanges | null;
  /** The commit message the be included with the commit. */
  message: CommitMessage;
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateCommitOnBranch */
export interface CreateCommitOnBranchPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new commit. */
  commit?: CommitGenqlSelection;
  /** The ref which has been updated to point to the new commit. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateDiscussion */
export interface CreateDiscussionInput {
  /** The id of the repository on which to create the discussion. */
  repositoryId: Scalars['ID'];
  /** The title of the discussion. */
  title: Scalars['String'];
  /** The body of the discussion. */
  body: Scalars['String'];
  /** The id of the discussion category to associate with this discussion. */
  categoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateDiscussion */
export interface CreateDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that was just created. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationInput {
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: Scalars['ID'];
  /** The login of the new organization. */
  login: Scalars['String'];
  /** The profile name of the new organization. */
  profileName: Scalars['String'];
  /** The email used for sending billing receipts. */
  billingEmail: Scalars['String'];
  /** The logins for the administrators of the new organization. */
  adminLogins: Scalars['String'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise that owns the created organization. */
  enterprise?: EnterpriseGenqlSelection;
  /** The organization that was created. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateEnvironment */
export interface CreateEnvironmentInput {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the environment. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateEnvironment */
export interface CreateEnvironmentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new or existing environment. */
  environment?: EnvironmentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryInput {
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  name?: Scalars['String'] | null;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The IP allow list entry that was created. */
  ipAllowListEntry?: IpAllowListEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateIssue */
export interface CreateIssueInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The title for the issue. */
  title: Scalars['String'];
  /** The body for the issue description. */
  body?: Scalars['String'] | null;
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: Scalars['ID'][] | null;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: Scalars['ID'] | null;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: Scalars['ID'][] | null;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: Scalars['ID'][] | null;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new issue. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateLinkedBranch */
export interface CreateLinkedBranchInput {
  /** ID of the issue to link to. */
  issueId: Scalars['ID'];
  /** The commit SHA to base the new branch on. */
  oid: Scalars['GitObjectID'];
  /** The name of the new branch. Defaults to issue number and title. */
  name?: Scalars['String'] | null;
  /** ID of the repository to create the branch in. Defaults to the issue repository. */
  repositoryId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateLinkedBranch */
export interface CreateLinkedBranchPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was linked to. */
  issue?: IssueGenqlSelection;
  /** The new branch issue reference. */
  linkedBranch?: LinkedBranchGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateMigrationSource */
export interface CreateMigrationSourceInput {
  /** The migration source name. */
  name: Scalars['String'];
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: Scalars['String'] | null;
  /** The migration source access token. */
  accessToken?: Scalars['String'] | null;
  /** The migration source type. */
  type: MigrationSourceType;
  /** The ID of the organization that will own the migration source. */
  ownerId: Scalars['ID'];
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateMigrationSource */
export interface CreateMigrationSourcePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The created migration source. */
  migrationSource?: MigrationSourceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateProject */
export interface CreateProjectInput {
  /** The owner ID to create the project under. */
  ownerId: Scalars['ID'];
  /** The name of project. */
  name: Scalars['String'];
  /** The description of project. */
  body?: Scalars['String'] | null;
  /** The name of the GitHub-provided template. */
  template?: ProjectTemplate | null;
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: Scalars['ID'][] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateProject */
export interface CreateProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new project. */
  project?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateProjectV2Field */
export interface CreateProjectV2FieldInput {
  /** The ID of the Project to create the field in. */
  projectId: Scalars['ID'];
  /** The data type of the field. */
  dataType: ProjectV2CustomFieldType;
  /** The name of the field. */
  name: Scalars['String'];
  /** Options for a single select field. At least one value is required if data_type is SINGLE_SELECT */
  singleSelectOptions?: ProjectV2SingleSelectFieldOptionInput[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateProjectV2Field */
export interface CreateProjectV2FieldPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new field. */
  projectV2Field?: ProjectV2FieldConfigurationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateProjectV2 */
export interface CreateProjectV2Input {
  /** The owner ID to create the project under. */
  ownerId: Scalars['ID'];
  /** The title of the project. */
  title: Scalars['String'];
  /** The repository to link the project to. */
  repositoryId?: Scalars['ID'] | null;
  /** The team to link the project to. The team will be granted read permissions. */
  teamId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateProjectV2 */
export interface CreateProjectV2PayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreatePullRequest */
export interface CreatePullRequestInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   *
   */
  baseRefName: Scalars['String'];
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   *
   */
  headRefName: Scalars['String'];
  /** The Node ID of the head repository. */
  headRepositoryId?: Scalars['ID'] | null;
  /** The title of the pull request. */
  title: Scalars['String'];
  /** The contents of the pull request. */
  body?: Scalars['String'] | null;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: Scalars['Boolean'] | null;
  /** Indicates whether this pull request should be a draft. */
  draft?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new pull request. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateRef */
export interface CreateRefInput {
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: Scalars['ID'];
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: Scalars['String'];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateRef */
export interface CreateRefPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created ref. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateRepository */
export interface CreateRepositoryInput {
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId?: Scalars['ID'] | null;
  /** A short description of the new repository. */
  description?: Scalars['String'] | null;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: Scalars['Boolean'] | null;
  /** The URL for a web page about this repository. */
  homepageUrl?: Scalars['URI'] | null;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: Scalars['Boolean'] | null;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: Scalars['Boolean'] | null;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  teamId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateRepositoryRuleset */
export interface CreateRepositoryRulesetInput {
  /** The global relay id of the source in which a new ruleset should be created in. */
  sourceId: Scalars['ID'];
  /** The name of the ruleset. */
  name: Scalars['String'];
  /** The target of the ruleset. */
  target?: RepositoryRulesetTarget | null;
  /** The list of rules for this ruleset */
  rules?: RepositoryRuleInput[] | null;
  /** The set of conditions for this ruleset */
  conditions: RepositoryRuleConditionsInput;
  /** The enforcement level for this ruleset */
  enforcement: RuleEnforcement;
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: RepositoryRulesetBypassActorInput[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateRepositoryRuleset */
export interface CreateRepositoryRulesetPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created Ruleset. */
  ruleset?: RepositoryRulesetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateSponsorsListing */
export interface CreateSponsorsListingInput {
  /** The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted. */
  sponsorableLogin?: Scalars['String'] | null;
  /** The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information. */
  fiscalHostLogin?: Scalars['String'] | null;
  /** The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified. */
  fiscallyHostedProjectProfileUrl?: Scalars['String'] | null;
  /** The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified. */
  billingCountryOrRegionCode?: SponsorsCountryOrRegionCode | null;
  /** The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization. */
  residenceCountryOrRegionCode?: SponsorsCountryOrRegionCode | null;
  /** The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted. */
  contactEmail?: Scalars['String'] | null;
  /** Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported. */
  fullDescription?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateSponsorsListing */
export interface CreateSponsorsListingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new GitHub Sponsors profile. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateSponsorsTier */
export interface CreateSponsorsTierInput {
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: Scalars['ID'] | null;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: Scalars['String'] | null;
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Scalars['Int'];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  isRecurring?: Scalars['Boolean'] | null;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  repositoryId?: Scalars['ID'] | null;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: Scalars['String'] | null;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: Scalars['String'] | null;
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: Scalars['String'] | null;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: Scalars['String'];
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  publish?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateSponsorsTier */
export interface CreateSponsorsTierPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new tier. */
  sponsorsTier?: SponsorsTierGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateSponsorship */
export interface CreateSponsorshipInput {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Scalars['ID'] | null;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Scalars['String'] | null;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Scalars['ID'] | null;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Scalars['String'] | null;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: Scalars['ID'] | null;
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: Scalars['Int'] | null;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: Scalars['Boolean'] | null;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: Scalars['Boolean'] | null;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: SponsorshipPrivacy | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateSponsorship */
export interface CreateSponsorshipPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The sponsorship that was started. */
  sponsorship?: SponsorshipGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateSponsorships */
export interface CreateSponsorshipsInput {
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorships. */
  sponsorLogin: Scalars['String'];
  /** The list of maintainers to sponsor and for how much apiece. */
  sponsorships: BulkSponsorship[];
  /** Whether the sponsor should receive email updates from the sponsorables. */
  receiveEmails?: Scalars['Boolean'] | null;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship. */
  privacyLevel?: SponsorshipPrivacy | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateSponsorships */
export interface CreateSponsorshipsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The users and organizations who received a sponsorship. */
  sponsorables?: SponsorableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentInput {
  /**
   * The ID of the discussion to which the comment belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `discussionId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  discussionId?: Scalars['ID'] | null;
  /**
   * The content of the comment. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  body?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The new comment.
   */
  teamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of CreateTeamDiscussion */
export interface CreateTeamDiscussionInput {
  /**
   * The ID of the team to which the discussion belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `teamId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  teamId?: Scalars['ID'] | null;
  /**
   * The title of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `title` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  title?: Scalars['String'] | null;
  /**
   * The content of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  body?: Scalars['String'] | null;
  /**
   * If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `private` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  private?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The new discussion.
   */
  teamDiscussion?: TeamDiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContributionGenqlSelection {
  /** How many commits were made on this day to this repository by the user. */
  commitCount?: boolean | number;
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The repository the user made a commit in. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CreatedCommitContributionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CreatedCommitContributionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   *
   */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CreatedCommitContributionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CreatedCommitContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** The issue that was opened. */
  issue?: IssueGenqlSelection;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CreatedIssueContributionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CreatedIssueContributionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CreatedIssueContributionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CreatedIssueContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents either a issue the viewer can access or a restricted contribution. */
export interface CreatedIssueOrRestrictedContributionGenqlSelection {
  on_CreatedIssueContribution?: CreatedIssueContributionGenqlSelection;
  on_RestrictedContribution?: RestrictedContributionGenqlSelection;
  on_Contribution?: ContributionGenqlSelection;
  __typename?: boolean | number;
}

/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The pull request that was opened. */
  pullRequest?: PullRequestGenqlSelection;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CreatedPullRequestContributionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CreatedPullRequestContributionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CreatedPullRequestContributionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CreatedPullRequestContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents either a pull request the viewer can access or a restricted contribution. */
export interface CreatedPullRequestOrRestrictedContributionGenqlSelection {
  on_CreatedPullRequestContribution?: CreatedPullRequestContributionGenqlSelection;
  on_RestrictedContribution?: RestrictedContributionGenqlSelection;
  on_Contribution?: ContributionGenqlSelection;
  __typename?: boolean | number;
}

/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The pull request the user reviewed. */
  pullRequest?: PullRequestGenqlSelection;
  /** The review the user left on the pull request. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  /** The repository containing the pull request that the user reviewed. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CreatedPullRequestReviewContributionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CreatedPullRequestReviewContributionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CreatedPullRequestReviewContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The repository that was created. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: CreatedRepositoryContributionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: CreatedRepositoryContributionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface CreatedRepositoryContributionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: CreatedRepositoryContributionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents either a repository the viewer can access or a restricted contribution. */
export interface CreatedRepositoryOrRestrictedContributionGenqlSelection {
  on_CreatedRepositoryContribution?: CreatedRepositoryContributionGenqlSelection;
  on_RestrictedContribution?: RestrictedContributionGenqlSelection;
  on_Contribution?: ContributionGenqlSelection;
  __typename?: boolean | number;
}

/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Reference originated in a different repository. */
  isCrossRepository?: boolean | number;
  /** Identifies when the reference was made. */
  referencedAt?: boolean | number;
  /** The HTTP path for this pull request. */
  resourcePath?: boolean | number;
  /** Issue or pull request that made the reference. */
  source?: ReferencedSubjectGenqlSelection;
  /** Issue or pull request to which the reference was made. */
  target?: ReferencedSubjectGenqlSelection;
  /** The HTTP URL for this pull request. */
  url?: boolean | number;
  /** Checks if the target will be closed when the source is merged. */
  willCloseTarget?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** The reason why the suggested topic is declined. */
  reason: TopicSuggestionDeclineReason;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The declined topic. */
  topic?: TopicGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be deleted. */
export interface DeletableGenqlSelection {
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRuleInput {
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteDeployment */
export interface DeleteDeploymentInput {
  /** The Node ID of the deployment to be deleted. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteDiscussionComment */
export interface DeleteDiscussionCommentInput {
  /** The Node id of the discussion comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteDiscussionComment */
export interface DeleteDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion comment that was just deleted. */
  comment?: DiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteDiscussion */
export interface DeleteDiscussionInput {
  /** The id of the discussion to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteDiscussion */
export interface DeleteDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that was just deleted. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteEnvironment */
export interface DeleteEnvironmentInput {
  /** The Node ID of the environment to be deleted. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteEnvironment */
export interface DeleteEnvironmentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryInput {
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry?: IpAllowListEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteIssueComment */
export interface DeleteIssueCommentInput {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteIssue */
export interface DeleteIssueInput {
  /** The ID of the issue to delete. */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository the issue belonged to */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteLinkedBranch */
export interface DeleteLinkedBranchInput {
  /** The ID of the linked branch */
  linkedBranchId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteLinkedBranch */
export interface DeleteLinkedBranchPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue the linked branch was unlinked from. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProjectCard */
export interface DeleteProjectCardInput {
  /** The id of the card to delete. */
  cardId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The column the deleted card was in. */
  column?: ProjectColumnGenqlSelection;
  /** The deleted card ID. */
  deletedCardId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProjectColumn */
export interface DeleteProjectColumnInput {
  /** The id of the column to delete. */
  columnId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The deleted column ID. */
  deletedColumnId?: boolean | number;
  /** The project the deleted column was in. */
  project?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProject */
export interface DeleteProjectInput {
  /** The Project ID to update. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository or organization the project was removed from. */
  owner?: ProjectOwnerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProjectV2Field */
export interface DeleteProjectV2FieldInput {
  /** The ID of the field to delete. */
  fieldId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProjectV2Field */
export interface DeleteProjectV2FieldPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The deleted field. */
  projectV2Field?: ProjectV2FieldConfigurationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProjectV2 */
export interface DeleteProjectV2Input {
  /** The ID of the Project to delete. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated input type of DeleteProjectV2Item */
export interface DeleteProjectV2ItemInput {
  /** The ID of the Project from which the item should be removed. */
  projectId: Scalars['ID'];
  /** The ID of the item to be removed. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProjectV2Item */
export interface DeleteProjectV2ItemPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The ID of the deleted item. */
  deletedItemId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated return type of DeleteProjectV2 */
export interface DeleteProjectV2PayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The deleted Project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteProjectV2Workflow */
export interface DeleteProjectV2WorkflowInput {
  /** The ID of the workflow to be removed. */
  workflowId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteProjectV2Workflow */
export interface DeleteProjectV2WorkflowPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The ID of the deleted workflow. */
  deletedWorkflowId?: boolean | number;
  /** The project the deleted workflow was in. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentInput {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  /** The deleted pull request review comment. */
  pullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeletePullRequestReview */
export interface DeletePullRequestReviewInput {
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The deleted pull request review. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteRef */
export interface DeleteRefInput {
  /** The Node ID of the Ref to be deleted. */
  refId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteRepositoryRuleset */
export interface DeleteRepositoryRulesetInput {
  /** The global relay id of the repository ruleset to be deleted. */
  repositoryRulesetId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteRepositoryRuleset */
export interface DeleteRepositoryRulesetPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentInput {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionInput {
  /** The discussion ID to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DeleteVerifiableDomain */
export interface DeleteVerifiableDomainInput {
  /** The ID of the verifiable domain to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DeleteVerifiableDomain */
export interface DeleteVerifiableDomainPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The owning account from which the domain was deleted. */
  owner?: VerifiableDomainOwnerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle?: boolean | number;
  /** Object referenced by event. */
  subject?: MilestoneItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Dependabot Update for a dependency in a repository */
export interface DependabotUpdateGenqlSelection {
  /** The error from a dependency update */
  error?: DependabotUpdateErrorGenqlSelection;
  /** The associated pull request */
  pullRequest?: PullRequestGenqlSelection;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An error produced from a Dependabot Update */
export interface DependabotUpdateErrorGenqlSelection {
  /** The body of the error */
  body?: boolean | number;
  /** The error code */
  errorType?: boolean | number;
  /** The title of the error */
  title?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository deploy key. */
export interface DeployKeyGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The deploy key. */
  key?: boolean | number;
  /** Whether or not the deploy key is read only. */
  readOnly?: boolean | number;
  /** The deploy key title. */
  title?: boolean | number;
  /** Whether or not the deploy key has been verified. */
  verified?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DeployKey. */
export interface DeployKeyConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeployKeyEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeployKeyGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeployKeyEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeployKeyGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The deployment associated with the 'deployed' event. */
  deployment?: DeploymentGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** The ref associated with the 'deployed' event. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents triggered deployment instance. */
export interface DeploymentGenqlSelection {
  /** Identifies the commit sha of the deployment. */
  commit?: CommitGenqlSelection;
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the actor who triggered the deployment. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The deployment description. */
  description?: boolean | number;
  /** The latest environment to which this deployment was made. */
  environment?: boolean | number;
  id?: boolean | number;
  /** The latest environment to which this deployment was made. */
  latestEnvironment?: boolean | number;
  /** The latest status of this deployment. */
  latestStatus?: DeploymentStatusGenqlSelection;
  /** The original environment to which this deployment was made. */
  originalEnvironment?: boolean | number;
  /** Extra information that a deployment system might need. */
  payload?: boolean | number;
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref?: RefGenqlSelection;
  /** Identifies the repository associated with the deployment. */
  repository?: RepositoryGenqlSelection;
  /** The current state of the deployment. */
  state?: boolean | number;
  /** A list of statuses associated with the deployment. */
  statuses?: DeploymentStatusConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The deployment task. */
  task?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Deployment. */
export interface DeploymentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The deployment status that updated the deployment environment. */
  deploymentStatus?: DeploymentStatusGenqlSelection;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for deployment connections */
export interface DeploymentOrder {
  /** The field to order deployments by. */
  field: DeploymentOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A protection rule. */
export interface DeploymentProtectionRuleGenqlSelection {
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: boolean | number;
  /** The teams or users that can review the deployment */
  reviewers?: DeploymentReviewerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The timeout in minutes for this protection rule. */
  timeout?: boolean | number;
  /** The type of protection rule. */
  type?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DeploymentProtectionRule. */
export interface DeploymentProtectionRuleConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentProtectionRuleEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentProtectionRuleGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentProtectionRuleEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentProtectionRuleGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A request to deploy a workflow run to an environment. */
export interface DeploymentRequestGenqlSelection {
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove?: boolean | number;
  /** The target environment of the deployment */
  environment?: EnvironmentGenqlSelection;
  /** The teams or users that can review the deployment */
  reviewers?: DeploymentReviewerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The wait timer in minutes configured in the environment */
  waitTimer?: boolean | number;
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DeploymentRequest. */
export interface DeploymentRequestConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentRequestEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentRequestGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentRequestEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A deployment review. */
export interface DeploymentReviewGenqlSelection {
  /** The comment the user left. */
  comment?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The environments approved or rejected */
  environments?: EnvironmentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The decision of the user. */
  state?: boolean | number;
  /** The user that reviewed the deployment. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DeploymentReview. */
export interface DeploymentReviewConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentReviewEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentReviewGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentReviewEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Users and teams. */
export interface DeploymentReviewerGenqlSelection {
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for DeploymentReviewer. */
export interface DeploymentReviewerConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentReviewerEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentReviewerGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentReviewerEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentReviewerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Describes the status of a given deployment attempt. */
export interface DeploymentStatusGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the actor who triggered the deployment. */
  creator?: ActorGenqlSelection;
  /** Identifies the deployment associated with status. */
  deployment?: DeploymentGenqlSelection;
  /** Identifies the description of the deployment. */
  description?: boolean | number;
  /** Identifies the environment URL of the deployment. */
  environmentUrl?: boolean | number;
  id?: boolean | number;
  /** Identifies the log URL of the deployment. */
  logUrl?: boolean | number;
  /** Identifies the current state of the deployment. */
  state?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DeploymentStatusEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DeploymentStatusGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DeploymentStatusEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DeploymentStatusGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DequeuePullRequest */
export interface DequeuePullRequestInput {
  /** The ID of the pull request to be dequeued. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DequeuePullRequest */
export interface DequeuePullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The merge queue entry of the dequeued pull request. */
  mergeQueueEntry?: MergeQueueEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DisablePullRequestAutoMerge */
export interface DisablePullRequestAutoMergeInput {
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DisablePullRequestAutoMerge */
export interface DisablePullRequestAutoMergePayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request auto merge was disabled on. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Reference originated in a different repository. */
  isCrossRepository?: boolean | number;
  /** Issue or pull request from which the issue was disconnected. */
  source?: ReferencedSubjectGenqlSelection;
  /** Issue or pull request which was disconnected. */
  subject?: ReferencedSubjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A discussion in a repository. */
export interface DiscussionGenqlSelection {
  /** Reason that the conversation was locked. */
  activeLockReason?: boolean | number;
  /** The comment chosen as this discussion's answer, if any. */
  answer?: DiscussionCommentGenqlSelection;
  /** The time when a user chose this discussion's answer, if answered. */
  answerChosenAt?: boolean | number;
  /** The user who chose this discussion's answer, if answered. */
  answerChosenBy?: ActorGenqlSelection;
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** The main text of the discussion post. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** The category for this discussion. */
  category?: DiscussionCategoryGenqlSelection;
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** The replies to the discussion. */
  comments?: DiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Only return answered/unanswered discussions */
  isAnswered?: boolean | number;
  /** A list of labels associated with the object. */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** `true` if the object is locked */
  locked?: boolean | number;
  /** The number identifying this discussion within the repository. */
  number?: boolean | number;
  /** The poll associated with this discussion, if one exists. */
  poll?: DiscussionPollGenqlSelection;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The path for this discussion. */
  resourcePath?: boolean | number;
  /** Identifies the reason for the discussion's state. */
  stateReason?: boolean | number;
  /** The title of this discussion. */
  title?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** Number of upvotes that this subject has received. */
  upvoteCount?: boolean | number;
  /** The URL for this discussion. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A category for discussions in a repository. */
export interface DiscussionCategoryGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** A description of this category. */
  description?: boolean | number;
  /** An emoji representing this category. */
  emoji?: boolean | number;
  /** This category's emoji rendered as HTML. */
  emojiHTML?: boolean | number;
  id?: boolean | number;
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  isAnswerable?: boolean | number;
  /** The name of this category. */
  name?: boolean | number;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The slug of this category. */
  slug?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DiscussionCategory. */
export interface DiscussionCategoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DiscussionCategoryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DiscussionCategoryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DiscussionCategoryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DiscussionCategoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A comment on a discussion. */
export interface DiscussionCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The time when this replied-to comment was deleted */
  deletedAt?: boolean | number;
  /** The discussion this comment was created in */
  discussion?: DiscussionGenqlSelection;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Has this comment been chosen as the answer of its discussion? */
  isAnswer?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The threaded replies to this comment. */
  replies?: DiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The discussion comment this comment is a reply to */
  replyTo?: DiscussionCommentGenqlSelection;
  /** The path for this discussion comment. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** Number of upvotes that this subject has received. */
  upvoteCount?: boolean | number;
  /** The URL for this discussion comment. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Can the current user mark this comment as an answer? */
  viewerCanMarkAsAnswer?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Can the current user unmark this comment as an answer? */
  viewerCanUnmarkAsAnswer?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DiscussionComment. */
export interface DiscussionCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DiscussionCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DiscussionCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DiscussionCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Discussion. */
export interface DiscussionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DiscussionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DiscussionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DiscussionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of discussions can be ordered upon return. */
export interface DiscussionOrder {
  /** The field by which to order discussions. */
  field: DiscussionOrderField;
  /** The direction in which to order discussions by the specified field. */
  direction: OrderDirection;
}

/** A poll for a discussion. */
export interface DiscussionPollGenqlSelection {
  /** The discussion that this poll belongs to. */
  discussion?: DiscussionGenqlSelection;
  id?: boolean | number;
  /** The options for this poll. */
  options?: DiscussionPollOptionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** How to order the options for the discussion poll. */
      orderBy?: DiscussionPollOptionOrder | null;
    };
  };
  /** The question that is being asked by this poll. */
  question?: boolean | number;
  /** The total number of votes that have been cast for this poll. */
  totalVoteCount?: boolean | number;
  /** Indicates if the viewer has permission to vote in this poll. */
  viewerCanVote?: boolean | number;
  /** Indicates if the viewer has voted for any option in this poll. */
  viewerHasVoted?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An option for a discussion poll. */
export interface DiscussionPollOptionGenqlSelection {
  id?: boolean | number;
  /** The text for this option. */
  option?: boolean | number;
  /** The discussion poll that this option belongs to. */
  poll?: DiscussionPollGenqlSelection;
  /** The total number of votes that have been cast for this option. */
  totalVoteCount?: boolean | number;
  /** Indicates if the viewer has voted for this option in the poll. */
  viewerHasVoted?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for DiscussionPollOption. */
export interface DiscussionPollOptionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: DiscussionPollOptionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: DiscussionPollOptionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface DiscussionPollOptionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: DiscussionPollOptionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for discussion poll option connections. */
export interface DiscussionPollOptionOrder {
  /** The field to order poll options by. */
  field: DiscussionPollOptionOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Autogenerated input type of DismissPullRequestReview */
export interface DismissPullRequestReviewInput {
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review dismissal message. */
  message: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The dismissed pull request review. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export interface DismissRepositoryVulnerabilityAlertInput {
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: Scalars['ID'];
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: DismissReason;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
export interface DismissRepositoryVulnerabilityAlertPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert?: RepositoryVulnerabilityAlertGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A draft issue within a project. */
export interface DraftIssueGenqlSelection {
  /** A list of users to assigned to this draft issue. */
  assignees?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The body of the draft issue. */
  body?: boolean | number;
  /** The body of the draft issue rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body of the draft issue rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created this draft issue. */
  creator?: ActorGenqlSelection;
  id?: boolean | number;
  /** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
  projectV2Items?: ProjectV2ItemConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The title of the draft issue */
  title?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies a review comment to be left with a Pull Request Review. */
export interface DraftPullRequestReviewComment {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** Position in the file to leave a comment on. */
  position: Scalars['Int'];
  /** Body of the comment to leave. */
  body: Scalars['String'];
}

/** Specifies a review comment thread to be left with a Pull Request Review. */
export interface DraftPullRequestReviewThread {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars['Int'];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: DiffSide | null;
  /** The first line of the range to which the comment refers. */
  startLine?: Scalars['Int'] | null;
  /** The side of the diff on which the start line resides. */
  startSide?: DiffSide | null;
  /** Body of the comment to leave. */
  body: Scalars['String'];
}

/** Autogenerated input type of EnablePullRequestAutoMerge */
export interface EnablePullRequestAutoMergeInput {
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: Scalars['ID'];
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored. */
  commitHeadline?: Scalars['String'] | null;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored. */
  commitBody?: Scalars['String'] | null;
  /** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored. */
  mergeMethod?: PullRequestMergeMethod | null;
  /** The email address to associate with this merge. */
  authorEmail?: Scalars['String'] | null;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: Scalars['GitObjectID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of EnablePullRequestAutoMerge */
export interface EnablePullRequestAutoMergePayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request auto-merge was enabled on. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of EnqueuePullRequest */
export interface EnqueuePullRequestInput {
  /** The ID of the pull request to enqueue. */
  pullRequestId: Scalars['ID'];
  /** Add the pull request to the front of the queue. */
  jump?: Scalars['Boolean'] | null;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: Scalars['GitObjectID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of EnqueuePullRequest */
export interface EnqueuePullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The merge queue entry for the enqueued pull request. */
  mergeQueueEntry?: MergeQueueEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An account to manage multiple organizations with consolidated policy and billing. */
export interface EnterpriseGenqlSelection {
  /** The text of the announcement */
  announcement?: boolean | number;
  /** The expiration date of the announcement, if any */
  announcementExpiresAt?: boolean | number;
  /** Whether the announcement can be dismissed by the user */
  announcementUserDismissible?: boolean | number;
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo?: EnterpriseBillingInfoGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The description of the enterprise. */
  description?: boolean | number;
  /** The description of the enterprise as HTML. */
  descriptionHTML?: boolean | number;
  id?: boolean | number;
  /** The location of the enterprise. */
  location?: boolean | number;
  /** A list of users who are members of this enterprise. */
  members?: EnterpriseMemberConnectionGenqlSelection & {
    __args?: {
      /** Only return members within the organizations with these logins */
      organizationLogins?: Scalars['String'][] | null;
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for members returned from the connection. */
      orderBy?: EnterpriseMemberOrder | null;
      /** The role of the user in the enterprise organization or server. */
      role?: EnterpriseUserAccountMembershipRole | null;
      /** Only return members within the selected GitHub Enterprise deployment */
      deployment?: EnterpriseUserDeployment | null;
      /** Only return members with this two-factor authentication status. Does not include members who only have an account on a GitHub Enterprise Server instance. */
      hasTwoFactorEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The name of the enterprise. */
  name?: boolean | number;
  /** A list of organizations that belong to this enterprise. */
  organizations?: OrganizationConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** The viewer's role in an organization. */
      viewerOrganizationRole?: RoleInOrganization | null;
      /** Ordering options for organizations returned from the connection. */
      orderBy?: OrganizationOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
  ownerInfo?: EnterpriseOwnerInfoGenqlSelection;
  /** The HTTP path for this enterprise. */
  resourcePath?: boolean | number;
  /** The URL-friendly identifier for the enterprise. */
  slug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  url?: boolean | number;
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin?: boolean | number;
  /** The URL of the enterprise website. */
  websiteUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface EnterpriseAdministratorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseAdministratorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserGenqlSelection;
  /** The role of the administrator. */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitationGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The email of the person who was invited to the enterprise. */
  email?: boolean | number;
  /** The enterprise the invitation is for. */
  enterprise?: EnterpriseGenqlSelection;
  id?: boolean | number;
  /** The user who was invited to the enterprise. */
  invitee?: UserGenqlSelection;
  /** The user who created the invitation. */
  inviter?: UserGenqlSelection;
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseAdministratorInvitationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseAdministratorInvitationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseAdministratorInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for enterprise administrator invitation connections */
export interface EnterpriseAdministratorInvitationOrder {
  /** The field to order enterprise administrator invitations by. */
  field: EnterpriseAdministratorInvitationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryDataGenqlSelection {
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryGenqlSelection;
  on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryGenqlSelection;
  on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryGenqlSelection;
  on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfoGenqlSelection {
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount?: boolean | number;
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks?: boolean | number;
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota?: boolean | number;
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage?: boolean | number;
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage?: boolean | number;
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota?: boolean | number;
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage?: boolean | number;
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage?: boolean | number;
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses?: boolean | number;
  /** The total number of licenses allocated. */
  totalLicenses?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Enterprise. */
export interface EnterpriseConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for OrganizationInvitation. */
export interface EnterpriseFailedInvitationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseFailedInvitationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationInvitationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A failed invitation to be a member in an enterprise organization. */
export interface EnterpriseFailedInvitationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseIdentityProviderGenqlSelection {
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod?: boolean | number;
  /** The enterprise this identity provider belongs to. */
  enterprise?: EnterpriseGenqlSelection;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities?: ExternalIdentityConnectionGenqlSelection & {
    __args?: {
      /** Filter to external identities with valid org membership only */
      membersOnly?: Scalars['Boolean'] | null;
      /** Filter to external identities with the users login */
      login?: Scalars['String'] | null;
      /** Filter to external identities with the users userName/NameID attribute */
      userName?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate?: boolean | number;
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer?: boolean | number;
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes?: boolean | number;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod?: boolean | number;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object that is a member of an enterprise. */
export interface EnterpriseMemberGenqlSelection {
  on_EnterpriseUserAccount?: EnterpriseUserAccountGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseMemberEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseMemberGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseMemberGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for enterprise member connections. */
export interface EnterpriseMemberOrder {
  /** The field to order enterprise members by. */
  field: EnterpriseMemberOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Ordering options for enterprises. */
export interface EnterpriseOrder {
  /** The field to order enterprises by. */
  field: EnterpriseOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseOrganizationMembershipEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationGenqlSelection;
  /** The role of the user in the enterprise membership. */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseOutsideCollaboratorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserGenqlSelection;
  /** The enterprise organization repositories this user is a member of. */
  repositories?: EnterpriseRepositoryInfoConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for repositories. */
      orderBy?: RepositoryOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface EnterpriseOwnerInfoGenqlSelection {
  /** A list of all of the administrators for this enterprise. */
  admins?: EnterpriseAdministratorConnectionGenqlSelection & {
    __args?: {
      /** Only return members within the organizations with these logins */
      organizationLogins?: Scalars['String'][] | null;
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** The role to filter by. */
      role?: EnterpriseAdministratorRole | null;
      /** Ordering options for administrators returned from the connection. */
      orderBy?: EnterpriseMemberOrder | null;
      /** Only return administrators with this two-factor authentication status. */
      hasTwoFactorEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist?: boolean | number;
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The value for the allow private repository forking policy on the enterprise. */
  allowPrivateRepositoryForkingSettingPolicyValue?: boolean | number;
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The permission to find organizations for. */
      value: DefaultRepositoryPermissionField;
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** A list of domains owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  domains?: VerifiableDomainConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter whether or not the domain is verified. */
      isVerified?: Scalars['Boolean'] | null;
      /** Filter whether or not the domain is approved. */
      isApproved?: Scalars['Boolean'] | null;
      /** Ordering options for verifiable domains returned. */
      orderBy?: VerifiableDomainOrder | null;
    };
  };
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations?: EnterpriseServerInstallationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Whether or not to only return installations discovered via GitHub Connect. */
      connectedOnly?: Scalars['Boolean'] | null;
      /** Ordering options for Enterprise Server installations returned. */
      orderBy?: EnterpriseServerInstallationOrder | null;
    };
  };
  /** A list of failed invitations in the enterprise. */
  failedInvitations?: EnterpriseFailedInvitationConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting?: boolean | number;
  /** The IP addresses that are allowed to access resources owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope. */
  ipAllowListEntries?: IpAllowListEntryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for IP allow list entries returned. */
      orderBy?: IpAllowListEntryOrder | null;
    };
  };
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting?: boolean | number;
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission?: boolean | number;
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement?: boolean | number;
  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting?: boolean | number;
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting?: boolean | number;
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting?: boolean | number;
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting to find organizations for. */
      value: OrganizationMembersCanCreateRepositoriesSettingValue;
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting?: boolean | number;
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting?: boolean | number;
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider?: OIDCProviderGenqlSelection;
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators?: EnterpriseOutsideCollaboratorConnectionGenqlSelection & {
    __args?: {
      /** The login of one specific outside collaborator. */
      login?: Scalars['String'] | null;
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for outside collaborators returned from the connection. */
      orderBy?: EnterpriseMemberOrder | null;
      /** Only return outside collaborators on repositories with this visibility. */
      visibility?: RepositoryVisibility | null;
      /** Only return outside collaborators with this two-factor authentication status. */
      hasTwoFactorEnabled?: Scalars['Boolean'] | null;
      /** Only return outside collaborators within the organizations with these logins */
      organizationLogins?: Scalars['String'][] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations?: EnterpriseAdministratorInvitationConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for pending enterprise administrator invitations returned from the connection. */
      orderBy?: EnterpriseAdministratorInvitationOrder | null;
      /** The role to filter by. */
      role?: EnterpriseAdministratorRole | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations?: RepositoryInvitationConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for pending repository collaborator invitations returned from the connection. */
      orderBy?: RepositoryInvitationOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations?: EnterprisePendingMemberInvitationConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Only return invitations within the organizations with these logins */
      organizationLogins?: Scalars['String'][] | null;
      /** Only return invitations matching this invitation source */
      invitationSource?: OrganizationInvitationSource | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The SAML Identity Provider for the enterprise. */
  samlIdentityProvider?: EnterpriseIdentityProviderGenqlSelection;
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: IdentityProviderConfigurationState;
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** A list of members with a support entitlement. */
  supportEntitlements?: EnterpriseMemberConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for support entitlement users returned from the connection. */
      orderBy?: EnterpriseMemberOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting?: boolean | number;
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting?: boolean | number;
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations?: OrganizationConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The setting value to find organizations for. */
      value: Scalars['Boolean'];
      /** Ordering options for organizations with this setting. */
      orderBy?: OrganizationOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterprisePendingMemberInvitationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationInvitationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfoGenqlSelection {
  id?: boolean | number;
  /** Identifies if the repository is private or internal. */
  isPrivate?: boolean | number;
  /** The repository's name. */
  name?: boolean | number;
  /** The repository's name with owner. */
  nameWithOwner?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseRepositoryInfoEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseRepositoryInfoGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseRepositoryInfoGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An Enterprise Server installation. */
export interface EnterpriseServerInstallationGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName?: boolean | number;
  /** The host name of the Enterprise Server installation. */
  hostName?: boolean | number;
  id?: boolean | number;
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** User accounts on this Enterprise Server installation. */
  userAccounts?: EnterpriseServerUserAccountConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for Enterprise Server user accounts returned from the connection. */
      orderBy?: EnterpriseServerUserAccountOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads?: EnterpriseServerUserAccountsUploadConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
      orderBy?: EnterpriseServerUserAccountsUploadOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseServerInstallationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseServerInstallationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseServerInstallationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseServerInstallationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationMembershipConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseServerInstallationMembershipEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseServerInstallationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An Enterprise Server installation that a user is a member of. */
export interface EnterpriseServerInstallationMembershipEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseServerInstallationGenqlSelection;
  /** The role of the user in the enterprise membership. */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for Enterprise Server installation connections. */
export interface EnterpriseServerInstallationOrder {
  /** The field to order Enterprise Server installations by. */
  field: EnterpriseServerInstallationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** User emails belonging to this user account. */
  emails?: EnterpriseServerUserAccountEmailConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for Enterprise Server user account emails returned from the connection. */
      orderBy?: EnterpriseServerUserAccountEmailOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation?: EnterpriseServerInstallationGenqlSelection;
  id?: boolean | number;
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin?: boolean | number;
  /** The login of the user account on the Enterprise Server installation. */
  login?: boolean | number;
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName?: boolean | number;
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt?: boolean | number;
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseServerUserAccountEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseServerUserAccountGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccountGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmailGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The email address. */
  email?: boolean | number;
  id?: boolean | number;
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The user account to which the email belongs. */
  userAccount?: EnterpriseServerUserAccountGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseServerUserAccountEmailEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseServerUserAccountEmailGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccountEmailGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for Enterprise Server user account email connections. */
export interface EnterpriseServerUserAccountEmailOrder {
  /** The field to order emails by. */
  field: EnterpriseServerUserAccountEmailOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Ordering options for Enterprise Server user account connections. */
export interface EnterpriseServerUserAccountOrder {
  /** The field to order user accounts by. */
  field: EnterpriseServerUserAccountOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUploadGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The enterprise to which this upload belongs. */
  enterprise?: EnterpriseGenqlSelection;
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation?: EnterpriseServerInstallationGenqlSelection;
  id?: boolean | number;
  /** The name of the file uploaded. */
  name?: boolean | number;
  /** The synchronization state of the upload */
  syncState?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnterpriseServerUserAccountsUploadEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnterpriseServerUserAccountsUploadGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnterpriseServerUserAccountsUploadGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for Enterprise Server user accounts upload connections. */
export interface EnterpriseServerUserAccountsUploadOrder {
  /** The field to order user accounts uploads by. */
  field: EnterpriseServerUserAccountsUploadOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccountGenqlSelection {
  /** A URL pointing to the enterprise user account's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The enterprise in which this user account exists. */
  enterprise?: EnterpriseGenqlSelection;
  /** A list of Enterprise Server installations this user is a member of. */
  enterpriseInstallations?: EnterpriseServerInstallationMembershipConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for installations returned from the connection. */
      orderBy?: EnterpriseServerInstallationOrder | null;
      /** The role of the user in the installation. */
      role?: EnterpriseUserAccountMembershipRole | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** An identifier for the enterprise user account, a login or email address */
  login?: boolean | number;
  /** The name of the enterprise user account */
  name?: boolean | number;
  /** A list of enterprise organizations this user is a member of. */
  organizations?: EnterpriseOrganizationMembershipConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Ordering options for organizations returned from the connection. */
      orderBy?: OrganizationOrder | null;
      /** The role of the user in the enterprise organization. */
      role?: EnterpriseUserAccountMembershipRole | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path for this user. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this user. */
  url?: boolean | number;
  /** The user within the enterprise. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An environment. */
export interface EnvironmentGenqlSelection {
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The name of the environment */
  name?: boolean | number;
  /** The protection rules defined for this environment */
  protectionRules?: DeploymentProtectionRuleConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Environment. */
export interface EnvironmentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: EnvironmentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: EnvironmentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface EnvironmentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: EnvironmentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for environments */
export interface Environments {
  /** The field to order environments by. */
  field: EnvironmentOrderField;
  /** The direction in which to order environments by the specified field. */
  direction: OrderDirection;
}

/** An external identity provisioned by SAML SSO or SCIM. If SAML is configured on the organization, the external identity is visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. If SAML is configured on the enterprise, the external identity is visible to (1) enterprise owners, (2) enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface ExternalIdentityGenqlSelection {
  /** The GUID for this identity */
  guid?: boolean | number;
  id?: boolean | number;
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation?: OrganizationInvitationGenqlSelection;
  /** SAML Identity attributes */
  samlIdentity?: ExternalIdentitySamlAttributesGenqlSelection;
  /** SCIM Identity attributes */
  scimIdentity?: ExternalIdentityScimAttributesGenqlSelection;
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An attribute for the External Identity attributes collection */
export interface ExternalIdentityAttributeGenqlSelection {
  /** The attribute metadata as JSON */
  metadata?: boolean | number;
  /** The attribute name */
  name?: boolean | number;
  /** The attribute value */
  value?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ExternalIdentityEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ExternalIdentityGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ExternalIdentityEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ExternalIdentityGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributesGenqlSelection {
  /** SAML Identity attributes */
  attributes?: ExternalIdentityAttributeGenqlSelection;
  /** The emails associated with the SAML identity */
  emails?: UserEmailMetadataGenqlSelection;
  /** Family name of the SAML identity */
  familyName?: boolean | number;
  /** Given name of the SAML identity */
  givenName?: boolean | number;
  /** The groups linked to this identity in IDP */
  groups?: boolean | number;
  /** The NameID of the SAML identity */
  nameId?: boolean | number;
  /** The userName of the SAML identity */
  username?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributesGenqlSelection {
  /** The emails associated with the SCIM identity */
  emails?: UserEmailMetadataGenqlSelection;
  /** Family name of the SCIM identity */
  familyName?: boolean | number;
  /** Given name of the SCIM identity */
  givenName?: boolean | number;
  /** The groups linked to this identity in IDP */
  groups?: boolean | number;
  /** The userName of the SCIM identity */
  username?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export interface FileAddition {
  /** The path in the repository where the file will be located */
  path: Scalars['String'];
  /** The base64 encoded contents of the file */
  contents: Scalars['Base64String'];
}

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 *
 */
export interface FileChanges {
  /** Files to delete. */
  deletions?: FileDeletion[] | null;
  /** File to add or change. */
  additions?: FileAddition[] | null;
}

/** A command to delete the file at the given path as part of a commit. */
export interface FileDeletion {
  /** The path to delete */
  path: Scalars['String'];
}

/** Autogenerated input type of FollowOrganization */
export interface FollowOrganizationInput {
  /** ID of the organization to follow. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of FollowOrganization */
export interface FollowOrganizationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organization that was followed. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of FollowUser */
export interface FollowUserInput {
  /** ID of the user to follow. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of FollowUser */
export interface FollowUserPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The user that was followed. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface FollowerConnectionGenqlSelection {
  /** A list of edges. */
  edges?: UserEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface FollowingConnectionGenqlSelection {
  /** A list of edges. */
  edges?: UserEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A funding platform link for a repository. */
export interface FundingLinkGenqlSelection {
  /** The funding platform this link is for. */
  platform?: boolean | number;
  /** The configured URL for this funding link. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A generic hovercard context with a message and icon */
export interface GenericHovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Gist. */
export interface GistGenqlSelection {
  /** A list of comments associated with the gist */
  comments?: GistCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The gist description. */
  description?: boolean | number;
  /** The files in this gist. */
  files?: GistFileGenqlSelection & {
    __args?: {
      /** The maximum number of files to return. */
      limit?: Scalars['Int'] | null;
      /** The oid of the files to return */
      oid?: Scalars['GitObjectID'] | null;
    };
  };
  /** A list of forks associated with the gist */
  forks?: GistConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for gists returned from the connection */
      orderBy?: GistOrder | null;
    };
  };
  id?: boolean | number;
  /** Identifies if the gist is a fork. */
  isFork?: boolean | number;
  /** Whether the gist is public or not. */
  isPublic?: boolean | number;
  /** The gist name. */
  name?: boolean | number;
  /** The gist owner. */
  owner?: RepositoryOwnerGenqlSelection;
  /** Identifies when the gist was last pushed to. */
  pushedAt?: boolean | number;
  /** The HTML path to this resource. */
  resourcePath?: boolean | number;
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount?: boolean | number;
  /** A list of users who have starred this starrable. */
  stargazers?: StargazerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: StarOrder | null;
    };
  };
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this Gist. */
  url?: boolean | number;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a comment on an Gist. */
export interface GistCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the gist. */
  authorAssociation?: boolean | number;
  /** Identifies the comment body. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  /** The associated gist. */
  gist?: GistGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for GistComment. */
export interface GistCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: GistCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: GistCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface GistCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: GistCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Gist. */
export interface GistConnectionGenqlSelection {
  /** A list of edges. */
  edges?: GistEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: GistGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface GistEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: GistGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A file in a gist. */
export interface GistFileGenqlSelection {
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName?: boolean | number;
  /** The gist file encoding. */
  encoding?: boolean | number;
  /** The file extension from the file name. */
  extension?: boolean | number;
  /** Indicates if this file is an image. */
  isImage?: boolean | number;
  /** Whether the file's contents were truncated. */
  isTruncated?: boolean | number;
  /** The programming language this file is written in. */
  language?: LanguageGenqlSelection;
  /** The gist file name. */
  name?: boolean | number;
  /** The gist file size in bytes. */
  size?: boolean | number;
  /** UTF8 text data or null if the file is binary */
  text?:
    | {
        __args: {
          /** Optionally truncate the returned file to this length. */
          truncate?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for gist connections */
export interface GistOrder {
  /** The field to order repositories by. */
  field: GistOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActorGenqlSelection {
  /** A URL pointing to the author's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The timestamp of the Git action (authoring or committing). */
  date?: boolean | number;
  /** The email in the Git commit. */
  email?: boolean | number;
  /** The name in the Git commit. */
  name?: boolean | number;
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for GitActor. */
export interface GitActorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: GitActorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: GitActorGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface GitActorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: GitActorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents information about the GitHub instance. */
export interface GitHubMetadataGenqlSelection {
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha?: boolean | number;
  /** IP addresses that users connect to for git operations */
  gitIpAddresses?: boolean | number;
  /** IP addresses that GitHub Enterprise Importer uses for outbound connections */
  githubEnterpriseImporterIpAddresses?: boolean | number;
  /** IP addresses that service hooks are sent from */
  hookIpAddresses?: boolean | number;
  /** IP addresses that the importer connects from */
  importerIpAddresses?: boolean | number;
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable?: boolean | number;
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git object. */
export interface GitObjectGenqlSelection {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: boolean | number;
  /** The HTTP path for this Git object */
  commitResourcePath?: boolean | number;
  /** The HTTP URL for this Git object */
  commitUrl?: boolean | number;
  id?: boolean | number;
  /** The Git object ID */
  oid?: boolean | number;
  /** The Repository the Git object belongs to */
  repository?: RepositoryGenqlSelection;
  on_Blob?: BlobGenqlSelection;
  on_Commit?: CommitGenqlSelection;
  on_Tag?: TagGenqlSelection;
  on_Tree?: TreeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignatureGenqlSelection {
  /** Email used to sign this object. */
  email?: boolean | number;
  /** True if the signature is valid and verified by GitHub. */
  isValid?: boolean | number;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: boolean | number;
  /** ASCII-armored signature header from object. */
  signature?: boolean | number;
  /** GitHub user corresponding to the email signing this commit. */
  signer?: UserGenqlSelection;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state?: boolean | number;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: boolean | number;
  on_GpgSignature?: GpgSignatureGenqlSelection;
  on_SmimeSignature?: SmimeSignatureGenqlSelection;
  on_SshSignature?: SshSignatureGenqlSelection;
  on_UnknownSignature?: UnknownSignatureGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignatureGenqlSelection {
  /** Email used to sign this object. */
  email?: boolean | number;
  /** True if the signature is valid and verified by GitHub. */
  isValid?: boolean | number;
  /** Hex-encoded ID of the key that signed this object. */
  keyId?: boolean | number;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: boolean | number;
  /** ASCII-armored signature header from object. */
  signature?: boolean | number;
  /** GitHub user corresponding to the email signing this commit. */
  signer?: UserGenqlSelection;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state?: boolean | number;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export interface GrantEnterpriseOrganizationsMigratorRoleInput {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to grant the migrator role */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export interface GrantEnterpriseOrganizationsMigratorRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organizations that had the migrator role applied to for the given user. */
  organizations?: OrganizationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of GrantMigratorRole */
export interface GrantMigratorRoleInput {
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
  /** The user login or Team slug to grant the migrator role. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of GrantMigratorRole */
export interface GrantMigratorRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Did the operation succeed? */
  success?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef?: RefGenqlSelection;
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit?: CommitGenqlSelection;
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Detail needed to display a hovercard for a user */
export interface HovercardGenqlSelection {
  /** Each of the contexts for this hovercard */
  contexts?: HovercardContextGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An individual line of a hovercard */
export interface HovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  on_GenericHovercardContext?: GenericHovercardContextGenqlSelection;
  on_OrganizationTeamsHovercardContext?: OrganizationTeamsHovercardContextGenqlSelection;
  on_OrganizationsHovercardContext?: OrganizationsHovercardContextGenqlSelection;
  on_ReviewStatusHovercardContext?: ReviewStatusHovercardContextGenqlSelection;
  on_ViewerHovercardContext?: ViewerHovercardContextGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminInput {
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of a user to invite as an administrator. */
  invitee?: Scalars['String'] | null;
  /** The email of the person to invite as an administrator. */
  email?: Scalars['String'] | null;
  /** The role of the administrator. */
  role?: EnterpriseAdministratorRole | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The created enterprise administrator invitation. */
  invitation?: EnterpriseAdministratorInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntryGenqlSelection {
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the entry is currently active. */
  isActive?: boolean | number;
  /** The name of the IP allow list entry. */
  name?: boolean | number;
  /** The owner of the IP allow list entry. */
  owner?: IpAllowListOwnerGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: IpAllowListEntryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: IpAllowListEntryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface IpAllowListEntryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: IpAllowListEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for IP allow list entry connections. */
export interface IpAllowListEntryOrder {
  /** The field to order IP allow list entries by. */
  field: IpAllowListEntryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Types that can own an IP allow list. */
export interface IpAllowListOwnerGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Enterprise?: EnterpriseGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface IssueGenqlSelection {
  /** Reason that the conversation was locked. */
  activeLockReason?: boolean | number;
  /** A list of Users assigned to this object. */
  assignees?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** Identifies the body of the issue. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The http path for this issue body */
  bodyResourcePath?: boolean | number;
  /** Identifies the body of the issue rendered to text. */
  bodyText?: boolean | number;
  /** The http URL for this issue body */
  bodyUrl?: boolean | number;
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** A list of comments associated with the Issue. */
  comments?: IssueCommentConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issue comments returned from the connection. */
      orderBy?: IssueCommentOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: boolean | number;
  /** The hovercard information for this issue */
  hovercard?: HovercardGenqlSelection & {
    __args?: {
      /** Whether or not to include notification contexts */
      includeNotificationContexts?: Scalars['Boolean'] | null;
    };
  };
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  isPinned?: boolean | number;
  /** Is this issue read by the viewer */
  isReadByViewer?: boolean | number;
  /** A list of labels associated with the object. */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Branches linked to this issue. */
  linkedBranches?: LinkedBranchConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** `true` if the object is locked */
  locked?: boolean | number;
  /** Identifies the milestone associated with the issue. */
  milestone?: MilestoneGenqlSelection;
  /** Identifies the issue number. */
  number?: boolean | number;
  /** A list of Users that are participating in the Issue conversation. */
  participants?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** List of project cards associated with this issue. */
  projectCards?: ProjectCardConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of archived states to filter the cards by */
      archivedStates?: (ProjectCardArchivedState | null)[] | null;
    };
  };
  /** List of project items associated with this issue. */
  projectItems?: ProjectV2ItemConnectionGenqlSelection & {
    __args?: {
      /** Include archived items. */
      includeArchived?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Find a project by number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** A project to search for under the the owner. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this issue */
  resourcePath?: boolean | number;
  /** Identifies the state of the issue. */
  state?: boolean | number;
  /** Identifies the reason for the issue state. */
  stateReason?: boolean | number;
  /**
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timeline?: IssueTimelineConnectionGenqlSelection & {
    __args?: {
      /** Allows filtering timeline events by a `since` timestamp. */
      since?: Scalars['DateTime'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of events, comments, commits, etc. associated with the issue. */
  timelineItems?: IssueTimelineItemsConnectionGenqlSelection & {
    __args?: {
      /** Filter timeline items by a `since` timestamp. */
      since?: Scalars['DateTime'] | null;
      /** Skips the first _n_ elements in the list. */
      skip?: Scalars['Int'] | null;
      /** Filter timeline items by type. */
      itemTypes?: IssueTimelineItemsItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the issue title. */
  title?: boolean | number;
  /** Identifies the issue title rendered to HTML. */
  titleHTML?: boolean | number;
  /** A list of issues that track this issue */
  trackedInIssues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of issues tracked inside the current issue */
  trackedIssues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The number of tracked issues for this issue */
  trackedIssuesCount?:
    | {
        __args: {
          /** Limit the count to tracked issues with the specified states. */
          states?: (TrackedIssueStates | null)[] | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this issue */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: boolean | number;
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a comment on an Issue. */
export interface IssueCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: boolean | number;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** Identifies the issue associated with the comment. */
  issue?: IssueGenqlSelection;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   *
   */
  pullRequest?: PullRequestGenqlSelection;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this issue comment */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this issue comment */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for IssueComment. */
export interface IssueCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: IssueCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: IssueCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface IssueCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: IssueCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of issue comments can be ordered upon return. */
export interface IssueCommentOrder {
  /** The field in which to order issue comments by. */
  field: IssueCommentOrderField;
  /** The direction in which to order issue comments by the specified field. */
  direction: OrderDirection;
}

/** The connection type for Issue. */
export interface IssueConnectionGenqlSelection {
  /** A list of edges. */
  edges?: IssueEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: IssueGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepositoryGenqlSelection {
  /** The issue contributions. */
  contributions?: CreatedIssueContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** The repository in which the issues were opened. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface IssueEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which to filter lists of issues. */
export interface IssueFilters {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: Scalars['String'] | null;
  /** List issues created by given name. */
  createdBy?: Scalars['String'] | null;
  /** List issues where the list of label names exist on the issue. */
  labels?: Scalars['String'][] | null;
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: Scalars['String'] | null;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: Scalars['String'] | null;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: Scalars['String'] | null;
  /** List issues that have been updated at or after the given date. */
  since?: Scalars['DateTime'] | null;
  /** List issues filtered by the list of states given. */
  states?: IssueState[] | null;
  /** List issues subscribed to by viewer. */
  viewerSubscribed?: Scalars['Boolean'] | null;
}

/** Used for return value of Repository.issueOrPullRequest. */
export interface IssueOrPullRequestGenqlSelection {
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** Ways in which lists of issues can be ordered upon return. */
export interface IssueOrder {
  /** The field in which to order issues by. */
  field: IssueOrderField;
  /** The direction in which to order issues by the specified field. */
  direction: OrderDirection;
}

/** A repository issue template. */
export interface IssueTemplateGenqlSelection {
  /** The template purpose. */
  about?: boolean | number;
  /** The suggested assignees. */
  assignees?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The suggested issue body. */
  body?: boolean | number;
  /** The template filename. */
  filename?: boolean | number;
  /** The suggested issue labels */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The template name. */
  name?: boolean | number;
  /** The suggested issue title. */
  title?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnectionGenqlSelection {
  /** A list of edges. */
  edges?: IssueTimelineItemEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: IssueTimelineItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An item in an issue timeline */
export interface IssueTimelineItemGenqlSelection {
  on_AssignedEvent?: AssignedEventGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_Commit?: CommitGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_DemilestonedEvent?: DemilestonedEventGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_LabeledEvent?: LabeledEventGenqlSelection;
  on_LockedEvent?: LockedEventGenqlSelection;
  on_MilestonedEvent?: MilestonedEventGenqlSelection;
  on_ReferencedEvent?: ReferencedEventGenqlSelection;
  on_RenamedTitleEvent?: RenamedTitleEventGenqlSelection;
  on_ReopenedEvent?: ReopenedEventGenqlSelection;
  on_SubscribedEvent?: SubscribedEventGenqlSelection;
  on_TransferredEvent?: TransferredEventGenqlSelection;
  on_UnassignedEvent?: UnassignedEventGenqlSelection;
  on_UnlabeledEvent?: UnlabeledEventGenqlSelection;
  on_UnlockedEvent?: UnlockedEventGenqlSelection;
  on_UnsubscribedEvent?: UnsubscribedEventGenqlSelection;
  on_UserBlockedEvent?: UserBlockedEventGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_GitObject?: GitObjectGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Minimizable?: MinimizableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  __typename?: boolean | number;
}

/** An edge in a connection. */
export interface IssueTimelineItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: IssueTimelineItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An item in an issue timeline */
export interface IssueTimelineItemsGenqlSelection {
  on_AddedToProjectEvent?: AddedToProjectEventGenqlSelection;
  on_AssignedEvent?: AssignedEventGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_CommentDeletedEvent?: CommentDeletedEventGenqlSelection;
  on_ConnectedEvent?: ConnectedEventGenqlSelection;
  on_ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEventGenqlSelection;
  on_ConvertedToDiscussionEvent?: ConvertedToDiscussionEventGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_DemilestonedEvent?: DemilestonedEventGenqlSelection;
  on_DisconnectedEvent?: DisconnectedEventGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_LabeledEvent?: LabeledEventGenqlSelection;
  on_LockedEvent?: LockedEventGenqlSelection;
  on_MarkedAsDuplicateEvent?: MarkedAsDuplicateEventGenqlSelection;
  on_MentionedEvent?: MentionedEventGenqlSelection;
  on_MilestonedEvent?: MilestonedEventGenqlSelection;
  on_MovedColumnsInProjectEvent?: MovedColumnsInProjectEventGenqlSelection;
  on_PinnedEvent?: PinnedEventGenqlSelection;
  on_ReferencedEvent?: ReferencedEventGenqlSelection;
  on_RemovedFromProjectEvent?: RemovedFromProjectEventGenqlSelection;
  on_RenamedTitleEvent?: RenamedTitleEventGenqlSelection;
  on_ReopenedEvent?: ReopenedEventGenqlSelection;
  on_SubscribedEvent?: SubscribedEventGenqlSelection;
  on_TransferredEvent?: TransferredEventGenqlSelection;
  on_UnassignedEvent?: UnassignedEventGenqlSelection;
  on_UnlabeledEvent?: UnlabeledEventGenqlSelection;
  on_UnlockedEvent?: UnlockedEventGenqlSelection;
  on_UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEventGenqlSelection;
  on_UnpinnedEvent?: UnpinnedEventGenqlSelection;
  on_UnsubscribedEvent?: UnsubscribedEventGenqlSelection;
  on_UserBlockedEvent?: UserBlockedEventGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Minimizable?: MinimizableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnectionGenqlSelection {
  /** A list of edges. */
  edges?: IssueTimelineItemsEdgeGenqlSelection;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount?: boolean | number;
  /** A list of nodes. */
  nodes?: IssueTimelineItemsGenqlSelection;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount?: boolean | number;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface IssueTimelineItemsEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: IssueTimelineItemsGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export interface LabelGenqlSelection {
  /** Identifies the label color. */
  color?: boolean | number;
  /** Identifies the date and time when the label was created. */
  createdAt?: boolean | number;
  /** A brief description of this label. */
  description?: boolean | number;
  id?: boolean | number;
  /** Indicates whether or not this is a default label. */
  isDefault?: boolean | number;
  /** A list of issues associated with this label. */
  issues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issues returned from the connection. */
      orderBy?: IssueOrder | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** A list of states to filter the issues by. */
      states?: IssueState[] | null;
      /** Filtering options for issues returned from the connection. */
      filterBy?: IssueFilters | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the label name. */
  name?: boolean | number;
  /** A list of pull requests associated with this label. */
  pullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The repository associated with this label. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this label. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the label was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this label. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Label. */
export interface LabelConnectionGenqlSelection {
  /** A list of edges. */
  edges?: LabelEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: LabelGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface LabelEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: LabelGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of labels can be ordered upon return. */
export interface LabelOrder {
  /** The field in which to order labels by. */
  field: LabelOrderField;
  /** The direction in which to order labels by the specified field. */
  direction: OrderDirection;
}

/** An object that can have labels assigned to it. */
export interface LabelableGenqlSelection {
  /** A list of labels associated with the object. */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  on_Discussion?: DiscussionGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the label associated with the 'labeled' event. */
  label?: LabelGenqlSelection;
  /** Identifies the `Labelable` associated with the event. */
  labelable?: LabelableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a given language found in repositories. */
export interface LanguageGenqlSelection {
  /** The color defined for the current language. */
  color?: boolean | number;
  id?: boolean | number;
  /** The name of the current language. */
  name?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of languages associated with the parent. */
export interface LanguageConnectionGenqlSelection {
  /** A list of edges. */
  edges?: LanguageEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: LanguageGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** The total size in bytes of files written in that language. */
  totalSize?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the language of a repository. */
export interface LanguageEdgeGenqlSelection {
  cursor?: boolean | number;
  node?: LanguageGenqlSelection;
  /** The number of bytes of code written in the language. */
  size?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for language connections. */
export interface LanguageOrder {
  /** The field to order languages by. */
  field: LanguageOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A repository's open source license */
export interface LicenseGenqlSelection {
  /** The full text of the license */
  body?: boolean | number;
  /** The conditions set by the license */
  conditions?: LicenseRuleGenqlSelection;
  /** A human-readable description of the license */
  description?: boolean | number;
  /** Whether the license should be featured */
  featured?: boolean | number;
  /** Whether the license should be displayed in license pickers */
  hidden?: boolean | number;
  id?: boolean | number;
  /** Instructions on how to implement the license */
  implementation?: boolean | number;
  /** The lowercased SPDX ID of the license */
  key?: boolean | number;
  /** The limitations set by the license */
  limitations?: LicenseRuleGenqlSelection;
  /** The license full name specified by <https://spdx.org/licenses> */
  name?: boolean | number;
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname?: boolean | number;
  /** The permissions set by the license */
  permissions?: LicenseRuleGenqlSelection;
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense?: boolean | number;
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId?: boolean | number;
  /** URL to the license on <https://choosealicense.com> */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRuleGenqlSelection {
  /** A description of the rule */
  description?: boolean | number;
  /** The machine-readable rule key */
  key?: boolean | number;
  /** The human-readable rule label */
  label?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of LinkProjectV2ToRepository */
export interface LinkProjectV2ToRepositoryInput {
  /** The ID of the project to link to the repository. */
  projectId: Scalars['ID'];
  /** The ID of the repository to link to the project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of LinkProjectV2ToRepository */
export interface LinkProjectV2ToRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository the project is linked to. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of LinkProjectV2ToTeam */
export interface LinkProjectV2ToTeamInput {
  /** The ID of the project to link to the team. */
  projectId: Scalars['ID'];
  /** The ID of the team to link to the project. */
  teamId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of LinkProjectV2ToTeam */
export interface LinkProjectV2ToTeamPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The team the project is linked to */
  team?: TeamGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectInput {
  /** The ID of the Project to link to a Repository */
  projectId: Scalars['ID'];
  /** The ID of the Repository to link to a Project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The linked Project. */
  project?: ProjectGenqlSelection;
  /** The linked Repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A branch linked to an issue. */
export interface LinkedBranchGenqlSelection {
  id?: boolean | number;
  /** The branch's ref. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for LinkedBranch. */
export interface LinkedBranchConnectionGenqlSelection {
  /** A list of edges. */
  edges?: LinkedBranchEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: LinkedBranchGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface LinkedBranchEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: LinkedBranchGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of LockLockable */
export interface LockLockableInput {
  /** ID of the item to be locked. */
  lockableId: Scalars['ID'];
  /** A reason for why the item will be locked. */
  lockReason?: LockReason | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of LockLockable */
export interface LockLockablePayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item that was locked. */
  lockedRecord?: LockableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object that can be locked. */
export interface LockableGenqlSelection {
  /** Reason that the conversation was locked. */
  activeLockReason?: boolean | number;
  /** `true` if the object is locked */
  locked?: boolean | number;
  on_Discussion?: DiscussionGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Reason that the conversation was locked (optional). */
  lockReason?: boolean | number;
  /** Object that was locked. */
  lockable?: LockableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A placeholder user for attribution of imported data on GitHub. */
export interface MannequinGenqlSelection {
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The user that has claimed the data attributed to this mannequin. */
  claimant?: UserGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The mannequin's email on the source instance. */
  email?: boolean | number;
  id?: boolean | number;
  /** The username of the actor. */
  login?: boolean | number;
  /** The HTML path to this resource. */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The URL to this resource. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Mannequin. */
export interface MannequinConnectionGenqlSelection {
  /** A list of edges. */
  edges?: MannequinEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: MannequinGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a mannequin. */
export interface MannequinEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: MannequinGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for mannequins. */
export interface MannequinOrder {
  /** The field to order mannequins by. */
  field: MannequinOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export interface MarkDiscussionCommentAsAnswerInput {
  /** The Node ID of the discussion comment to mark as an answer. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
export interface MarkDiscussionCommentAsAnswerPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that includes the chosen comment. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MarkFileAsViewed */
export interface MarkFileAsViewedInput {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The path of the file to mark as viewed */
  path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MarkFileAsViewed */
export interface MarkFileAsViewedPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated pull request. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MarkProjectV2AsTemplate */
export interface MarkProjectV2AsTemplateInput {
  /** The ID of the Project to mark as a template. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MarkProjectV2AsTemplate */
export interface MarkProjectV2AsTemplatePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewInput {
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that is ready for review. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: IssueOrPullRequestGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: IssueOrPullRequestGenqlSelection;
  id?: boolean | number;
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A public description of a Marketplace category. */
export interface MarketplaceCategoryGenqlSelection {
  /** The category's description. */
  description?: boolean | number;
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks?: boolean | number;
  id?: boolean | number;
  /** The category's name. */
  name?: boolean | number;
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount?: boolean | number;
  /** The HTTP path for this Marketplace category. */
  resourcePath?: boolean | number;
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount?: boolean | number;
  /** The short name of the category used in its URL. */
  slug?: boolean | number;
  /** The HTTP URL for this Marketplace category. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListingGenqlSelection {
  /** The GitHub App this listing represents. */
  app?: AppGenqlSelection;
  /** URL to the listing owner's company site. */
  companyUrl?: boolean | number;
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath?: boolean | number;
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl?: boolean | number;
  /** URL to the listing's documentation. */
  documentationUrl?: boolean | number;
  /** The listing's detailed description. */
  extendedDescription?: boolean | number;
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML?: boolean | number;
  /** The listing's introductory description. */
  fullDescription?: boolean | number;
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML?: boolean | number;
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans?: boolean | number;
  /** Does this listing have a terms of service link? */
  hasTermsOfService?: boolean | number;
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner?: boolean | number;
  /** A technical description of how this app works with GitHub. */
  howItWorks?: boolean | number;
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML?: boolean | number;
  id?: boolean | number;
  /** URL to install the product to the viewer's account or organization. */
  installationUrl?: boolean | number;
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer?: boolean | number;
  /** Whether this listing has been removed from the Marketplace. */
  isArchived?: boolean | number;
  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */
  isDraft?: boolean | number;
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid?: boolean | number;
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic?: boolean | number;
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected?: boolean | number;
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified?: boolean | number;
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending?: boolean | number;
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft?: boolean | number;
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified?: boolean | number;
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified?: boolean | number;
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor?: boolean | number;
  /** URL for the listing's logo image. */
  logoUrl?:
    | {
        __args: {
          /** The size in pixels of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The listing's full name. */
  name?: boolean | number;
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription?: boolean | number;
  /** URL to the listing's detailed pricing. */
  pricingUrl?: boolean | number;
  /** The category that best describes the listing. */
  primaryCategory?: MarketplaceCategoryGenqlSelection;
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl?: boolean | number;
  /** The HTTP path for the Marketplace listing. */
  resourcePath?: boolean | number;
  /** The URLs for the listing's screenshots. */
  screenshotUrls?: boolean | number;
  /** An alternate category that describes the listing. */
  secondaryCategory?: MarketplaceCategoryGenqlSelection;
  /** The listing's very short description. */
  shortDescription?: boolean | number;
  /** The short name of the listing used in its URL. */
  slug?: boolean | number;
  /** URL to the listing's status page. */
  statusUrl?: boolean | number;
  /** An email address for support for this listing's app. */
  supportEmail?: boolean | number;
  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */
  supportUrl?: boolean | number;
  /** URL to the listing's terms of service. */
  termsOfServiceUrl?: boolean | number;
  /** The HTTP URL for the Marketplace listing. */
  url?: boolean | number;
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans?: boolean | number;
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove?: boolean | number;
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist?: boolean | number;
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit?: boolean | number;
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   *
   */
  viewerCanEditCategories?: boolean | number;
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans?: boolean | number;
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   *
   */
  viewerCanRedraft?: boolean | number;
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   *
   */
  viewerCanReject?: boolean | number;
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   *
   */
  viewerCanRequestApproval?: boolean | number;
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   *
   */
  viewerHasPurchased?: boolean | number;
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   *
   */
  viewerHasPurchasedForAllOrganizations?: boolean | number;
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   *
   */
  viewerIsListingAdmin?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Look up Marketplace Listings */
export interface MarketplaceListingConnectionGenqlSelection {
  /** A list of edges. */
  edges?: MarketplaceListingEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: MarketplaceListingGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface MarketplaceListingEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: MarketplaceListingGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that have members who can set status messages. */
export interface MemberStatusableGenqlSelection {
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: UserStatusConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for user statuses returned from the connection. */
      orderBy?: UserStatusOrder | null;
    };
  };
  on_Organization?: OrganizationGenqlSelection;
  on_Team?: TeamGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MergeBranch */
export interface MergeBranchInput {
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: Scalars['ID'];
  /** The name of the base branch that the provided head will be merged into. */
  base: Scalars['String'];
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: Scalars['String'];
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: Scalars['String'] | null;
  /** The email address to associate with this commit. */
  authorEmail?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The resulting merge Commit. */
  mergeCommit?: CommitGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MergePullRequest */
export interface MergePullRequestInput {
  /** ID of the pull request to be merged. */
  pullRequestId: Scalars['ID'];
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: Scalars['String'] | null;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: Scalars['String'] | null;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: Scalars['GitObjectID'] | null;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: PullRequestMergeMethod | null;
  /** The email address to associate with this merge. */
  authorEmail?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that was merged. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The queue of pull request entries to be merged into a protected branch in a repository. */
export interface MergeQueueGenqlSelection {
  /** The configuration for this merge queue */
  configuration?: MergeQueueConfigurationGenqlSelection;
  /** The entries in the queue */
  entries?: MergeQueueEntryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The estimated time in seconds until a newly added entry would be merged */
  nextEntryEstimatedTimeToMerge?: boolean | number;
  /** The repository this merge queue belongs to */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this merge queue */
  resourcePath?: boolean | number;
  /** The HTTP URL for this merge queue */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Configuration for a MergeQueue */
export interface MergeQueueConfigurationGenqlSelection {
  /** The amount of time in minutes to wait for a check response before considering it a failure. */
  checkResponseTimeout?: boolean | number;
  /** The maximum number of entries to build at once. */
  maximumEntriesToBuild?: boolean | number;
  /** The maximum number of entries to merge at once. */
  maximumEntriesToMerge?: boolean | number;
  /** The merge method to use for this queue. */
  mergeMethod?: boolean | number;
  /** The strategy to use when merging entries. */
  mergingStrategy?: boolean | number;
  /** The minimum number of entries required to merge at once. */
  minimumEntriesToMerge?: boolean | number;
  /** The amount of time in minutes to wait before ignoring the minumum number of entries in the queue requirement and merging a collection of entries */
  minimumEntriesToMergeWaitTime?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entries in a MergeQueue */
export interface MergeQueueEntryGenqlSelection {
  /** The base commit for this entry */
  baseCommit?: CommitGenqlSelection;
  /** The date and time this entry was added to the merge queue */
  enqueuedAt?: boolean | number;
  /** The actor that enqueued this entry */
  enqueuer?: ActorGenqlSelection;
  /** The estimated time in seconds until this entry will be merged */
  estimatedTimeToMerge?: boolean | number;
  /** The head commit for this entry */
  headCommit?: CommitGenqlSelection;
  id?: boolean | number;
  /** Whether this pull request should jump the queue */
  jump?: boolean | number;
  /** The merge queue that this entry belongs to */
  mergeQueue?: MergeQueueGenqlSelection;
  /** The position of this entry in the queue */
  position?: boolean | number;
  /** The pull request that will be added to a merge group */
  pullRequest?: PullRequestGenqlSelection;
  /** Does this pull request need to be deployed on its own */
  solo?: boolean | number;
  /** The state of this entry in the queue */
  state?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for MergeQueueEntry. */
export interface MergeQueueEntryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: MergeQueueEntryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: MergeQueueEntryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface MergeQueueEntryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: MergeQueueEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'merged' event on a given pull request. */
export interface MergedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the commit associated with the `merge` event. */
  commit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the Ref associated with the `merge` event. */
  mergeRef?: RefGenqlSelection;
  /** Identifies the name of the Ref associated with the `merge` event. */
  mergeRefName?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** The HTTP path for this merged event. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this merged event. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a GitHub Enterprise Importer (GEI) migration. */
export interface MigrationGenqlSelection {
  /** The migration flag to continue on error. */
  continueOnError?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The reason the migration failed. */
  failureReason?: boolean | number;
  id?: boolean | number;
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: boolean | number;
  /** The migration source. */
  migrationSource?: MigrationSourceGenqlSelection;
  /** The target repository name. */
  repositoryName?: boolean | number;
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl?: boolean | number;
  /** The migration state. */
  state?: boolean | number;
  /** The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount?: boolean | number;
  on_RepositoryMigration?: RepositoryMigrationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Enterprise Importer (GEI) migration source. */
export interface MigrationSourceGenqlSelection {
  id?: boolean | number;
  /** The migration source name. */
  name?: boolean | number;
  /** The migration source type. */
  type?: boolean | number;
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Milestone object on a given repository. */
export interface MilestoneGenqlSelection {
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the actor who created the milestone. */
  creator?: ActorGenqlSelection;
  /** Identifies the description of the milestone. */
  description?: boolean | number;
  /** Identifies the due date of the milestone. */
  dueOn?: boolean | number;
  id?: boolean | number;
  /** A list of issues associated with the milestone. */
  issues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issues returned from the connection. */
      orderBy?: IssueOrder | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** A list of states to filter the issues by. */
      states?: IssueState[] | null;
      /** Filtering options for issues returned from the connection. */
      filterBy?: IssueFilters | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the number of the milestone. */
  number?: boolean | number;
  /** Identifies the percentage complete for the milestone */
  progressPercentage?: boolean | number;
  /** A list of pull requests associated with the milestone. */
  pullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The repository associated with this milestone. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this milestone */
  resourcePath?: boolean | number;
  /** Identifies the state of the milestone. */
  state?: boolean | number;
  /** Identifies the title of the milestone. */
  title?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this milestone */
  url?: boolean | number;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Milestone. */
export interface MilestoneConnectionGenqlSelection {
  /** A list of edges. */
  edges?: MilestoneEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: MilestoneGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface MilestoneEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: MilestoneGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be inside a Milestone. */
export interface MilestoneItemGenqlSelection {
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** Ordering options for milestone connections. */
export interface MilestoneOrder {
  /** The field to order milestones by. */
  field: MilestoneOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle?: boolean | number;
  /** Object referenced by event. */
  subject?: MilestoneItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be minimized. */
export interface MinimizableGenqlSelection {
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MinimizeComment */
export interface MinimizeCommentInput {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The classification of comment */
  classifier: ReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The comment that was minimized. */
  minimizedComment?: MinimizableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MoveProjectCard */
export interface MoveProjectCardInput {
  /** The id of the card to move. */
  cardId: Scalars['ID'];
  /** The id of the column to move it into. */
  columnId: Scalars['ID'];
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayloadGenqlSelection {
  /** The new edge of the moved card. */
  cardEdge?: ProjectCardEdgeGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of MoveProjectColumn */
export interface MoveProjectColumnInput {
  /** The id of the column to move. */
  columnId: Scalars['ID'];
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new edge of the moved column. */
  columnEdge?: ProjectColumnEdgeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The root query for implementing GraphQL mutations. */
export interface MutationGenqlSelection {
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations?: AbortQueuedMigrationsPayloadGenqlSelection & {
    __args: {
      /** Parameters for AbortQueuedMigrations */
      input: AbortQueuedMigrationsInput;
    };
  };
  /** Abort a repository migration queued or in progress. */
  abortRepositoryMigration?: AbortRepositoryMigrationPayloadGenqlSelection & {
    __args: {
      /** Parameters for AbortRepositoryMigration */
      input: AbortRepositoryMigrationInput;
    };
  };
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation?: AcceptEnterpriseAdministratorInvitationPayloadGenqlSelection & {
    __args: {
      /** Parameters for AcceptEnterpriseAdministratorInvitation */
      input: AcceptEnterpriseAdministratorInvitationInput;
    };
  };
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion?: AcceptTopicSuggestionPayloadGenqlSelection & {
    __args: {
      /** Parameters for AcceptTopicSuggestion */
      input: AcceptTopicSuggestionInput;
    };
  };
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable?: AddAssigneesToAssignablePayloadGenqlSelection & {
    __args: {
      /** Parameters for AddAssigneesToAssignable */
      input: AddAssigneesToAssignableInput;
    };
  };
  /** Adds a comment to an Issue or Pull Request. */
  addComment?: AddCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddComment */
      input: AddCommentInput;
    };
  };
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment?: AddDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddDiscussionComment */
      input: AddDiscussionCommentInput;
    };
  };
  /** Vote for an option in a discussion poll. */
  addDiscussionPollVote?: AddDiscussionPollVotePayloadGenqlSelection & {
    __args: {
      /** Parameters for AddDiscussionPollVote */
      input: AddDiscussionPollVoteInput;
    };
  };
  /** Adds enterprise members to an organization within the enterprise. */
  addEnterpriseOrganizationMember?: AddEnterpriseOrganizationMemberPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddEnterpriseOrganizationMember */
      input: AddEnterpriseOrganizationMemberInput;
    };
  };
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement?: AddEnterpriseSupportEntitlementPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddEnterpriseSupportEntitlement */
      input: AddEnterpriseSupportEntitlementInput;
    };
  };
  /** Adds labels to a labelable object. */
  addLabelsToLabelable?: AddLabelsToLabelablePayloadGenqlSelection & {
    __args: {
      /** Parameters for AddLabelsToLabelable */
      input: AddLabelsToLabelableInput;
    };
  };
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard?: AddProjectCardPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddProjectCard */
      input: AddProjectCardInput;
    };
  };
  /** Adds a column to a Project. */
  addProjectColumn?: AddProjectColumnPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddProjectColumn */
      input: AddProjectColumnInput;
    };
  };
  /** Creates a new draft issue and add it to a Project. */
  addProjectV2DraftIssue?: AddProjectV2DraftIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for AddProjectV2DraftIssue */
      input: AddProjectV2DraftIssueInput;
    };
  };
  /** Links an existing content instance to a Project. */
  addProjectV2ItemById?: AddProjectV2ItemByIdPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddProjectV2ItemById */
      input: AddProjectV2ItemByIdInput;
    };
  };
  /** Adds a review to a Pull Request. */
  addPullRequestReview?: AddPullRequestReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddPullRequestReview */
      input: AddPullRequestReviewInput;
    };
  };
  /** Adds a comment to a review. */
  addPullRequestReviewComment?: AddPullRequestReviewCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddPullRequestReviewComment */
      input: AddPullRequestReviewCommentInput;
    };
  };
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread?: AddPullRequestReviewThreadPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddPullRequestReviewThread */
      input: AddPullRequestReviewThreadInput;
    };
  };
  /** Adds a reply to an existing Pull Request Review Thread. */
  addPullRequestReviewThreadReply?: AddPullRequestReviewThreadReplyPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddPullRequestReviewThreadReply */
      input: AddPullRequestReviewThreadReplyInput;
    };
  };
  /** Adds a reaction to a subject. */
  addReaction?: AddReactionPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddReaction */
      input: AddReactionInput;
    };
  };
  /** Adds a star to a Starrable. */
  addStar?: AddStarPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddStar */
      input: AddStarInput;
    };
  };
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote?: AddUpvotePayloadGenqlSelection & {
    __args: {
      /** Parameters for AddUpvote */
      input: AddUpvoteInput;
    };
  };
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain?: AddVerifiableDomainPayloadGenqlSelection & {
    __args: {
      /** Parameters for AddVerifiableDomain */
      input: AddVerifiableDomainInput;
    };
  };
  /** Approve all pending deployments under one or more environments */
  approveDeployments?: ApproveDeploymentsPayloadGenqlSelection & {
    __args: {
      /** Parameters for ApproveDeployments */
      input: ApproveDeploymentsInput;
    };
  };
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain?: ApproveVerifiableDomainPayloadGenqlSelection & {
    __args: {
      /** Parameters for ApproveVerifiableDomain */
      input: ApproveVerifiableDomainInput;
    };
  };
  /** Archives a ProjectV2Item */
  archiveProjectV2Item?: ArchiveProjectV2ItemPayloadGenqlSelection & {
    __args: {
      /** Parameters for ArchiveProjectV2Item */
      input: ArchiveProjectV2ItemInput;
    };
  };
  /** Marks a repository as archived. */
  archiveRepository?: ArchiveRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for ArchiveRepository */
      input: ArchiveRepositoryInput;
    };
  };
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation?: CancelEnterpriseAdminInvitationPayloadGenqlSelection & {
    __args: {
      /** Parameters for CancelEnterpriseAdminInvitation */
      input: CancelEnterpriseAdminInvitationInput;
    };
  };
  /** Cancel an active sponsorship. */
  cancelSponsorship?: CancelSponsorshipPayloadGenqlSelection & {
    __args: {
      /** Parameters for CancelSponsorship */
      input: CancelSponsorshipInput;
    };
  };
  /** Update your status on GitHub. */
  changeUserStatus?: ChangeUserStatusPayloadGenqlSelection & {
    __args: {
      /** Parameters for ChangeUserStatus */
      input: ChangeUserStatusInput;
    };
  };
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable?: ClearLabelsFromLabelablePayloadGenqlSelection & {
    __args: {
      /** Parameters for ClearLabelsFromLabelable */
      input: ClearLabelsFromLabelableInput;
    };
  };
  /** This mutation clears the value of a field for an item in a Project. Currently only text, number, date, assignees, labels, single-select, iteration and milestone fields are supported. */
  clearProjectV2ItemFieldValue?: ClearProjectV2ItemFieldValuePayloadGenqlSelection & {
    __args: {
      /** Parameters for ClearProjectV2ItemFieldValue */
      input: ClearProjectV2ItemFieldValueInput;
    };
  };
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject?: CloneProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for CloneProject */
      input: CloneProjectInput;
    };
  };
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository?: CloneTemplateRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for CloneTemplateRepository */
      input: CloneTemplateRepositoryInput;
    };
  };
  /** Close a discussion. */
  closeDiscussion?: CloseDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for CloseDiscussion */
      input: CloseDiscussionInput;
    };
  };
  /** Close an issue. */
  closeIssue?: CloseIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for CloseIssue */
      input: CloseIssueInput;
    };
  };
  /** Close a pull request. */
  closePullRequest?: ClosePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for ClosePullRequest */
      input: ClosePullRequestInput;
    };
  };
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue?: ConvertProjectCardNoteToIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for ConvertProjectCardNoteToIssue */
      input: ConvertProjectCardNoteToIssueInput;
    };
  };
  /** Converts a pull request to draft */
  convertPullRequestToDraft?: ConvertPullRequestToDraftPayloadGenqlSelection & {
    __args: {
      /** Parameters for ConvertPullRequestToDraft */
      input: ConvertPullRequestToDraftInput;
    };
  };
  /** Copy a project. */
  copyProjectV2?: CopyProjectV2PayloadGenqlSelection & {
    __args: {
      /** Parameters for CopyProjectV2 */
      input: CopyProjectV2Input;
    };
  };
  /** Invites a user to claim reattributable data */
  createAttributionInvitation?: CreateAttributionInvitationPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateAttributionInvitation */
      input: CreateAttributionInvitationInput;
    };
  };
  /** Create a new branch protection rule */
  createBranchProtectionRule?: CreateBranchProtectionRulePayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateBranchProtectionRule */
      input: CreateBranchProtectionRuleInput;
    };
  };
  /** Create a check run. */
  createCheckRun?: CreateCheckRunPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateCheckRun */
      input: CreateCheckRunInput;
    };
  };
  /** Create a check suite */
  createCheckSuite?: CreateCheckSuitePayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateCheckSuite */
      input: CreateCheckSuiteInput;
    };
  };
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   *
   */
  createCommitOnBranch?: CreateCommitOnBranchPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateCommitOnBranch */
      input: CreateCommitOnBranchInput;
    };
  };
  /** Create a discussion. */
  createDiscussion?: CreateDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateDiscussion */
      input: CreateDiscussionInput;
    };
  };
  /** Creates an organization as part of an enterprise account. */
  createEnterpriseOrganization?: CreateEnterpriseOrganizationPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateEnterpriseOrganization */
      input: CreateEnterpriseOrganizationInput;
    };
  };
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment?: CreateEnvironmentPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateEnvironment */
      input: CreateEnvironmentInput;
    };
  };
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry?: CreateIpAllowListEntryPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateIpAllowListEntry */
      input: CreateIpAllowListEntryInput;
    };
  };
  /** Creates a new issue. */
  createIssue?: CreateIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateIssue */
      input: CreateIssueInput;
    };
  };
  /** Create a branch linked to an issue. */
  createLinkedBranch?: CreateLinkedBranchPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateLinkedBranch */
      input: CreateLinkedBranchInput;
    };
  };
  /** Creates a GitHub Enterprise Importer (GEI) migration source. */
  createMigrationSource?: CreateMigrationSourcePayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateMigrationSource */
      input: CreateMigrationSourceInput;
    };
  };
  /** Creates a new project. */
  createProject?: CreateProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateProject */
      input: CreateProjectInput;
    };
  };
  /** Creates a new project. */
  createProjectV2?: CreateProjectV2PayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateProjectV2 */
      input: CreateProjectV2Input;
    };
  };
  /** Create a new project field. */
  createProjectV2Field?: CreateProjectV2FieldPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateProjectV2Field */
      input: CreateProjectV2FieldInput;
    };
  };
  /** Create a new pull request */
  createPullRequest?: CreatePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreatePullRequest */
      input: CreatePullRequestInput;
    };
  };
  /** Create a new Git Ref. */
  createRef?: CreateRefPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateRef */
      input: CreateRefInput;
    };
  };
  /** Create a new repository. */
  createRepository?: CreateRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateRepository */
      input: CreateRepositoryInput;
    };
  };
  /** Create a repository ruleset */
  createRepositoryRuleset?: CreateRepositoryRulesetPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateRepositoryRuleset */
      input: CreateRepositoryRulesetInput;
    };
  };
  /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */
  createSponsorsListing?: CreateSponsorsListingPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateSponsorsListing */
      input: CreateSponsorsListingInput;
    };
  };
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier?: CreateSponsorsTierPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateSponsorsTier */
      input: CreateSponsorsTierInput;
    };
  };
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship?: CreateSponsorshipPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateSponsorship */
      input: CreateSponsorshipInput;
    };
  };
  /** Make many one-time sponsorships for different sponsorable users or organizations at once. Can only sponsor those who have a public GitHub Sponsors profile. */
  createSponsorships?: CreateSponsorshipsPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateSponsorships */
      input: CreateSponsorshipsInput;
    };
  };
  /** Creates a new team discussion. */
  createTeamDiscussion?: CreateTeamDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateTeamDiscussion */
      input: CreateTeamDiscussionInput;
    };
  };
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment?: CreateTeamDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for CreateTeamDiscussionComment */
      input: CreateTeamDiscussionCommentInput;
    };
  };
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion?: DeclineTopicSuggestionPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeclineTopicSuggestion */
      input: DeclineTopicSuggestionInput;
    };
  };
  /** Delete a branch protection rule */
  deleteBranchProtectionRule?: DeleteBranchProtectionRulePayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteBranchProtectionRule */
      input: DeleteBranchProtectionRuleInput;
    };
  };
  /** Deletes a deployment. */
  deleteDeployment?: DeleteDeploymentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteDeployment */
      input: DeleteDeploymentInput;
    };
  };
  /** Delete a discussion and all of its replies. */
  deleteDiscussion?: DeleteDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteDiscussion */
      input: DeleteDiscussionInput;
    };
  };
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment?: DeleteDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteDiscussionComment */
      input: DeleteDiscussionCommentInput;
    };
  };
  /** Deletes an environment */
  deleteEnvironment?: DeleteEnvironmentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteEnvironment */
      input: DeleteEnvironmentInput;
    };
  };
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry?: DeleteIpAllowListEntryPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteIpAllowListEntry */
      input: DeleteIpAllowListEntryInput;
    };
  };
  /** Deletes an Issue object. */
  deleteIssue?: DeleteIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteIssue */
      input: DeleteIssueInput;
    };
  };
  /** Deletes an IssueComment object. */
  deleteIssueComment?: DeleteIssueCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteIssueComment */
      input: DeleteIssueCommentInput;
    };
  };
  /** Unlink a branch from an issue. */
  deleteLinkedBranch?: DeleteLinkedBranchPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteLinkedBranch */
      input: DeleteLinkedBranchInput;
    };
  };
  /** Deletes a project. */
  deleteProject?: DeleteProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProject */
      input: DeleteProjectInput;
    };
  };
  /** Deletes a project card. */
  deleteProjectCard?: DeleteProjectCardPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectCard */
      input: DeleteProjectCardInput;
    };
  };
  /** Deletes a project column. */
  deleteProjectColumn?: DeleteProjectColumnPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectColumn */
      input: DeleteProjectColumnInput;
    };
  };
  /** Delete a project. */
  deleteProjectV2?: DeleteProjectV2PayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectV2 */
      input: DeleteProjectV2Input;
    };
  };
  /** Delete a project field. */
  deleteProjectV2Field?: DeleteProjectV2FieldPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectV2Field */
      input: DeleteProjectV2FieldInput;
    };
  };
  /** Deletes an item from a Project. */
  deleteProjectV2Item?: DeleteProjectV2ItemPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectV2Item */
      input: DeleteProjectV2ItemInput;
    };
  };
  /** Deletes a project workflow. */
  deleteProjectV2Workflow?: DeleteProjectV2WorkflowPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteProjectV2Workflow */
      input: DeleteProjectV2WorkflowInput;
    };
  };
  /** Deletes a pull request review. */
  deletePullRequestReview?: DeletePullRequestReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeletePullRequestReview */
      input: DeletePullRequestReviewInput;
    };
  };
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment?: DeletePullRequestReviewCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeletePullRequestReviewComment */
      input: DeletePullRequestReviewCommentInput;
    };
  };
  /** Delete a Git Ref. */
  deleteRef?: DeleteRefPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteRef */
      input: DeleteRefInput;
    };
  };
  /** Delete a repository ruleset */
  deleteRepositoryRuleset?: DeleteRepositoryRulesetPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteRepositoryRuleset */
      input: DeleteRepositoryRulesetInput;
    };
  };
  /** Deletes a team discussion. */
  deleteTeamDiscussion?: DeleteTeamDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteTeamDiscussion */
      input: DeleteTeamDiscussionInput;
    };
  };
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment?: DeleteTeamDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteTeamDiscussionComment */
      input: DeleteTeamDiscussionCommentInput;
    };
  };
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain?: DeleteVerifiableDomainPayloadGenqlSelection & {
    __args: {
      /** Parameters for DeleteVerifiableDomain */
      input: DeleteVerifiableDomainInput;
    };
  };
  /** Remove a pull request from the merge queue. */
  dequeuePullRequest?: DequeuePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for DequeuePullRequest */
      input: DequeuePullRequestInput;
    };
  };
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge?: DisablePullRequestAutoMergePayloadGenqlSelection & {
    __args: {
      /** Parameters for DisablePullRequestAutoMerge */
      input: DisablePullRequestAutoMergeInput;
    };
  };
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview?: DismissPullRequestReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for DismissPullRequestReview */
      input: DismissPullRequestReviewInput;
    };
  };
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert?: DismissRepositoryVulnerabilityAlertPayloadGenqlSelection & {
    __args: {
      /** Parameters for DismissRepositoryVulnerabilityAlert */
      input: DismissRepositoryVulnerabilityAlertInput;
    };
  };
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge?: EnablePullRequestAutoMergePayloadGenqlSelection & {
    __args: {
      /** Parameters for EnablePullRequestAutoMerge */
      input: EnablePullRequestAutoMergeInput;
    };
  };
  /** Add a pull request to the merge queue. */
  enqueuePullRequest?: EnqueuePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for EnqueuePullRequest */
      input: EnqueuePullRequestInput;
    };
  };
  /** Follow an organization. */
  followOrganization?: FollowOrganizationPayloadGenqlSelection & {
    __args: {
      /** Parameters for FollowOrganization */
      input: FollowOrganizationInput;
    };
  };
  /** Follow a user. */
  followUser?: FollowUserPayloadGenqlSelection & {
    __args: {
      /** Parameters for FollowUser */
      input: FollowUserInput;
    };
  };
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole?: GrantEnterpriseOrganizationsMigratorRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for GrantEnterpriseOrganizationsMigratorRole */
      input: GrantEnterpriseOrganizationsMigratorRoleInput;
    };
  };
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole?: GrantMigratorRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for GrantMigratorRole */
      input: GrantMigratorRoleInput;
    };
  };
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin?: InviteEnterpriseAdminPayloadGenqlSelection & {
    __args: {
      /** Parameters for InviteEnterpriseAdmin */
      input: InviteEnterpriseAdminInput;
    };
  };
  /** Links a project to a repository. */
  linkProjectV2ToRepository?: LinkProjectV2ToRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for LinkProjectV2ToRepository */
      input: LinkProjectV2ToRepositoryInput;
    };
  };
  /** Links a project to a team. */
  linkProjectV2ToTeam?: LinkProjectV2ToTeamPayloadGenqlSelection & {
    __args: {
      /** Parameters for LinkProjectV2ToTeam */
      input: LinkProjectV2ToTeamInput;
    };
  };
  /** Creates a repository link for a project. */
  linkRepositoryToProject?: LinkRepositoryToProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for LinkRepositoryToProject */
      input: LinkRepositoryToProjectInput;
    };
  };
  /** Lock a lockable object */
  lockLockable?: LockLockablePayloadGenqlSelection & {
    __args: {
      /** Parameters for LockLockable */
      input: LockLockableInput;
    };
  };
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer?: MarkDiscussionCommentAsAnswerPayloadGenqlSelection & {
    __args: {
      /** Parameters for MarkDiscussionCommentAsAnswer */
      input: MarkDiscussionCommentAsAnswerInput;
    };
  };
  /** Mark a pull request file as viewed */
  markFileAsViewed?: MarkFileAsViewedPayloadGenqlSelection & {
    __args: {
      /** Parameters for MarkFileAsViewed */
      input: MarkFileAsViewedInput;
    };
  };
  /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */
  markProjectV2AsTemplate?: MarkProjectV2AsTemplatePayloadGenqlSelection & {
    __args: {
      /** Parameters for MarkProjectV2AsTemplate */
      input: MarkProjectV2AsTemplateInput;
    };
  };
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview?: MarkPullRequestReadyForReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for MarkPullRequestReadyForReview */
      input: MarkPullRequestReadyForReviewInput;
    };
  };
  /** Merge a head into a branch. */
  mergeBranch?: MergeBranchPayloadGenqlSelection & {
    __args: {
      /** Parameters for MergeBranch */
      input: MergeBranchInput;
    };
  };
  /** Merge a pull request. */
  mergePullRequest?: MergePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for MergePullRequest */
      input: MergePullRequestInput;
    };
  };
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment?: MinimizeCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for MinimizeComment */
      input: MinimizeCommentInput;
    };
  };
  /** Moves a project card to another place. */
  moveProjectCard?: MoveProjectCardPayloadGenqlSelection & {
    __args: {
      /** Parameters for MoveProjectCard */
      input: MoveProjectCardInput;
    };
  };
  /** Moves a project column to another place. */
  moveProjectColumn?: MoveProjectColumnPayloadGenqlSelection & {
    __args: {
      /** Parameters for MoveProjectColumn */
      input: MoveProjectColumnInput;
    };
  };
  /** Pin an issue to a repository */
  pinIssue?: PinIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for PinIssue */
      input: PinIssueInput;
    };
  };
  /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */
  publishSponsorsTier?: PublishSponsorsTierPayloadGenqlSelection & {
    __args: {
      /** Parameters for PublishSponsorsTier */
      input: PublishSponsorsTierInput;
    };
  };
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGenqlSelection & {
    __args: {
      /** Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes */
      input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;
    };
  };
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken?: RegenerateVerifiableDomainTokenPayloadGenqlSelection & {
    __args: {
      /** Parameters for RegenerateVerifiableDomainToken */
      input: RegenerateVerifiableDomainTokenInput;
    };
  };
  /** Reject all pending deployments under one or more environments */
  rejectDeployments?: RejectDeploymentsPayloadGenqlSelection & {
    __args: {
      /** Parameters for RejectDeployments */
      input: RejectDeploymentsInput;
    };
  };
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable?: RemoveAssigneesFromAssignablePayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveAssigneesFromAssignable */
      input: RemoveAssigneesFromAssignableInput;
    };
  };
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin?: RemoveEnterpriseAdminPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveEnterpriseAdmin */
      input: RemoveEnterpriseAdminInput;
    };
  };
  /** Removes the identity provider from an enterprise */
  removeEnterpriseIdentityProvider?: RemoveEnterpriseIdentityProviderPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveEnterpriseIdentityProvider */
      input: RemoveEnterpriseIdentityProviderInput;
    };
  };
  /** Removes a user from all organizations within the enterprise */
  removeEnterpriseMember?: RemoveEnterpriseMemberPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveEnterpriseMember */
      input: RemoveEnterpriseMemberInput;
    };
  };
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization?: RemoveEnterpriseOrganizationPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveEnterpriseOrganization */
      input: RemoveEnterpriseOrganizationInput;
    };
  };
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement?: RemoveEnterpriseSupportEntitlementPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveEnterpriseSupportEntitlement */
      input: RemoveEnterpriseSupportEntitlementInput;
    };
  };
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable?: RemoveLabelsFromLabelablePayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveLabelsFromLabelable */
      input: RemoveLabelsFromLabelableInput;
    };
  };
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator?: RemoveOutsideCollaboratorPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveOutsideCollaborator */
      input: RemoveOutsideCollaboratorInput;
    };
  };
  /** Removes a reaction from a subject. */
  removeReaction?: RemoveReactionPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveReaction */
      input: RemoveReactionInput;
    };
  };
  /** Removes a star from a Starrable. */
  removeStar?: RemoveStarPayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveStar */
      input: RemoveStarInput;
    };
  };
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote?: RemoveUpvotePayloadGenqlSelection & {
    __args: {
      /** Parameters for RemoveUpvote */
      input: RemoveUpvoteInput;
    };
  };
  /** Reopen a discussion. */
  reopenDiscussion?: ReopenDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for ReopenDiscussion */
      input: ReopenDiscussionInput;
    };
  };
  /** Reopen a issue. */
  reopenIssue?: ReopenIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for ReopenIssue */
      input: ReopenIssueInput;
    };
  };
  /** Reopen a pull request. */
  reopenPullRequest?: ReopenPullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for ReopenPullRequest */
      input: ReopenPullRequestInput;
    };
  };
  /** Set review requests on a pull request. */
  requestReviews?: RequestReviewsPayloadGenqlSelection & {
    __args: {
      /** Parameters for RequestReviews */
      input: RequestReviewsInput;
    };
  };
  /** Rerequests an existing check suite. */
  rerequestCheckSuite?: RerequestCheckSuitePayloadGenqlSelection & {
    __args: {
      /** Parameters for RerequestCheckSuite */
      input: RerequestCheckSuiteInput;
    };
  };
  /** Marks a review thread as resolved. */
  resolveReviewThread?: ResolveReviewThreadPayloadGenqlSelection & {
    __args: {
      /** Parameters for ResolveReviewThread */
      input: ResolveReviewThreadInput;
    };
  };
  /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */
  retireSponsorsTier?: RetireSponsorsTierPayloadGenqlSelection & {
    __args: {
      /** Parameters for RetireSponsorsTier */
      input: RetireSponsorsTierInput;
    };
  };
  /** Create a pull request that reverts the changes from a merged pull request. */
  revertPullRequest?: RevertPullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for RevertPullRequest */
      input: RevertPullRequestInput;
    };
  };
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole?: RevokeEnterpriseOrganizationsMigratorRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for RevokeEnterpriseOrganizationsMigratorRole */
      input: RevokeEnterpriseOrganizationsMigratorRoleInput;
    };
  };
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole?: RevokeMigratorRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for RevokeMigratorRole */
      input: RevokeMigratorRoleInput;
    };
  };
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider?: SetEnterpriseIdentityProviderPayloadGenqlSelection & {
    __args: {
      /** Parameters for SetEnterpriseIdentityProvider */
      input: SetEnterpriseIdentityProviderInput;
    };
  };
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit?: SetOrganizationInteractionLimitPayloadGenqlSelection & {
    __args: {
      /** Parameters for SetOrganizationInteractionLimit */
      input: SetOrganizationInteractionLimitInput;
    };
  };
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit?: SetRepositoryInteractionLimitPayloadGenqlSelection & {
    __args: {
      /** Parameters for SetRepositoryInteractionLimit */
      input: SetRepositoryInteractionLimitInput;
    };
  };
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit?: SetUserInteractionLimitPayloadGenqlSelection & {
    __args: {
      /** Parameters for SetUserInteractionLimit */
      input: SetUserInteractionLimitInput;
    };
  };
  /** Starts a GitHub Enterprise Importer organization migration. */
  startOrganizationMigration?: StartOrganizationMigrationPayloadGenqlSelection & {
    __args: {
      /** Parameters for StartOrganizationMigration */
      input: StartOrganizationMigrationInput;
    };
  };
  /** Starts a GitHub Enterprise Importer (GEI) repository migration. */
  startRepositoryMigration?: StartRepositoryMigrationPayloadGenqlSelection & {
    __args: {
      /** Parameters for StartRepositoryMigration */
      input: StartRepositoryMigrationInput;
    };
  };
  /** Submits a pending pull request review. */
  submitPullRequestReview?: SubmitPullRequestReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for SubmitPullRequestReview */
      input: SubmitPullRequestReviewInput;
    };
  };
  /** Transfer an organization from one enterprise to another enterprise. */
  transferEnterpriseOrganization?: TransferEnterpriseOrganizationPayloadGenqlSelection & {
    __args: {
      /** Parameters for TransferEnterpriseOrganization */
      input: TransferEnterpriseOrganizationInput;
    };
  };
  /** Transfer an issue to a different repository */
  transferIssue?: TransferIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for TransferIssue */
      input: TransferIssueInput;
    };
  };
  /** Unarchives a ProjectV2Item */
  unarchiveProjectV2Item?: UnarchiveProjectV2ItemPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnarchiveProjectV2Item */
      input: UnarchiveProjectV2ItemInput;
    };
  };
  /** Unarchives a repository. */
  unarchiveRepository?: UnarchiveRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnarchiveRepository */
      input: UnarchiveRepositoryInput;
    };
  };
  /** Unfollow an organization. */
  unfollowOrganization?: UnfollowOrganizationPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnfollowOrganization */
      input: UnfollowOrganizationInput;
    };
  };
  /** Unfollow a user. */
  unfollowUser?: UnfollowUserPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnfollowUser */
      input: UnfollowUserInput;
    };
  };
  /** Unlinks a project from a repository. */
  unlinkProjectV2FromRepository?: UnlinkProjectV2FromRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnlinkProjectV2FromRepository */
      input: UnlinkProjectV2FromRepositoryInput;
    };
  };
  /** Unlinks a project to a team. */
  unlinkProjectV2FromTeam?: UnlinkProjectV2FromTeamPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnlinkProjectV2FromTeam */
      input: UnlinkProjectV2FromTeamInput;
    };
  };
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject?: UnlinkRepositoryFromProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnlinkRepositoryFromProject */
      input: UnlinkRepositoryFromProjectInput;
    };
  };
  /** Unlock a lockable object */
  unlockLockable?: UnlockLockablePayloadGenqlSelection & {
    __args: {
      /** Parameters for UnlockLockable */
      input: UnlockLockableInput;
    };
  };
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer?: UnmarkDiscussionCommentAsAnswerPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnmarkDiscussionCommentAsAnswer */
      input: UnmarkDiscussionCommentAsAnswerInput;
    };
  };
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed?: UnmarkFileAsViewedPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnmarkFileAsViewed */
      input: UnmarkFileAsViewedInput;
    };
  };
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate?: UnmarkIssueAsDuplicatePayloadGenqlSelection & {
    __args: {
      /** Parameters for UnmarkIssueAsDuplicate */
      input: UnmarkIssueAsDuplicateInput;
    };
  };
  /** Unmark a project as a template. */
  unmarkProjectV2AsTemplate?: UnmarkProjectV2AsTemplatePayloadGenqlSelection & {
    __args: {
      /** Parameters for UnmarkProjectV2AsTemplate */
      input: UnmarkProjectV2AsTemplateInput;
    };
  };
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment?: UnminimizeCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnminimizeComment */
      input: UnminimizeCommentInput;
    };
  };
  /** Unpin a pinned issue from a repository */
  unpinIssue?: UnpinIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for UnpinIssue */
      input: UnpinIssueInput;
    };
  };
  /** Marks a review thread as unresolved. */
  unresolveReviewThread?: UnresolveReviewThreadPayloadGenqlSelection & {
    __args: {
      /** Parameters for UnresolveReviewThread */
      input: UnresolveReviewThreadInput;
    };
  };
  /** Update a branch protection rule */
  updateBranchProtectionRule?: UpdateBranchProtectionRulePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateBranchProtectionRule */
      input: UpdateBranchProtectionRuleInput;
    };
  };
  /** Update a check run */
  updateCheckRun?: UpdateCheckRunPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateCheckRun */
      input: UpdateCheckRunInput;
    };
  };
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences?: UpdateCheckSuitePreferencesPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateCheckSuitePreferences */
      input: UpdateCheckSuitePreferencesInput;
    };
  };
  /** Update a discussion */
  updateDiscussion?: UpdateDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateDiscussion */
      input: UpdateDiscussionInput;
    };
  };
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment?: UpdateDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateDiscussionComment */
      input: UpdateDiscussionCommentInput;
    };
  };
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole?: UpdateEnterpriseAdministratorRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseAdministratorRole */
      input: UpdateEnterpriseAdministratorRoleInput;
    };
  };
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
      input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
    };
  };
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting?: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting */
      input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;
    };
  };
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
      input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
    };
  };
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting */
      input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
    };
  };
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting?: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting */
      input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;
    };
  };
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
      input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
    };
  };
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
      input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
    };
  };
  /** Sets whether or not an organization admin can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting?: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting */
      input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;
    };
  };
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
      input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
    };
  };
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
      input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
    };
  };
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting?: UpdateEnterpriseOrganizationProjectsSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseOrganizationProjectsSetting */
      input: UpdateEnterpriseOrganizationProjectsSettingInput;
    };
  };
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole?: UpdateEnterpriseOwnerOrganizationRolePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseOwnerOrganizationRole */
      input: UpdateEnterpriseOwnerOrganizationRoleInput;
    };
  };
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile?: UpdateEnterpriseProfilePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseProfile */
      input: UpdateEnterpriseProfileInput;
    };
  };
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting?: UpdateEnterpriseRepositoryProjectsSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseRepositoryProjectsSetting */
      input: UpdateEnterpriseRepositoryProjectsSettingInput;
    };
  };
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting?: UpdateEnterpriseTeamDiscussionsSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseTeamDiscussionsSetting */
      input: UpdateEnterpriseTeamDiscussionsSettingInput;
    };
  };
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
      input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
    };
  };
  /** Updates an environment. */
  updateEnvironment?: UpdateEnvironmentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateEnvironment */
      input: UpdateEnvironmentInput;
    };
  };
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting?: UpdateIpAllowListEnabledSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateIpAllowListEnabledSetting */
      input: UpdateIpAllowListEnabledSettingInput;
    };
  };
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry?: UpdateIpAllowListEntryPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateIpAllowListEntry */
      input: UpdateIpAllowListEntryInput;
    };
  };
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting?: UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting */
      input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;
    };
  };
  /** Updates an Issue. */
  updateIssue?: UpdateIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateIssue */
      input: UpdateIssueInput;
    };
  };
  /** Updates an IssueComment object. */
  updateIssueComment?: UpdateIssueCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateIssueComment */
      input: UpdateIssueCommentInput;
    };
  };
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting?: UpdateNotificationRestrictionSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateNotificationRestrictionSetting */
      input: UpdateNotificationRestrictionSettingInput;
    };
  };
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting?: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting */
      input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;
    };
  };
  /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
  updateOrganizationWebCommitSignoffSetting?: UpdateOrganizationWebCommitSignoffSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateOrganizationWebCommitSignoffSetting */
      input: UpdateOrganizationWebCommitSignoffSettingInput;
    };
  };
  /** Updates an existing project. */
  updateProject?: UpdateProjectPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProject */
      input: UpdateProjectInput;
    };
  };
  /** Updates an existing project card. */
  updateProjectCard?: UpdateProjectCardPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectCard */
      input: UpdateProjectCardInput;
    };
  };
  /** Updates an existing project column. */
  updateProjectColumn?: UpdateProjectColumnPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectColumn */
      input: UpdateProjectColumnInput;
    };
  };
  /** Updates an existing project (beta). */
  updateProjectV2?: UpdateProjectV2PayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectV2 */
      input: UpdateProjectV2Input;
    };
  };
  /** Update the collaborators on a team or a project */
  updateProjectV2Collaborators?: UpdateProjectV2CollaboratorsPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectV2Collaborators */
      input: UpdateProjectV2CollaboratorsInput;
    };
  };
  /** Updates a draft issue within a Project. */
  updateProjectV2DraftIssue?: UpdateProjectV2DraftIssuePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectV2DraftIssue */
      input: UpdateProjectV2DraftIssueInput;
    };
  };
  /** This mutation updates the value of a field for an item in a Project. Currently only single-select, text, number, date, and iteration fields are supported. */
  updateProjectV2ItemFieldValue?: UpdateProjectV2ItemFieldValuePayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectV2ItemFieldValue */
      input: UpdateProjectV2ItemFieldValueInput;
    };
  };
  /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
  updateProjectV2ItemPosition?: UpdateProjectV2ItemPositionPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateProjectV2ItemPosition */
      input: UpdateProjectV2ItemPositionInput;
    };
  };
  /** Update a pull request */
  updatePullRequest?: UpdatePullRequestPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdatePullRequest */
      input: UpdatePullRequestInput;
    };
  };
  /** Merge or Rebase HEAD from upstream branch into pull request branch */
  updatePullRequestBranch?: UpdatePullRequestBranchPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdatePullRequestBranch */
      input: UpdatePullRequestBranchInput;
    };
  };
  /** Updates the body of a pull request review. */
  updatePullRequestReview?: UpdatePullRequestReviewPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdatePullRequestReview */
      input: UpdatePullRequestReviewInput;
    };
  };
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment?: UpdatePullRequestReviewCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdatePullRequestReviewComment */
      input: UpdatePullRequestReviewCommentInput;
    };
  };
  /** Update a Git Ref. */
  updateRef?: UpdateRefPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateRef */
      input: UpdateRefInput;
    };
  };
  /** Update information about a repository. */
  updateRepository?: UpdateRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateRepository */
      input: UpdateRepositoryInput;
    };
  };
  /** Update a repository ruleset */
  updateRepositoryRuleset?: UpdateRepositoryRulesetPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateRepositoryRuleset */
      input: UpdateRepositoryRulesetInput;
    };
  };
  /** Sets whether contributors are required to sign off on web-based commits for a repository. */
  updateRepositoryWebCommitSignoffSetting?: UpdateRepositoryWebCommitSignoffSettingPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateRepositoryWebCommitSignoffSetting */
      input: UpdateRepositoryWebCommitSignoffSettingInput;
    };
  };
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences?: UpdateSponsorshipPreferencesPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateSponsorshipPreferences */
      input: UpdateSponsorshipPreferencesInput;
    };
  };
  /** Updates the state for subscribable subjects. */
  updateSubscription?: UpdateSubscriptionPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateSubscription */
      input: UpdateSubscriptionInput;
    };
  };
  /** Updates a team discussion. */
  updateTeamDiscussion?: UpdateTeamDiscussionPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateTeamDiscussion */
      input: UpdateTeamDiscussionInput;
    };
  };
  /** Updates a discussion comment. */
  updateTeamDiscussionComment?: UpdateTeamDiscussionCommentPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateTeamDiscussionComment */
      input: UpdateTeamDiscussionCommentInput;
    };
  };
  /** Update team repository. */
  updateTeamsRepository?: UpdateTeamsRepositoryPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateTeamsRepository */
      input: UpdateTeamsRepositoryInput;
    };
  };
  /** Replaces the repository's topics with the given topics. */
  updateTopics?: UpdateTopicsPayloadGenqlSelection & {
    __args: {
      /** Parameters for UpdateTopics */
      input: UpdateTopicsInput;
    };
  };
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain?: VerifyVerifiableDomainPayloadGenqlSelection & {
    __args: {
      /** Parameters for VerifyVerifiableDomain */
      input: VerifyVerifiableDomainInput;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object with an ID. */
export interface NodeGenqlSelection {
  /** ID of the object. */
  id?: boolean | number;
  on_AddedToMergeQueueEvent?: AddedToMergeQueueEventGenqlSelection;
  on_AddedToProjectEvent?: AddedToProjectEventGenqlSelection;
  on_App?: AppGenqlSelection;
  on_AssignedEvent?: AssignedEventGenqlSelection;
  on_AutoMergeDisabledEvent?: AutoMergeDisabledEventGenqlSelection;
  on_AutoMergeEnabledEvent?: AutoMergeEnabledEventGenqlSelection;
  on_AutoRebaseEnabledEvent?: AutoRebaseEnabledEventGenqlSelection;
  on_AutoSquashEnabledEvent?: AutoSquashEnabledEventGenqlSelection;
  on_AutomaticBaseChangeFailedEvent?: AutomaticBaseChangeFailedEventGenqlSelection;
  on_AutomaticBaseChangeSucceededEvent?: AutomaticBaseChangeSucceededEventGenqlSelection;
  on_BaseRefChangedEvent?: BaseRefChangedEventGenqlSelection;
  on_BaseRefDeletedEvent?: BaseRefDeletedEventGenqlSelection;
  on_BaseRefForcePushedEvent?: BaseRefForcePushedEventGenqlSelection;
  on_Blob?: BlobGenqlSelection;
  on_Bot?: BotGenqlSelection;
  on_BranchProtectionRule?: BranchProtectionRuleGenqlSelection;
  on_BypassForcePushAllowance?: BypassForcePushAllowanceGenqlSelection;
  on_BypassPullRequestAllowance?: BypassPullRequestAllowanceGenqlSelection;
  on_CWE?: CWEGenqlSelection;
  on_CheckRun?: CheckRunGenqlSelection;
  on_CheckSuite?: CheckSuiteGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_CodeOfConduct?: CodeOfConductGenqlSelection;
  on_CommentDeletedEvent?: CommentDeletedEventGenqlSelection;
  on_Commit?: CommitGenqlSelection;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_CommitCommentThread?: CommitCommentThreadGenqlSelection;
  on_Comparison?: ComparisonGenqlSelection;
  on_ConnectedEvent?: ConnectedEventGenqlSelection;
  on_ConvertToDraftEvent?: ConvertToDraftEventGenqlSelection;
  on_ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEventGenqlSelection;
  on_ConvertedToDiscussionEvent?: ConvertedToDiscussionEventGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_DemilestonedEvent?: DemilestonedEventGenqlSelection;
  on_DeployKey?: DeployKeyGenqlSelection;
  on_DeployedEvent?: DeployedEventGenqlSelection;
  on_Deployment?: DeploymentGenqlSelection;
  on_DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEventGenqlSelection;
  on_DeploymentReview?: DeploymentReviewGenqlSelection;
  on_DeploymentStatus?: DeploymentStatusGenqlSelection;
  on_DisconnectedEvent?: DisconnectedEventGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionCategory?: DiscussionCategoryGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_DiscussionPoll?: DiscussionPollGenqlSelection;
  on_DiscussionPollOption?: DiscussionPollOptionGenqlSelection;
  on_DraftIssue?: DraftIssueGenqlSelection;
  on_Enterprise?: EnterpriseGenqlSelection;
  on_EnterpriseAdministratorInvitation?: EnterpriseAdministratorInvitationGenqlSelection;
  on_EnterpriseIdentityProvider?: EnterpriseIdentityProviderGenqlSelection;
  on_EnterpriseRepositoryInfo?: EnterpriseRepositoryInfoGenqlSelection;
  on_EnterpriseServerInstallation?: EnterpriseServerInstallationGenqlSelection;
  on_EnterpriseServerUserAccount?: EnterpriseServerUserAccountGenqlSelection;
  on_EnterpriseServerUserAccountEmail?: EnterpriseServerUserAccountEmailGenqlSelection;
  on_EnterpriseServerUserAccountsUpload?: EnterpriseServerUserAccountsUploadGenqlSelection;
  on_EnterpriseUserAccount?: EnterpriseUserAccountGenqlSelection;
  on_Environment?: EnvironmentGenqlSelection;
  on_ExternalIdentity?: ExternalIdentityGenqlSelection;
  on_Gist?: GistGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_HeadRefDeletedEvent?: HeadRefDeletedEventGenqlSelection;
  on_HeadRefForcePushedEvent?: HeadRefForcePushedEventGenqlSelection;
  on_HeadRefRestoredEvent?: HeadRefRestoredEventGenqlSelection;
  on_IpAllowListEntry?: IpAllowListEntryGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_Label?: LabelGenqlSelection;
  on_LabeledEvent?: LabeledEventGenqlSelection;
  on_Language?: LanguageGenqlSelection;
  on_License?: LicenseGenqlSelection;
  on_LinkedBranch?: LinkedBranchGenqlSelection;
  on_LockedEvent?: LockedEventGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_MarkedAsDuplicateEvent?: MarkedAsDuplicateEventGenqlSelection;
  on_MarketplaceCategory?: MarketplaceCategoryGenqlSelection;
  on_MarketplaceListing?: MarketplaceListingGenqlSelection;
  on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryGenqlSelection;
  on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryGenqlSelection;
  on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryGenqlSelection;
  on_MentionedEvent?: MentionedEventGenqlSelection;
  on_MergeQueue?: MergeQueueGenqlSelection;
  on_MergeQueueEntry?: MergeQueueEntryGenqlSelection;
  on_MergedEvent?: MergedEventGenqlSelection;
  on_MigrationSource?: MigrationSourceGenqlSelection;
  on_Milestone?: MilestoneGenqlSelection;
  on_MilestonedEvent?: MilestonedEventGenqlSelection;
  on_MovedColumnsInProjectEvent?: MovedColumnsInProjectEventGenqlSelection;
  on_OIDCProvider?: OIDCProviderGenqlSelection;
  on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryGenqlSelection;
  on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryGenqlSelection;
  on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryGenqlSelection;
  on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryGenqlSelection;
  on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgCreateAuditEntry?: OrgCreateAuditEntryGenqlSelection;
  on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryGenqlSelection;
  on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryGenqlSelection;
  on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryGenqlSelection;
  on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryGenqlSelection;
  on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntryGenqlSelection;
  on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryGenqlSelection;
  on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryGenqlSelection;
  on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryGenqlSelection;
  on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryGenqlSelection;
  on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryGenqlSelection;
  on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_OrganizationIdentityProvider?: OrganizationIdentityProviderGenqlSelection;
  on_OrganizationInvitation?: OrganizationInvitationGenqlSelection;
  on_OrganizationMigration?: OrganizationMigrationGenqlSelection;
  on_Package?: PackageGenqlSelection;
  on_PackageFile?: PackageFileGenqlSelection;
  on_PackageTag?: PackageTagGenqlSelection;
  on_PackageVersion?: PackageVersionGenqlSelection;
  on_PinnedDiscussion?: PinnedDiscussionGenqlSelection;
  on_PinnedEvent?: PinnedEventGenqlSelection;
  on_PinnedIssue?: PinnedIssueGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_Project?: ProjectGenqlSelection;
  on_ProjectCard?: ProjectCardGenqlSelection;
  on_ProjectColumn?: ProjectColumnGenqlSelection;
  on_ProjectV2?: ProjectV2GenqlSelection;
  on_ProjectV2Field?: ProjectV2FieldGenqlSelection;
  on_ProjectV2Item?: ProjectV2ItemGenqlSelection;
  on_ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValueGenqlSelection;
  on_ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValueGenqlSelection;
  on_ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValueGenqlSelection;
  on_ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValueGenqlSelection;
  on_ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValueGenqlSelection;
  on_ProjectV2IterationField?: ProjectV2IterationFieldGenqlSelection;
  on_ProjectV2SingleSelectField?: ProjectV2SingleSelectFieldGenqlSelection;
  on_ProjectV2View?: ProjectV2ViewGenqlSelection;
  on_ProjectV2Workflow?: ProjectV2WorkflowGenqlSelection;
  on_PublicKey?: PublicKeyGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestCommit?: PullRequestCommitGenqlSelection;
  on_PullRequestCommitCommentThread?: PullRequestCommitCommentThreadGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_PullRequestReviewThread?: PullRequestReviewThreadGenqlSelection;
  on_PullRequestThread?: PullRequestThreadGenqlSelection;
  on_Push?: PushGenqlSelection;
  on_PushAllowance?: PushAllowanceGenqlSelection;
  on_Reaction?: ReactionGenqlSelection;
  on_ReadyForReviewEvent?: ReadyForReviewEventGenqlSelection;
  on_Ref?: RefGenqlSelection;
  on_ReferencedEvent?: ReferencedEventGenqlSelection;
  on_Release?: ReleaseGenqlSelection;
  on_ReleaseAsset?: ReleaseAssetGenqlSelection;
  on_RemovedFromMergeQueueEvent?: RemovedFromMergeQueueEventGenqlSelection;
  on_RemovedFromProjectEvent?: RemovedFromProjectEventGenqlSelection;
  on_RenamedTitleEvent?: RenamedTitleEventGenqlSelection;
  on_ReopenedEvent?: ReopenedEventGenqlSelection;
  on_RepoAccessAuditEntry?: RepoAccessAuditEntryGenqlSelection;
  on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryGenqlSelection;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryGenqlSelection;
  on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryGenqlSelection;
  on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoCreateAuditEntry?: RepoCreateAuditEntryGenqlSelection;
  on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryGenqlSelection;
  on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_RepositoryInvitation?: RepositoryInvitationGenqlSelection;
  on_RepositoryMigration?: RepositoryMigrationGenqlSelection;
  on_RepositoryRule?: RepositoryRuleGenqlSelection;
  on_RepositoryRuleset?: RepositoryRulesetGenqlSelection;
  on_RepositoryRulesetBypassActor?: RepositoryRulesetBypassActorGenqlSelection;
  on_RepositoryTopic?: RepositoryTopicGenqlSelection;
  on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryGenqlSelection;
  on_RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlertGenqlSelection;
  on_ReviewDismissalAllowance?: ReviewDismissalAllowanceGenqlSelection;
  on_ReviewDismissedEvent?: ReviewDismissedEventGenqlSelection;
  on_ReviewRequest?: ReviewRequestGenqlSelection;
  on_ReviewRequestRemovedEvent?: ReviewRequestRemovedEventGenqlSelection;
  on_ReviewRequestedEvent?: ReviewRequestedEventGenqlSelection;
  on_SavedReply?: SavedReplyGenqlSelection;
  on_SecurityAdvisory?: SecurityAdvisoryGenqlSelection;
  on_SponsorsActivity?: SponsorsActivityGenqlSelection;
  on_SponsorsListing?: SponsorsListingGenqlSelection;
  on_SponsorsListingFeaturedItem?: SponsorsListingFeaturedItemGenqlSelection;
  on_SponsorsTier?: SponsorsTierGenqlSelection;
  on_Sponsorship?: SponsorshipGenqlSelection;
  on_SponsorshipNewsletter?: SponsorshipNewsletterGenqlSelection;
  on_Status?: StatusGenqlSelection;
  on_StatusCheckRollup?: StatusCheckRollupGenqlSelection;
  on_StatusContext?: StatusContextGenqlSelection;
  on_SubscribedEvent?: SubscribedEventGenqlSelection;
  on_Tag?: TagGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  on_Topic?: TopicGenqlSelection;
  on_TransferredEvent?: TransferredEventGenqlSelection;
  on_Tree?: TreeGenqlSelection;
  on_UnassignedEvent?: UnassignedEventGenqlSelection;
  on_UnlabeledEvent?: UnlabeledEventGenqlSelection;
  on_UnlockedEvent?: UnlockedEventGenqlSelection;
  on_UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEventGenqlSelection;
  on_UnpinnedEvent?: UnpinnedEventGenqlSelection;
  on_UnsubscribedEvent?: UnsubscribedEventGenqlSelection;
  on_User?: UserGenqlSelection;
  on_UserBlockedEvent?: UserBlockedEventGenqlSelection;
  on_UserContentEdit?: UserContentEditGenqlSelection;
  on_UserStatus?: UserStatusGenqlSelection;
  on_VerifiableDomain?: VerifiableDomainGenqlSelection;
  on_Workflow?: WorkflowGenqlSelection;
  on_WorkflowRun?: WorkflowRunGenqlSelection;
  on_WorkflowRunFile?: WorkflowRunFileGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An OIDC identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope. */
export interface OIDCProviderGenqlSelection {
  /** The enterprise this identity provider belongs to. */
  enterprise?: EnterpriseGenqlSelection;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities?: ExternalIdentityConnectionGenqlSelection & {
    __args?: {
      /** Filter to external identities with valid org membership only */
      membersOnly?: Scalars['Boolean'] | null;
      /** Filter to external identities with the users login */
      login?: Scalars['String'] | null;
      /** Filter to external identities with the users userName/NameID attribute */
      userName?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The OIDC identity provider type */
  providerType?: boolean | number;
  /** The id of the tenant this provider is attached to */
  tenantId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryDataGenqlSelection {
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryGenqlSelection;
  on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The application URL of the OAuth application. */
  applicationUrl?: boolean | number;
  /** The callback URL of the OAuth application. */
  callbackUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The rate limit of the OAuth application. */
  rateLimit?: boolean | number;
  /** The state of the OAuth application. */
  state?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The email address used to invite a billing manager for the organization. */
  invitationEmail?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The permission level of the member added to the organization. */
  permission?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The blocked user. */
  blockedUser?: UserGenqlSelection;
  /** The username of the blocked user. */
  blockedUserName?: boolean | number;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: boolean | number;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The billing plan for the Organization. */
  billingPlan?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: boolean | number;
  id?: boolean | number;
  /** The SAML provider's issuer URL. */
  issuerUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: boolean | number;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: boolean | number;
  id?: boolean | number;
  /** The SAML provider's issuer URL. */
  issuerUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: boolean | number;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for an organization's enterprise owner connections. */
export interface OrgEnterpriseOwnerOrder {
  /** The field to order enterprise owners by. */
  field: OrgEnterpriseOwnerOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The email address of the organization invitation. */
  email?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The organization invitation. */
  organizationInvitation?: OrganizationInvitationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.oauth_app_access_blocked event. */
export interface OrgOauthAppAccessBlockedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.oauth_app_access_unblocked event. */
export interface OrgOauthAppAccessUnblockedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The name of the OAuth application. */
  oauthApplicationName?: boolean | number;
  /** The HTTP path for the OAuth application */
  oauthApplicationResourcePath?: boolean | number;
  /** The HTTP URL for the OAuth application */
  oauthApplicationUrl?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The reason for the billing manager being removed. */
  reason?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The types of membership the member has with the organization. */
  membershipTypes?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The reason for the member being removed. */
  reason?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The types of membership the outside collaborator has with the organization. */
  membershipTypes?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The reason for the outside collaborator being removed from the Organization. */
  reason?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The number of custom email routings for the restored member. */
  restoredCustomEmailRoutingsCount?: boolean | number;
  /** The number of issue assignments for the restored member. */
  restoredIssueAssignmentsCount?: boolean | number;
  /** Restored organization membership objects. */
  restoredMemberships?: OrgRestoreMemberAuditEntryMembershipGenqlSelection;
  /** The number of restored memberships. */
  restoredMembershipsCount?: boolean | number;
  /** The number of repositories of the restored member. */
  restoredRepositoriesCount?: boolean | number;
  /** The number of starred repositories for the restored member. */
  restoredRepositoryStarsCount?: boolean | number;
  /** The number of watched repositories for the restored member. */
  restoredRepositoryWatchesCount?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types of memberships that can be restored for an Organization member. */
export interface OrgRestoreMemberAuditEntryMembershipGenqlSelection {
  on_OrgRestoreMemberMembershipOrganizationAuditEntryData?: OrgRestoreMemberMembershipOrganizationAuditEntryDataGenqlSelection;
  on_OrgRestoreMemberMembershipRepositoryAuditEntryData?: OrgRestoreMemberMembershipRepositoryAuditEntryDataGenqlSelection;
  on_OrgRestoreMemberMembershipTeamAuditEntryData?: OrgRestoreMemberMembershipTeamAuditEntryDataGenqlSelection;
  on_OrganizationAuditEntryData?: OrganizationAuditEntryDataGenqlSelection;
  on_RepositoryAuditEntryData?: RepositoryAuditEntryDataGenqlSelection;
  on_TeamAuditEntryData?: TeamAuditEntryDataGenqlSelection;
  __typename?: boolean | number;
}

/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataGenqlSelection {
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataGenqlSelection {
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryDataGenqlSelection {
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The user being unblocked by the organization. */
  blockedUser?: UserGenqlSelection;
  /** The username of the blocked user. */
  blockedUserName?: boolean | number;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: boolean | number;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The new base repository permission level for the organization. */
  permission?: boolean | number;
  /** The former base repository permission level for the organization. */
  permissionWas?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The new member permission level for the organization. */
  permission?: boolean | number;
  /** The former member permission level for the organization. */
  permissionWas?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** Can members create repositories in the organization. */
  canCreateRepositories?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The permission for visibility level of repositories for this organization. */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** Can outside collaborators be invited to repositories in the organization. */
  canInviteOutsideCollaboratorsToRepositories?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface OrganizationGenqlSelection {
  /** The text of the announcement */
  announcement?: boolean | number;
  /** The expiration date of the announcement, if any */
  announcementExpiresAt?: boolean | number;
  /** Whether the announcement can be dismissed by the user */
  announcementUserDismissible?: boolean | number;
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?:
    | {
        __args: {
          /** Filter to only a particular kind of pinnable item. */
          type?: PinnableItemType | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the organization was archived. */
  archivedAt?: boolean | number;
  /** Audit log entries of the organization */
  auditLog?: OrganizationAuditEntryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The query string to filter audit entries */
      query?: Scalars['String'] | null;
      /** Ordering options for the returned audit log entries. */
      orderBy?: AuditLogOrder | null;
    };
  };
  /** A URL pointing to the organization's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The organization's public profile description. */
  description?: boolean | number;
  /** The organization's public profile description rendered to HTML. */
  descriptionHTML?: boolean | number;
  /** A list of domains owned by the organization. */
  domains?: VerifiableDomainConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter by if the domain is verified. */
      isVerified?: Scalars['Boolean'] | null;
      /** Filter by if the domain is approved. */
      isApproved?: Scalars['Boolean'] | null;
      /** Ordering options for verifiable domains returned. */
      orderBy?: VerifiableDomainOrder | null;
    };
  };
  /** The organization's public email. */
  email?: boolean | number;
  /** A list of owners of the organization's enterprise account. */
  enterpriseOwners?: OrganizationEnterpriseOwnerConnectionGenqlSelection & {
    __args?: {
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** The organization role to filter by. */
      organizationRole?: RoleInOrganization | null;
      /** Ordering options for enterprise owners returned from the connection. */
      orderBy?: OrgEnterpriseOwnerOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: boolean | number;
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: boolean | number;
  id?: boolean | number;
  /** The interaction ability settings for this organization. */
  interactionAbility?: RepositoryInteractionAbilityGenqlSelection;
  /** The setting value for whether the organization has an IP allow list enabled. */
  ipAllowListEnabledSetting?: boolean | number;
  /** The IP addresses that are allowed to access resources owned by the organization. */
  ipAllowListEntries?: IpAllowListEntryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for IP allow list entries returned. */
      orderBy?: IpAllowListEntryOrder | null;
    };
  };
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting?: boolean | number;
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: {
    __args: {
      /** The target account's login. */
      accountLogin: Scalars['String'];
    };
  };
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: boolean | number;
  /** Whether the organization has verified its profile email and website. */
  isVerified?: boolean | number;
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase?: ProfileItemShowcaseGenqlSelection;
  /** The organization's public profile location. */
  location?: boolean | number;
  /** The organization's login name. */
  login?: boolean | number;
  /** A list of all mannequins for this organization. */
  mannequins?: MannequinConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter mannequins by login. */
      login?: Scalars['String'] | null;
      /** Ordering options for mannequins returned from the connection. */
      orderBy?: MannequinOrder | null;
    };
  };
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: UserStatusConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for user statuses returned from the connection. */
      orderBy?: UserStatusOrder | null;
    };
  };
  /** Members can fork private repositories in this organization */
  membersCanForkPrivateRepositories?: boolean | number;
  /** A list of users who are members of this organization. */
  membersWithRole?: OrganizationMemberConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: boolean | number;
  /** The organization's public profile name. */
  name?: boolean | number;
  /** The HTTP path creating a new team */
  newTeamResourcePath?: boolean | number;
  /** The HTTP URL creating a new team */
  newTeamUrl?: boolean | number;
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting?: boolean | number;
  /** The billing email for the organization. */
  organizationBillingEmail?: boolean | number;
  /** A list of packages under the owner. */
  packages?: PackageConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Find packages by their names. */
      names?: (Scalars['String'] | null)[] | null;
      /** Find packages in a repository by ID. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter registry package by type. */
      packageType?: PackageType | null;
      /** Ordering of the returned packages. */
      orderBy?: PackageOrder | null;
    };
  };
  /** A list of users who have been invited to join this organization. */
  pendingMembers?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinnable items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinned items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: boolean | number;
  /** Find project by number. */
  project?: ProjectGenqlSelection & {
    __args: {
      /** The project number to find. */
      number: Scalars['Int'];
    };
  };
  /** Find a project by number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projects?: ProjectConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for projects returned from the connection */
      orderBy?: ProjectOrder | null;
      /** Query to search projects by, currently only searching by name. */
      search?: Scalars['String'] | null;
      /** A list of states to filter the projects by. */
      states?: ProjectState[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path listing organization's projects */
  projectsResourcePath?: boolean | number;
  /** The HTTP URL listing organization's projects */
  projectsUrl?: boolean | number;
  /** A list of projects under the owner. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** A project to search for under the the owner. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories that the user owns. */
  repositories?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If non-null, filters repositories according to whether they are archived and not maintained */
      isArchived?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they are forks of another repository */
      isFork?: Scalars['Boolean'] | null;
    };
  };
  /** Find Repository. */
  repository?: RepositoryGenqlSelection & {
    __args: {
      /** Name of Repository to find. */
      name: Scalars['String'];
      /** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
      followRenames?: Scalars['Boolean'] | null;
    };
  };
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: DiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter discussion comments to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussion comments to only those that were marked as the answer */
      onlyAnswers?: Scalars['Boolean'] | null;
    };
  };
  /** Discussions this user has started. */
  repositoryDiscussions?: DiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for discussions returned from the connection. */
      orderBy?: DiscussionOrder | null;
      /** Filter discussions to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. */
      answered?: Scalars['Boolean'] | null;
      /** A list of states to filter the discussions by. */
      states?: DiscussionState[] | null;
    };
  };
  /** A list of all repository migrations for this organization. */
  repositoryMigrations?: RepositoryMigrationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter repository migrations by state. */
      state?: MigrationState | null;
      /** Filter repository migrations by repository name. */
      repositoryName?: Scalars['String'] | null;
      /** Ordering options for repository migrations returned. */
      orderBy?: RepositoryMigrationOrder | null;
    };
  };
  /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */
  requiresTwoFactorAuthentication?: boolean | number;
  /** The HTTP path for this organization. */
  resourcePath?: boolean | number;
  /** Returns a single ruleset from the current organization by ID. */
  ruleset?: RepositoryRulesetGenqlSelection & {
    __args: {
      /** The ID of the ruleset to be returned. */
      databaseId: Scalars['Int'];
    };
  };
  /** A list of rulesets for this organization. */
  rulesets?: RepositoryRulesetConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Return rulesets configured at higher levels that apply to this organization */
      includeParents?: Scalars['Boolean'] | null;
    };
  };
  /** The Organization's SAML identity provider. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. */
  samlIdentityProvider?: OrganizationIdentityProviderGenqlSelection;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the users and organizations returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** List of sponsors for this user or organization. */
  sponsors?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. */
      tierId?: Scalars['ID'] | null;
      /** Ordering options for sponsors returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: SponsorsActivityConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given. */
      period?: SponsorsActivityPeriod | null;
      /** Filter activities to those that occurred on or after this time. */
      since?: Scalars['DateTime'] | null;
      /** Filter activities to those that occurred before this time. */
      until?: Scalars['DateTime'] | null;
      /** Ordering options for activity returned from the connection. */
      orderBy?: SponsorsActivityOrder | null;
      /** Filter activities to only the specified actions. */
      actions?: SponsorsActivityAction[] | null;
      /** Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship. */
      includeAsSponsor?: Scalars['Boolean'] | null;
      /** Whether or not to include private activities in the result set. Defaults to including public and private activities. */
      includePrivate?: Scalars['Boolean'] | null;
    };
  };
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: SponsorshipNewsletterConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorship updates returned from the connection. */
      orderBy?: SponsorshipNewsletterOrder | null;
    };
  };
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Whether or not to include private sponsorships in the result set */
      includePrivate?: Scalars['Boolean'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins. */
      maintainerLogins?: Scalars['String'][] | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** Find an organization's team by its slug. */
  team?: TeamGenqlSelection & {
    __args: {
      /** The name or slug of the team to find. */
      slug: Scalars['String'];
    };
  };
  /** A list of teams in this organization. */
  teams?: TeamConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters teams according to privacy */
      privacy?: TeamPrivacy | null;
      /** If non-null, filters teams according to notification setting */
      notificationSetting?: TeamNotificationSetting | null;
      /** If non-null, filters teams according to whether the viewer is an admin or member on team */
      role?: TeamRole | null;
      /** If non-null, filters teams with query on team name and team slug */
      query?: Scalars['String'] | null;
      /** User logins to filter by */
      userLogins?: Scalars['String'][] | null;
      /** Ordering options for teams returned from the connection */
      orderBy?: TeamOrder | null;
      /** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
      ldapMapped?: Scalars['Boolean'] | null;
      /** If true, restrict to only root teams */
      rootTeamsOnly?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path listing organization's teams */
  teamsResourcePath?: boolean | number;
  /** The HTTP URL listing organization's teams */
  teamsUrl?: boolean | number;
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?:
    | {
        __args: {
          /** Filter payments to those that occurred on or after this time. */
          since?: Scalars['DateTime'] | null;
          /** Filter payments to those that occurred before this time. */
          until?: Scalars['DateTime'] | null;
          /** Filter payments to those made to the users or organizations with the specified usernames. */
          sponsorableLogins?: Scalars['String'][] | null;
        };
      }
    | boolean
    | number;
  /** The organization's Twitter username. */
  twitterUsername?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this organization. */
  url?: boolean | number;
  /** Organization is adminable by the viewer. */
  viewerCanAdminister?: boolean | number;
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: boolean | number;
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: boolean | number;
  /** Viewer can create repositories on this organization */
  viewerCanCreateRepositories?: boolean | number;
  /** Viewer can create teams on this organization. */
  viewerCanCreateTeams?: boolean | number;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: boolean | number;
  /** Viewer is an active member of this organization. */
  viewerIsAMember?: boolean | number;
  /** Whether or not this Organization is followed by the viewer. */
  viewerIsFollowing?: boolean | number;
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: boolean | number;
  /** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
  webCommitSignoffRequired?: boolean | number;
  /** The organization's public profile URL. */
  websiteUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An audit entry in an organization audit log. */
export interface OrganizationAuditEntryGenqlSelection {
  on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryGenqlSelection;
  on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryGenqlSelection;
  on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryGenqlSelection;
  on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryGenqlSelection;
  on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryGenqlSelection;
  on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryGenqlSelection;
  on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryGenqlSelection;
  on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgCreateAuditEntry?: OrgCreateAuditEntryGenqlSelection;
  on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryGenqlSelection;
  on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryGenqlSelection;
  on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryGenqlSelection;
  on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryGenqlSelection;
  on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntryGenqlSelection;
  on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryGenqlSelection;
  on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryGenqlSelection;
  on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryGenqlSelection;
  on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryGenqlSelection;
  on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryGenqlSelection;
  on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_RepoAccessAuditEntry?: RepoAccessAuditEntryGenqlSelection;
  on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryGenqlSelection;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryGenqlSelection;
  on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryGenqlSelection;
  on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoCreateAuditEntry?: RepoCreateAuditEntryGenqlSelection;
  on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryGenqlSelection;
  on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryGenqlSelection;
  on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryGenqlSelection;
  on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_AuditEntry?: AuditEntryGenqlSelection;
  on_EnterpriseAuditEntryData?: EnterpriseAuditEntryDataGenqlSelection;
  on_OrganizationAuditEntryData?: OrganizationAuditEntryDataGenqlSelection;
  on_OauthApplicationAuditEntryData?: OauthApplicationAuditEntryDataGenqlSelection;
  on_RepositoryAuditEntryData?: RepositoryAuditEntryDataGenqlSelection;
  on_TopicAuditEntryData?: TopicAuditEntryDataGenqlSelection;
  on_TeamAuditEntryData?: TeamAuditEntryDataGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: OrganizationAuditEntryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationAuditEntryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryDataGenqlSelection {
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryGenqlSelection;
  on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryGenqlSelection;
  on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryGenqlSelection;
  on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryGenqlSelection;
  on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryGenqlSelection;
  on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryGenqlSelection;
  on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryGenqlSelection;
  on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_OrgCreateAuditEntry?: OrgCreateAuditEntryGenqlSelection;
  on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryGenqlSelection;
  on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryGenqlSelection;
  on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryGenqlSelection;
  on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryGenqlSelection;
  on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryGenqlSelection;
  on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryGenqlSelection;
  on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryGenqlSelection;
  on_OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntryGenqlSelection;
  on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryGenqlSelection;
  on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryGenqlSelection;
  on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryGenqlSelection;
  on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryGenqlSelection;
  on_OrgRestoreMemberMembershipOrganizationAuditEntryData?: OrgRestoreMemberMembershipOrganizationAuditEntryDataGenqlSelection;
  on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryGenqlSelection;
  on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryGenqlSelection;
  on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_RepoAccessAuditEntry?: RepoAccessAuditEntryGenqlSelection;
  on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryGenqlSelection;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryGenqlSelection;
  on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryGenqlSelection;
  on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoCreateAuditEntry?: RepoCreateAuditEntryGenqlSelection;
  on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryGenqlSelection;
  on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryGenqlSelection;
  on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryGenqlSelection;
  on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryGenqlSelection;
  on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface OrganizationAuditEntryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of organizations managed by an enterprise. */
export interface OrganizationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: OrganizationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface OrganizationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface OrganizationEnterpriseOwnerConnectionGenqlSelection {
  /** A list of edges. */
  edges?: OrganizationEnterpriseOwnerEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An enterprise owner in the context of an organization that is part of the enterprise. */
export interface OrganizationEnterpriseOwnerEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserGenqlSelection;
  /** The role of the owner with respect to the organization. */
  organizationRole?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. */
export interface OrganizationIdentityProviderGenqlSelection {
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod?: boolean | number;
  /** External Identities provisioned by this Identity Provider */
  externalIdentities?: ExternalIdentityConnectionGenqlSelection & {
    __args?: {
      /** Filter to external identities with valid org membership only */
      membersOnly?: Scalars['Boolean'] | null;
      /** Filter to external identities with the users login */
      login?: Scalars['String'] | null;
      /** Filter to external identities with the users userName/NameID attribute */
      userName?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate?: boolean | number;
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer?: boolean | number;
  /** Organization this Identity Provider belongs to */
  organization?: OrganizationGenqlSelection;
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod?: boolean | number;
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An Invitation for a user to an organization. */
export interface OrganizationInvitationGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The email address of the user invited to the organization. */
  email?: boolean | number;
  id?: boolean | number;
  /** The source of the invitation. */
  invitationSource?: boolean | number;
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType?: boolean | number;
  /** The user who was invited to the organization. */
  invitee?: UserGenqlSelection;
  /** The user who created the invitation. */
  inviter?: UserGenqlSelection;
  /** The organization the invite is for */
  organization?: OrganizationGenqlSelection;
  /** The user's pending role in the organization (e.g. member, owner). */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: OrganizationInvitationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: OrganizationInvitationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface OrganizationInvitationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: OrganizationInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface OrganizationMemberConnectionGenqlSelection {
  /** A list of edges. */
  edges?: OrganizationMemberEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user within an organization. */
export interface OrganizationMemberEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserGenqlSelection;
  /** The role this user has in the organization. */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Enterprise Importer (GEI) organization migration. */
export interface OrganizationMigrationGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The reason the organization migration failed. */
  failureReason?: boolean | number;
  id?: boolean | number;
  /** The remaining amount of repos to be migrated. */
  remainingRepositoriesCount?: boolean | number;
  /** The name of the source organization to be migrated. */
  sourceOrgName?: boolean | number;
  /** The URL of the source organization to migrate. */
  sourceOrgUrl?: boolean | number;
  /** The migration state. */
  state?: boolean | number;
  /** The name of the target organization. */
  targetOrgName?: boolean | number;
  /** The total amount of repositories to be migrated. */
  totalRepositoriesCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Used for argument of CreateProjectV2 mutation. */
export interface OrganizationOrUserGenqlSelection {
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** Ordering options for organization connections. */
export interface OrganizationOrder {
  /** The field to order organizations by. */
  field: OrganizationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams?: TeamConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The path for the full team list for this user */
  teamsResourcePath?: boolean | number;
  /** The URL for the full team list for this user */
  teamsUrl?: boolean | number;
  /** The total number of teams the user is on in the organization */
  totalTeamCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An organization list hovercard context */
export interface OrganizationsHovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations?: OrganizationConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for the User's organizations. */
      orderBy?: OrganizationOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The total number of organizations this user is in */
  totalOrganizationCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information for an uploaded package. */
export interface PackageGenqlSelection {
  id?: boolean | number;
  /** Find the latest version for the package. */
  latestVersion?: PackageVersionGenqlSelection;
  /** Identifies the name of the package. */
  name?: boolean | number;
  /** Identifies the type of the package. */
  packageType?: boolean | number;
  /** The repository this package belongs to. */
  repository?: RepositoryGenqlSelection;
  /** Statistics about package activity. */
  statistics?: PackageStatisticsGenqlSelection;
  /** Find package version by version string. */
  version?: PackageVersionGenqlSelection & {
    __args: {
      /** The package version. */
      version: Scalars['String'];
    };
  };
  /** list of versions for this package */
  versions?: PackageVersionConnectionGenqlSelection & {
    __args?: {
      /** Ordering of the returned packages. */
      orderBy?: PackageVersionOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Package. */
export interface PackageConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PackageEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PackageGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PackageEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PackageGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A file in a package version. */
export interface PackageFileGenqlSelection {
  id?: boolean | number;
  /** MD5 hash of the file. */
  md5?: boolean | number;
  /** Name of the file. */
  name?: boolean | number;
  /** The package version this file belongs to. */
  packageVersion?: PackageVersionGenqlSelection;
  /** SHA1 hash of the file. */
  sha1?: boolean | number;
  /** SHA256 hash of the file. */
  sha256?: boolean | number;
  /** Size of the file in bytes. */
  size?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** URL to download the asset. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PackageFile. */
export interface PackageFileConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PackageFileEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PackageFileGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PackageFileEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PackageFileGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of package files can be ordered upon return. */
export interface PackageFileOrder {
  /** The field in which to order package files by. */
  field?: PackageFileOrderField | null;
  /** The direction in which to order package files by the specified field. */
  direction?: OrderDirection | null;
}

/** Ways in which lists of packages can be ordered upon return. */
export interface PackageOrder {
  /** The field in which to order packages by. */
  field?: PackageOrderField | null;
  /** The direction in which to order packages by the specified field. */
  direction?: OrderDirection | null;
}

/** Represents an owner of a package. */
export interface PackageOwnerGenqlSelection {
  id?: boolean | number;
  /** A list of packages under the owner. */
  packages?: PackageConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Find packages by their names. */
      names?: (Scalars['String'] | null)[] | null;
      /** Find packages in a repository by ID. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter registry package by type. */
      packageType?: PackageType | null;
      /** Ordering of the returned packages. */
      orderBy?: PackageOrder | null;
    };
  };
  on_Organization?: OrganizationGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatisticsGenqlSelection {
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTagGenqlSelection {
  id?: boolean | number;
  /** Identifies the tag name of the version. */
  name?: boolean | number;
  /** Version that the tag is associated with. */
  version?: PackageVersionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information about a specific package version. */
export interface PackageVersionGenqlSelection {
  /** List of files associated with this package version */
  files?: PackageFileConnectionGenqlSelection & {
    __args?: {
      /** Ordering of the returned package files. */
      orderBy?: PackageFileOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The package associated with this version. */
  package?: PackageGenqlSelection;
  /** The platform this version was built for. */
  platform?: boolean | number;
  /** Whether or not this version is a pre-release. */
  preRelease?: boolean | number;
  /** The README of this package version. */
  readme?: boolean | number;
  /** The release associated with this package version. */
  release?: ReleaseGenqlSelection;
  /** Statistics about package activity. */
  statistics?: PackageVersionStatisticsGenqlSelection;
  /** The package version summary. */
  summary?: boolean | number;
  /** The version string. */
  version?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PackageVersion. */
export interface PackageVersionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PackageVersionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PackageVersionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PackageVersionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PackageVersionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of package versions can be ordered upon return. */
export interface PackageVersionOrder {
  /** The field in which to order package versions by. */
  field?: PackageVersionOrderField | null;
  /** The direction in which to order package versions by the specified field. */
  direction?: OrderDirection | null;
}

/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatisticsGenqlSelection {
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information about pagination in a connection. */
export interface PageInfoGenqlSelection {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: boolean | number;
  /** When paginating forwards, are there more items? */
  hasNextPage?: boolean | number;
  /** When paginating backwards, are there more items? */
  hasPreviousPage?: boolean | number;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can grant permissions on a repository to a user */
export interface PermissionGranterGenqlSelection {
  on_Organization?: OrganizationGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_Starrable?: StarrableGenqlSelection;
  on_RepositoryInfo?: RepositoryInfoGenqlSelection;
  __typename?: boolean | number;
}

/** A level of permission and source for a user's access to a repository. */
export interface PermissionSourceGenqlSelection {
  /** The organization the repository belongs to. */
  organization?: OrganizationGenqlSelection;
  /** The level of access this source has granted to the user. */
  permission?: boolean | number;
  /** The name of the role this source has granted to the user. */
  roleName?: boolean | number;
  /** The source of this permission. */
  source?: PermissionGranterGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of PinIssue */
export interface PinIssueInput {
  /** The ID of the issue to be pinned */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of PinIssue */
export interface PinIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was pinned */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be pinned to a profile page. */
export interface PinnableItemGenqlSelection {
  on_Gist?: GistGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Starrable?: StarrableGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_RepositoryInfo?: RepositoryInfoGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for PinnableItem. */
export interface PinnableItemConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PinnableItemEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PinnableItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PinnableItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PinnableItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export interface PinnedDiscussionGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The discussion that was pinned. */
  discussion?: DiscussionGenqlSelection;
  /** Color stops of the chosen gradient */
  gradientStopColors?: boolean | number;
  id?: boolean | number;
  /** Background texture pattern */
  pattern?: boolean | number;
  /** The actor that pinned this discussion. */
  pinnedBy?: ActorGenqlSelection;
  /** Preconfigured background gradient option */
  preconfiguredGradient?: boolean | number;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PinnedDiscussion. */
export interface PinnedDiscussionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PinnedDiscussionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PinnedDiscussionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PinnedDiscussionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PinnedDiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the issue associated with the event. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssueGenqlSelection {
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** Identifies the primary key from the database as a BigInt. */
  fullDatabaseId?: boolean | number;
  id?: boolean | number;
  /** The issue that was pinned. */
  issue?: IssueGenqlSelection;
  /** The actor that pinned this issue. */
  pinnedBy?: ActorGenqlSelection;
  /** The repository that this issue was pinned to. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PinnedIssue. */
export interface PinnedIssueConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PinnedIssueEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PinnedIssueGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PinnedIssueEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PinnedIssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export interface ProfileItemShowcaseGenqlSelection {
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems?: boolean | number;
  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */
  items?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwnerGenqlSelection {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?:
    | {
        __args: {
          /** Filter to only a particular kind of pinnable item. */
          type?: PinnableItemType | null;
        };
      }
    | boolean
    | number;
  /** The public profile email. */
  email?: boolean | number;
  id?: boolean | number;
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase?: ProfileItemShowcaseGenqlSelection;
  /** The public profile location. */
  location?: boolean | number;
  /** The username used to login. */
  login?: boolean | number;
  /** The public profile name. */
  name?: boolean | number;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinnable items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinned items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: boolean | number;
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: boolean | number;
  /** The public profile website URL. */
  websiteUrl?: boolean | number;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Projects manage issues, pull requests and notes within a project owner. */
export interface ProjectGenqlSelection {
  /** The project's description body. */
  body?: boolean | number;
  /** The projects description body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** Indicates if the object is closed (definition of closed may depend on type) */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** List of columns in the project */
  columns?: ProjectColumnConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who originally created the project. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project's name. */
  name?: boolean | number;
  /** The project's number. */
  number?: boolean | number;
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  owner?: ProjectOwnerGenqlSelection;
  /** List of pending cards in this project */
  pendingCards?: ProjectCardConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of archived states to filter the cards by */
      archivedStates?: (ProjectCardArchivedState | null)[] | null;
    };
  };
  /** Project progress details. */
  progress?: ProjectProgressGenqlSelection;
  /** The HTTP path for this project */
  resourcePath?: boolean | number;
  /** Whether the project is open or closed. */
  state?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this project */
  url?: boolean | number;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A card in a project. */
export interface ProjectCardGenqlSelection {
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   *
   */
  column?: ProjectColumnGenqlSelection;
  /** The card content item */
  content?: ProjectCardItemGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created this card */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** Whether the card is archived */
  isArchived?: boolean | number;
  /** The card note */
  note?: boolean | number;
  /** The project that contains this card. */
  project?: ProjectGenqlSelection;
  /** The HTTP path for this card */
  resourcePath?: boolean | number;
  /** The state of ProjectCard */
  state?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this card */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectCard. */
export interface ProjectCardConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectCardEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectCardGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectCardEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectCardGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be inside Project Cards. */
export interface ProjectCardItemGenqlSelection {
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** A column inside a project. */
export interface ProjectColumnGenqlSelection {
  /** List of cards in the column */
  cards?: ProjectCardConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of archived states to filter the cards by */
      archivedStates?: (ProjectCardArchivedState | null)[] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project column's name. */
  name?: boolean | number;
  /** The project that contains this column. */
  project?: ProjectGenqlSelection;
  /** The semantic purpose of the column */
  purpose?: boolean | number;
  /** The HTTP path for this project column */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this project column */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectColumn. */
export interface ProjectColumnConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectColumnEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectColumnGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectColumnEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectColumnGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of projects associated with the owner. */
export interface ProjectConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectOrder {
  /** The field in which to order projects by. */
  field: ProjectOrderField;
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
}

/** Represents an owner of a Project. */
export interface ProjectOwnerGenqlSelection {
  id?: boolean | number;
  /** Find project by number. */
  project?: ProjectGenqlSelection & {
    __args: {
      /** The project number to find. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projects?: ProjectConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for projects returned from the connection */
      orderBy?: ProjectOrder | null;
      /** Query to search projects by, currently only searching by name. */
      search?: Scalars['String'] | null;
      /** A list of states to filter the projects by. */
      states?: ProjectState[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path listing owners projects */
  projectsResourcePath?: boolean | number;
  /** The HTTP URL listing owners projects */
  projectsUrl?: boolean | number;
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: boolean | number;
  on_Organization?: OrganizationGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Project progress stats. */
export interface ProjectProgressGenqlSelection {
  /** The number of done cards. */
  doneCount?: boolean | number;
  /** The percentage of done cards. */
  donePercentage?: boolean | number;
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled?: boolean | number;
  /** The number of in-progress cards. */
  inProgressCount?: boolean | number;
  /** The percentage of in-progress cards. */
  inProgressPercentage?: boolean | number;
  /** The number of to do cards. */
  todoCount?: boolean | number;
  /** The percentage of to do cards. */
  todoPercentage?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export interface ProjectV2GenqlSelection {
  /** Returns true if the project is closed. */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who originally created the project. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** A field of the project */
  field?: ProjectV2FieldConfigurationGenqlSelection & {
    __args: {
      /** The name of the field */
      name: Scalars['String'];
    };
  };
  /** List of fields and their constraints in the project */
  fields?: ProjectV2FieldConfigurationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for project v2 fields returned from the connection */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  id?: boolean | number;
  /** List of items in the project */
  items?: ProjectV2ItemConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for project v2 items returned from the connection */
      orderBy?: ProjectV2ItemOrder | null;
    };
  };
  /** The project's number. */
  number?: boolean | number;
  /** The project's owner. Currently limited to organizations and users. */
  owner?: ProjectV2OwnerGenqlSelection;
  /** Returns true if the project is public. */
  public?: boolean | number;
  /** The project's readme. */
  readme?: boolean | number;
  /** The repositories the project is linked to. */
  repositories?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
    };
  };
  /** The HTTP path for this project */
  resourcePath?: boolean | number;
  /** The project's short description. */
  shortDescription?: boolean | number;
  /** The teams the project is linked to. */
  teams?: TeamConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for teams returned from this connection. */
      orderBy?: TeamOrder | null;
    };
  };
  /** Returns true if this project is a template. */
  template?: boolean | number;
  /** The project's name. */
  title?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this project */
  url?: boolean | number;
  /** A view of the project */
  view?: ProjectV2ViewGenqlSelection & {
    __args: {
      /** The number of a view belonging to the project */
      number: Scalars['Int'];
    };
  };
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** List of views in the project */
  views?: ProjectV2ViewConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for project v2 views returned from the connection */
      orderBy?: ProjectV2ViewOrder | null;
    };
  };
  /** A workflow of the project */
  workflow?: ProjectV2WorkflowGenqlSelection & {
    __args: {
      /** The number of a workflow belonging to the project */
      number: Scalars['Int'];
    };
  };
  /** List of the workflows in the project */
  workflows?: ProjectV2WorkflowConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for project v2 workflows returned from the connection */
      orderBy?: ProjectV2WorkflowOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Possible collaborators for a project. */
export interface ProjectV2ActorGenqlSelection {
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for ProjectV2Actor. */
export interface ProjectV2ActorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2ActorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2ActorGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2ActorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2ActorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A collaborator to update on a project. Only one of the userId or teamId should be provided. */
export interface ProjectV2Collaborator {
  /** The ID of the user as a collaborator. */
  userId?: Scalars['ID'] | null;
  /** The ID of the team as a collaborator. */
  teamId?: Scalars['ID'] | null;
  /** The role to grant the collaborator */
  role: ProjectV2Roles;
}

/** The connection type for ProjectV2. */
export interface ProjectV2ConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2EdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2GenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2EdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A field inside a project. */
export interface ProjectV2FieldGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The field's type. */
  dataType?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project field's name. */
  name?: boolean | number;
  /** The project that contains this field. */
  project?: ProjectV2GenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Common fields across different project field types */
export interface ProjectV2FieldCommonGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The field's type. */
  dataType?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project field's name. */
  name?: boolean | number;
  /** The project that contains this field. */
  project?: ProjectV2GenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  on_ProjectV2Field?: ProjectV2FieldGenqlSelection;
  on_ProjectV2IterationField?: ProjectV2IterationFieldGenqlSelection;
  on_ProjectV2SingleSelectField?: ProjectV2SingleSelectFieldGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Configurations for project fields. */
export interface ProjectV2FieldConfigurationGenqlSelection {
  on_ProjectV2Field?: ProjectV2FieldGenqlSelection;
  on_ProjectV2IterationField?: ProjectV2IterationFieldGenqlSelection;
  on_ProjectV2SingleSelectField?: ProjectV2SingleSelectFieldGenqlSelection;
  on_ProjectV2FieldCommon?: ProjectV2FieldCommonGenqlSelection;
  on_Node?: NodeGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for ProjectV2FieldConfiguration. */
export interface ProjectV2FieldConfigurationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2FieldConfigurationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2FieldConfigurationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2FieldConfigurationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2FieldConfigurationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2Field. */
export interface ProjectV2FieldConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2FieldEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2FieldGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2FieldEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2FieldGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for project v2 field connections */
export interface ProjectV2FieldOrder {
  /** The field to order the project v2 fields by. */
  field: ProjectV2FieldOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
export interface ProjectV2FieldValue {
  /** The text to set on the field. */
  text?: Scalars['String'] | null;
  /** The number to set on the field. */
  number?: Scalars['Float'] | null;
  /** The ISO 8601 date to set on the field. */
  date?: Scalars['Date'] | null;
  /** The id of the single select option to set on the field. */
  singleSelectOptionId?: Scalars['String'] | null;
  /** The id of the iteration to set on the field. */
  iterationId?: Scalars['String'] | null;
}

/** Ways in which to filter lists of projects. */
export interface ProjectV2Filters {
  /** List project v2 filtered by the state given. */
  state?: ProjectV2State | null;
}

/** An item within a Project. */
export interface ProjectV2ItemGenqlSelection {
  /** The content of the referenced draft issue, issue, or pull request */
  content?: ProjectV2ItemContentGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The field value of the first project field which matches the 'name' argument that is set on the item. */
  fieldValueByName?: ProjectV2ItemFieldValueGenqlSelection & {
    __args: {
      /** The name of the field to return the field value of */
      name: Scalars['String'];
    };
  };
  /** The field values that are set on the item. */
  fieldValues?: ProjectV2ItemFieldValueConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for project v2 item field values returned from the connection */
      orderBy?: ProjectV2ItemFieldValueOrder | null;
    };
  };
  id?: boolean | number;
  /** Whether the item is archived. */
  isArchived?: boolean | number;
  /** The project that contains this item. */
  project?: ProjectV2GenqlSelection;
  /** The type of the item. */
  type?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2Item. */
export interface ProjectV2ItemConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2ItemEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2ItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be inside Project Items. */
export interface ProjectV2ItemContentGenqlSelection {
  on_DraftIssue?: DraftIssueGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2ItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a date field in a Project item. */
export interface ProjectV2ItemFieldDateValueGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** Date value for the field */
  date?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of an iteration field in a Project item. */
export interface ProjectV2ItemFieldIterationValueGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The duration of the iteration in days. */
  duration?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** The ID of the iteration. */
  iterationId?: boolean | number;
  /** The start date of the iteration. */
  startDate?: boolean | number;
  /** The title of the iteration. */
  title?: boolean | number;
  /** The title of the iteration, with HTML. */
  titleHTML?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of the labels field in a Project item. */
export interface ProjectV2ItemFieldLabelValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** Labels value of a field */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a milestone field in a Project item. */
export interface ProjectV2ItemFieldMilestoneValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** Milestone value of a field */
  milestone?: MilestoneGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a number field in a Project item. */
export interface ProjectV2ItemFieldNumberValueGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** Number as a float(8) */
  number?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a pull request field in a Project item. */
export interface ProjectV2ItemFieldPullRequestValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** The pull requests for this field */
  pullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for pull requests. */
      orderBy?: PullRequestOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a repository field in a Project item. */
export interface ProjectV2ItemFieldRepositoryValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** The repository for this field. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a reviewers field in a Project item. */
export interface ProjectV2ItemFieldReviewerValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** The reviewers for this field. */
  reviewers?: RequestedReviewerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a single select field in a Project item. */
export interface ProjectV2ItemFieldSingleSelectValueGenqlSelection {
  /** The color applied to the selected single-select option. */
  color?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** A plain-text description of the selected single-select option, such as what the option means. */
  description?: boolean | number;
  /** The description of the selected single-select option, including HTML tags. */
  descriptionHTML?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** The name of the selected single select option. */
  name?: boolean | number;
  /** The html name of the selected single select option. */
  nameHTML?: boolean | number;
  /** The id of the selected single select option. */
  optionId?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a text field in a Project item. */
export interface ProjectV2ItemFieldTextValueGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** Text value of a field */
  text?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The value of a user field in a Project item. */
export interface ProjectV2ItemFieldUserValueGenqlSelection {
  /** The field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  /** The users for this field */
  users?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Project field values */
export interface ProjectV2ItemFieldValueGenqlSelection {
  on_ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValueGenqlSelection;
  on_ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValueGenqlSelection;
  on_ProjectV2ItemFieldLabelValue?: ProjectV2ItemFieldLabelValueGenqlSelection;
  on_ProjectV2ItemFieldMilestoneValue?: ProjectV2ItemFieldMilestoneValueGenqlSelection;
  on_ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValueGenqlSelection;
  on_ProjectV2ItemFieldPullRequestValue?: ProjectV2ItemFieldPullRequestValueGenqlSelection;
  on_ProjectV2ItemFieldRepositoryValue?: ProjectV2ItemFieldRepositoryValueGenqlSelection;
  on_ProjectV2ItemFieldReviewerValue?: ProjectV2ItemFieldReviewerValueGenqlSelection;
  on_ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValueGenqlSelection;
  on_ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValueGenqlSelection;
  on_ProjectV2ItemFieldUserValue?: ProjectV2ItemFieldUserValueGenqlSelection;
  on_ProjectV2ItemFieldValueCommon?: ProjectV2ItemFieldValueCommonGenqlSelection;
  on_Node?: NodeGenqlSelection;
  __typename?: boolean | number;
}

/** Common fields across different project field value types */
export interface ProjectV2ItemFieldValueCommonGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created the item. */
  creator?: ActorGenqlSelection;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The project field that contains this value. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  id?: boolean | number;
  /** The project item that contains this value. */
  item?: ProjectV2ItemGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  on_ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValueGenqlSelection;
  on_ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValueGenqlSelection;
  on_ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValueGenqlSelection;
  on_ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValueGenqlSelection;
  on_ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2ItemFieldValue. */
export interface ProjectV2ItemFieldValueConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2ItemFieldValueEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2ItemFieldValueGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2ItemFieldValueEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2ItemFieldValueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for project v2 item field value connections */
export interface ProjectV2ItemFieldValueOrder {
  /** The field to order the project v2 item field values by. */
  field: ProjectV2ItemFieldValueOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Ordering options for project v2 item connections */
export interface ProjectV2ItemOrder {
  /** The field to order the project v2 items by. */
  field: ProjectV2ItemOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** An iteration field inside a project. */
export interface ProjectV2IterationFieldGenqlSelection {
  /** Iteration configuration settings */
  configuration?: ProjectV2IterationFieldConfigurationGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The field's type. */
  dataType?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project field's name. */
  name?: boolean | number;
  /** The project that contains this field. */
  project?: ProjectV2GenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Iteration field configuration for a project. */
export interface ProjectV2IterationFieldConfigurationGenqlSelection {
  /** The iteration's completed iterations */
  completedIterations?: ProjectV2IterationFieldIterationGenqlSelection;
  /** The iteration's duration in days */
  duration?: boolean | number;
  /** The iteration's iterations */
  iterations?: ProjectV2IterationFieldIterationGenqlSelection;
  /** The iteration's start day of the week */
  startDay?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Iteration field iteration settings for a project. */
export interface ProjectV2IterationFieldIterationGenqlSelection {
  /** The iteration's duration in days */
  duration?: boolean | number;
  /** The iteration's ID. */
  id?: boolean | number;
  /** The iteration's start date */
  startDate?: boolean | number;
  /** The iteration's title. */
  title?: boolean | number;
  /** The iteration's html title. */
  titleHTML?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectV2Order {
  /** The field in which to order projects by. */
  field: ProjectV2OrderField;
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
}

/** Represents an owner of a project (beta). */
export interface ProjectV2OwnerGenqlSelection {
  id?: boolean | number;
  /** Find a project by number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** A project to search for under the the owner. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  on_Issue?: IssueGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Recent projects for the owner. */
export interface ProjectV2RecentGenqlSelection {
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  on_Organization?: OrganizationGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A single select field inside a project. */
export interface ProjectV2SingleSelectFieldGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The field's type. */
  dataType?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The project field's name. */
  name?: boolean | number;
  /** Options for the single select field */
  options?: ProjectV2SingleSelectFieldOptionGenqlSelection & {
    __args?: {
      /** Filter returned options to only those matching these names, case insensitive. */
      names?: Scalars['String'][] | null;
    };
  };
  /** The project that contains this field. */
  project?: ProjectV2GenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Single select field option for a configuration for a project. */
export interface ProjectV2SingleSelectFieldOptionGenqlSelection {
  /** The option's display color. */
  color?: boolean | number;
  /** The option's plain-text description. */
  description?: boolean | number;
  /** The option's description, possibly containing HTML. */
  descriptionHTML?: boolean | number;
  /** The option's ID. */
  id?: boolean | number;
  /** The option's name. */
  name?: boolean | number;
  /** The option's html name. */
  nameHTML?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a single select field option */
export interface ProjectV2SingleSelectFieldOptionInput {
  /** The name of the option */
  name: Scalars['String'];
  /** The display color of the option */
  color: ProjectV2SingleSelectFieldOptionColor;
  /** The description text of the option */
  description: Scalars['String'];
}

/** Represents a sort by field and direction. */
export interface ProjectV2SortByGenqlSelection {
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction?: boolean | number;
  /** The field by which items are sorted. */
  field?: ProjectV2FieldGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2SortBy. */
export interface ProjectV2SortByConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2SortByEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2SortByGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2SortByEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2SortByGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a sort by field and direction. */
export interface ProjectV2SortByFieldGenqlSelection {
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction?: boolean | number;
  /** The field by which items are sorted. */
  field?: ProjectV2FieldConfigurationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2SortByField. */
export interface ProjectV2SortByFieldConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2SortByFieldEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2SortByFieldGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2SortByFieldEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2SortByFieldGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A view within a ProjectV2. */
export interface ProjectV2ViewGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The view's visible fields. */
  fields?: ProjectV2FieldConfigurationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  /** The project view's filter. */
  filter?: boolean | number;
  /**
   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's group-by field.
   */
  groupBy?: ProjectV2FieldConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  /** The view's group-by field. */
  groupByFields?: ProjectV2FieldConfigurationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  id?: boolean | number;
  /** The project view's layout. */
  layout?: boolean | number;
  /** The project view's name. */
  name?: boolean | number;
  /** The project view's number. */
  number?: boolean | number;
  /** The project that contains this view. */
  project?: ProjectV2GenqlSelection;
  /**
   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's sort-by config.
   */
  sortBy?: ProjectV2SortByConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The view's sort-by config. */
  sortByFields?: ProjectV2SortByFieldConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /**
   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   * The view's vertical-group-by field.
   */
  verticalGroupBy?: ProjectV2FieldConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  /** The view's vertical-group-by field. */
  verticalGroupByFields?: ProjectV2FieldConfigurationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  /**
   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.
   * The view's visible fields.
   */
  visibleFields?: ProjectV2FieldConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the project v2 fields returned from the connection. */
      orderBy?: ProjectV2FieldOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2View. */
export interface ProjectV2ViewConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2ViewEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2ViewGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2ViewEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2ViewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for project v2 view connections */
export interface ProjectV2ViewOrder {
  /** The field to order the project v2 views by. */
  field: ProjectV2ViewOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A workflow inside a project. */
export interface ProjectV2WorkflowGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The workflows' enabled state. */
  enabled?: boolean | number;
  id?: boolean | number;
  /** The workflows' name. */
  name?: boolean | number;
  /** The workflows' number. */
  number?: boolean | number;
  /** The project that contains this workflow. */
  project?: ProjectV2GenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ProjectV2Workflow. */
export interface ProjectV2WorkflowConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ProjectV2WorkflowEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ProjectV2WorkflowGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ProjectV2WorkflowEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ProjectV2WorkflowGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for project v2 workflows connections */
export interface ProjectV2WorkflowOrder {
  /** The field to order the project v2 workflows by. */
  field: ProjectV2WorkflowsOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A user's public key. */
export interface PublicKeyGenqlSelection {
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt?: boolean | number;
  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt?: boolean | number;
  /** The fingerprint for this PublicKey. */
  fingerprint?: boolean | number;
  id?: boolean | number;
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly?: boolean | number;
  /** The public key string. */
  key?: boolean | number;
  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PublicKey. */
export interface PublicKeyConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PublicKeyEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PublicKeyGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PublicKeyEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PublicKeyGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of PublishSponsorsTier */
export interface PublishSponsorsTierInput {
  /** The ID of the draft tier to publish. */
  tierId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of PublishSponsorsTier */
export interface PublishSponsorsTierPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The tier that was published. */
  sponsorsTier?: SponsorsTierGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository pull request. */
export interface PullRequestGenqlSelection {
  /** Reason that the conversation was locked. */
  activeLockReason?: boolean | number;
  /** The number of additions in this pull request. */
  additions?: boolean | number;
  /** A list of Users assigned to this object. */
  assignees?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** Returns the auto-merge request object if one exists for this pull request. */
  autoMergeRequest?: AutoMergeRequestGenqlSelection;
  /** Identifies the base Ref associated with the pull request. */
  baseRef?: RefGenqlSelection;
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  baseRefName?: boolean | number;
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  baseRefOid?: boolean | number;
  /** The repository associated with this pull request's base Ref. */
  baseRepository?: RepositoryGenqlSelection;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /** The number of changed files in this pull request. */
  changedFiles?: boolean | number;
  /** The HTTP path for the checks of this pull request. */
  checksResourcePath?: boolean | number;
  /** The HTTP URL for the checks of this pull request. */
  checksUrl?: boolean | number;
  /** `true` if the pull request is closed */
  closed?: boolean | number;
  /** Identifies the date and time when the object was closed. */
  closedAt?: boolean | number;
  /** List of issues that were may be closed by this pull request */
  closingIssuesReferences?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Return only manually linked Issues */
      userLinkedOnly?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for issues returned from the connection */
      orderBy?: IssueOrder | null;
    };
  };
  /** A list of comments associated with the pull request. */
  comments?: IssueCommentConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issue comments returned from the connection. */
      orderBy?: IssueCommentOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  commits?: PullRequestCommitConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The number of deletions in this pull request. */
  deletions?: boolean | number;
  /** The actor who edited this pull request's body. */
  editor?: ActorGenqlSelection;
  /** Lists the files changed within this pull request. */
  files?: PullRequestChangedFileConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the head Ref associated with the pull request. */
  headRef?: RefGenqlSelection;
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  headRefName?: boolean | number;
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  headRefOid?: boolean | number;
  /** The repository associated with this pull request's head Ref. */
  headRepository?: RepositoryGenqlSelection;
  /** The owner of the repository associated with this pull request's head Ref. */
  headRepositoryOwner?: RepositoryOwnerGenqlSelection;
  /** The hovercard information for this issue */
  hovercard?: HovercardGenqlSelection & {
    __args?: {
      /** Whether or not to include notification contexts */
      includeNotificationContexts?: Scalars['Boolean'] | null;
    };
  };
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** The head and base repositories are different. */
  isCrossRepository?: boolean | number;
  /** Identifies if the pull request is a draft. */
  isDraft?: boolean | number;
  /** Is this pull request read by the viewer */
  isReadByViewer?: boolean | number;
  /** A list of labels associated with the object. */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** A list of latest reviews per user associated with the pull request. */
  latestOpinionatedReviews?: PullRequestReviewConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Only return reviews from user who have write access to the repository */
      writersOnly?: Scalars['Boolean'] | null;
    };
  };
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  latestReviews?: PullRequestReviewConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** `true` if the pull request is locked */
  locked?: boolean | number;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: boolean | number;
  /** The commit that was created when this pull request was merged. */
  mergeCommit?: CommitGenqlSelection;
  /** The merge queue entry of the pull request in the base branch's merge queue */
  mergeQueueEntry?: MergeQueueEntryGenqlSelection;
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  mergeable?: boolean | number;
  /** Whether or not the pull request was merged. */
  merged?: boolean | number;
  /** The date and time that the pull request was merged. */
  mergedAt?: boolean | number;
  /** The actor who merged the pull request. */
  mergedBy?: ActorGenqlSelection;
  /** Identifies the milestone associated with the pull request. */
  milestone?: MilestoneGenqlSelection;
  /** Identifies the pull request number. */
  number?: boolean | number;
  /** A list of Users that are participating in the Pull Request conversation. */
  participants?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The permalink to the pull request. */
  permalink?: boolean | number;
  /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */
  potentialMergeCommit?: CommitGenqlSelection;
  /** List of project cards associated with this pull request. */
  projectCards?: ProjectCardConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of archived states to filter the cards by */
      archivedStates?: (ProjectCardArchivedState | null)[] | null;
    };
  };
  /** List of project items associated with this pull request. */
  projectItems?: ProjectV2ItemConnectionGenqlSelection & {
    __args?: {
      /** Include archived items. */
      includeArchived?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Find a project by number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** A project to search for under the the owner. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this pull request. */
  resourcePath?: boolean | number;
  /** The HTTP path for reverting this pull request. */
  revertResourcePath?: boolean | number;
  /** The HTTP URL for reverting this pull request. */
  revertUrl?: boolean | number;
  /** The current status of this pull request with respect to code review. */
  reviewDecision?: boolean | number;
  /** A list of review requests associated with the pull request. */
  reviewRequests?: ReviewRequestConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The list of all review threads for this pull request. */
  reviewThreads?: PullRequestReviewThreadConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of reviews associated with the pull request. */
  reviews?: PullRequestReviewConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of states to filter the reviews. */
      states?: PullRequestReviewState[] | null;
      /** Filter by author of the review. */
      author?: Scalars['String'] | null;
    };
  };
  /** Identifies the state of the pull request. */
  state?: boolean | number;
  /** A list of reviewer suggestions based on commit history and past review comments. */
  suggestedReviewers?: SuggestedReviewerGenqlSelection;
  /**
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timeline?: PullRequestTimelineConnectionGenqlSelection & {
    __args?: {
      /** Allows filtering timeline events by a `since` timestamp. */
      since?: Scalars['DateTime'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timelineItems?: PullRequestTimelineItemsConnectionGenqlSelection & {
    __args?: {
      /** Filter timeline items by a `since` timestamp. */
      since?: Scalars['DateTime'] | null;
      /** Skips the first _n_ elements in the list. */
      skip?: Scalars['Int'] | null;
      /** Filter timeline items by type. */
      itemTypes?: PullRequestTimelineItemsItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the pull request title. */
  title?: boolean | number;
  /** Identifies the pull request title rendered to HTML. */
  titleHTML?: boolean | number;
  /** Returns a count of how many comments this pull request has received. */
  totalCommentsCount?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this pull request. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether or not the viewer can apply suggestion. */
  viewerCanApplySuggestion?: boolean | number;
  /** Indicates if the object can be closed by the viewer. */
  viewerCanClose?: boolean | number;
  /** Check if the viewer can restore the deleted head ref. */
  viewerCanDeleteHeadRef?: boolean | number;
  /** Whether or not the viewer can disable auto-merge */
  viewerCanDisableAutoMerge?: boolean | number;
  /** Can the viewer edit files within this pull request. */
  viewerCanEditFiles?: boolean | number;
  /** Whether or not the viewer can enable auto-merge */
  viewerCanEnableAutoMerge?: boolean | number;
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  viewerCanMergeAsAdmin?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Indicates if the object can be reopened by the viewer. */
  viewerCanReopen?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /**
   * Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
   * If the head ref is up to date or unable to be updated by this user, this will return false.
   *
   */
  viewerCanUpdateBranch?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  /** The latest review given from the viewer. */
  viewerLatestReview?: PullRequestReviewGenqlSelection;
  /** The person who has requested the viewer for review on this pull request. */
  viewerLatestReviewRequest?: ReviewRequestGenqlSelection;
  /** The merge body text for the viewer and method. */
  viewerMergeBodyText?:
    | {
        __args: {
          /** The merge method for the message. */
          mergeType?: PullRequestMergeMethod | null;
        };
      }
    | boolean
    | number;
  /** The merge headline text for the viewer and method. */
  viewerMergeHeadlineText?:
    | {
        __args: {
          /** The merge method for the message. */
          mergeType?: PullRequestMergeMethod | null;
        };
      }
    | boolean
    | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A file changed in a pull request. */
export interface PullRequestChangedFileGenqlSelection {
  /** The number of additions to the file. */
  additions?: boolean | number;
  /** How the file was changed in this PullRequest */
  changeType?: boolean | number;
  /** The number of deletions to the file. */
  deletions?: boolean | number;
  /** The path of the file. */
  path?: boolean | number;
  /** The state of the file for the viewer. */
  viewerViewedState?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestChangedFileEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestChangedFileGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestChangedFileEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestChangedFileGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git commit part of a pull request. */
export interface PullRequestCommitGenqlSelection {
  /** The Git commit object */
  commit?: CommitGenqlSelection;
  id?: boolean | number;
  /** The pull request this commit belongs to */
  pullRequest?: PullRequestGenqlSelection;
  /** The HTTP path for this pull request commit */
  resourcePath?: boolean | number;
  /** The HTTP URL for this pull request commit */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThreadGenqlSelection {
  /** The comments that exist in this thread. */
  comments?: CommitCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The commit the comments were made on. */
  commit?: CommitGenqlSelection;
  id?: boolean | number;
  /** The file the comments were made on. */
  path?: boolean | number;
  /** The position in the diff for the commit that the comment was made on. */
  position?: boolean | number;
  /** The pull request this commit comment thread belongs to */
  pullRequest?: PullRequestGenqlSelection;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestCommitEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestCommitGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestCommitEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestCommitGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequest. */
export interface PullRequestConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepositoryGenqlSelection {
  /** The pull request contributions. */
  contributions?: CreatedPullRequestContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** The repository in which the pull requests were opened. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of issues can be ordered upon return. */
export interface PullRequestOrder {
  /** The field in which to order pull requests by. */
  field: PullRequestOrderField;
  /** The direction in which to order pull requests by the specified field. */
  direction: OrderDirection;
}

/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParametersGenqlSelection {
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush?: boolean | number;
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview?: boolean | number;
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval?: boolean | number;
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount?: boolean | number;
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParametersInput {
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: Scalars['Boolean'];
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: Scalars['Boolean'];
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: Scalars['Boolean'];
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Scalars['Int'];
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: Scalars['Boolean'];
}

/** A review object for a given pull request. */
export interface PullRequestReviewGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** Indicates whether the author of this review has push access to the repository. */
  authorCanPushToRepository?: boolean | number;
  /** Identifies the pull request review body. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body of this review rendered as plain text. */
  bodyText?: boolean | number;
  /** A list of review comments for the current pull request review. */
  comments?: PullRequestReviewCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the commit associated with this pull request review. */
  commit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** A list of teams that this review was made on behalf of. */
  onBehalfOf?: TeamConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** Identifies the pull request associated with this pull request review. */
  pullRequest?: PullRequestGenqlSelection;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path permalink for this PullRequestReview. */
  resourcePath?: boolean | number;
  /** Identifies the current state of the pull request review. */
  state?: boolean | number;
  /** Identifies when the Pull Request Review was submitted */
  submittedAt?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL permalink for this PullRequestReview. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /** Author's association with the subject of the comment. */
  authorAssociation?: boolean | number;
  /** The comment body of this review comment. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The comment body of this review comment rendered as plain text. */
  bodyText?: boolean | number;
  /** Identifies the commit associated with the comment. */
  commit?: CommitGenqlSelection;
  /** Identifies when the comment was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The diff hunk to which the comment applies. */
  diffHunk?: boolean | number;
  /** Identifies when the comment was created in a draft state. */
  draftedAt?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** Returns whether or not a comment has been minimized. */
  isMinimized?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /** The end line number on the file to which the comment applies */
  line?: boolean | number;
  /** Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
  minimizedReason?: boolean | number;
  /** Identifies the original commit associated with the comment. */
  originalCommit?: CommitGenqlSelection;
  /** The end line number on the file to which the comment applied when it was first created */
  originalLine?: boolean | number;
  /**
   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.
   * The original line index in the diff to which the comment applies.
   */
  originalPosition?: boolean | number;
  /** The start line number on the file to which the comment applied when it was first created */
  originalStartLine?: boolean | number;
  /** Identifies when the comment body is outdated */
  outdated?: boolean | number;
  /** The path to which the comment applies. */
  path?: boolean | number;
  /**
   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.
   * The line index in the diff to which the comment applies.
   */
  position?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** The pull request associated with this review comment. */
  pullRequest?: PullRequestGenqlSelection;
  /** The pull request review associated with this review comment. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** The comment this is a reply to. */
  replyTo?: PullRequestReviewCommentGenqlSelection;
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path permalink for this review comment. */
  resourcePath?: boolean | number;
  /** The start line number on the file to which the comment applies */
  startLine?: boolean | number;
  /** Identifies the state of the comment. */
  state?: boolean | number;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: boolean | number;
  /** Identifies when the comment was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL permalink for this review comment. */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestReviewCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestReviewCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestReviewCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestReviewCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestReviewEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestReviewGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepositoryGenqlSelection {
  /** The pull request review contributions. */
  contributions?: CreatedPullRequestReviewContributionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for contributions returned from the connection. */
      orderBy?: ContributionOrder | null;
    };
  };
  /** The repository in which the pull request reviews were made. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestReviewEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThreadGenqlSelection {
  /** A list of pull request comments associated with the thread. */
  comments?: PullRequestReviewCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Skips the first _n_ elements in the list. */
      skip?: Scalars['Int'] | null;
    };
  };
  /** The side of the diff on which this thread was placed. */
  diffSide?: boolean | number;
  id?: boolean | number;
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed?: boolean | number;
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated?: boolean | number;
  /** Whether this thread has been resolved */
  isResolved?: boolean | number;
  /** The line in the file to which this thread refers */
  line?: boolean | number;
  /** The original line in the file to which this thread refers. */
  originalLine?: boolean | number;
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine?: boolean | number;
  /** Identifies the file path of this thread. */
  path?: boolean | number;
  /** Identifies the pull request associated with this thread. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the repository associated with this thread. */
  repository?: RepositoryGenqlSelection;
  /** The user who resolved this thread */
  resolvedBy?: UserGenqlSelection;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: boolean | number;
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine?: boolean | number;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: boolean | number;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply?: boolean | number;
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve?: boolean | number;
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestReviewThreadEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestReviewThreadGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestReviewThreadEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestReviewThreadGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarkerGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The last commit the viewer has seen. */
  lastSeenCommit?: CommitGenqlSelection;
  /** The pull request to which the marker belongs. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository pull request template. */
export interface PullRequestTemplateGenqlSelection {
  /** The body of the template */
  body?: boolean | number;
  /** The filename of the template */
  filename?: boolean | number;
  /** The repository the template belongs to */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A threaded list of comments for a given pull request. */
export interface PullRequestThreadGenqlSelection {
  /** A list of pull request comments associated with the thread. */
  comments?: PullRequestReviewCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Skips the first _n_ elements in the list. */
      skip?: Scalars['Int'] | null;
    };
  };
  /** The side of the diff on which this thread was placed. */
  diffSide?: boolean | number;
  id?: boolean | number;
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed?: boolean | number;
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated?: boolean | number;
  /** Whether this thread has been resolved */
  isResolved?: boolean | number;
  /** The line in the file to which this thread refers */
  line?: boolean | number;
  /** Identifies the file path of this thread. */
  path?: boolean | number;
  /** Identifies the pull request associated with this thread. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the repository associated with this thread. */
  repository?: RepositoryGenqlSelection;
  /** The user who resolved this thread */
  resolvedBy?: UserGenqlSelection;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: boolean | number;
  /** The line of the first file diff in the thread. */
  startLine?: boolean | number;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: boolean | number;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply?: boolean | number;
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve?: boolean | number;
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestTimelineItemEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PullRequestTimelineItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An item in a pull request timeline */
export interface PullRequestTimelineItemGenqlSelection {
  on_AssignedEvent?: AssignedEventGenqlSelection;
  on_BaseRefDeletedEvent?: BaseRefDeletedEventGenqlSelection;
  on_BaseRefForcePushedEvent?: BaseRefForcePushedEventGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_Commit?: CommitGenqlSelection;
  on_CommitCommentThread?: CommitCommentThreadGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_DemilestonedEvent?: DemilestonedEventGenqlSelection;
  on_DeployedEvent?: DeployedEventGenqlSelection;
  on_DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEventGenqlSelection;
  on_HeadRefDeletedEvent?: HeadRefDeletedEventGenqlSelection;
  on_HeadRefForcePushedEvent?: HeadRefForcePushedEventGenqlSelection;
  on_HeadRefRestoredEvent?: HeadRefRestoredEventGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_LabeledEvent?: LabeledEventGenqlSelection;
  on_LockedEvent?: LockedEventGenqlSelection;
  on_MergedEvent?: MergedEventGenqlSelection;
  on_MilestonedEvent?: MilestonedEventGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_PullRequestReviewThread?: PullRequestReviewThreadGenqlSelection;
  on_ReferencedEvent?: ReferencedEventGenqlSelection;
  on_RenamedTitleEvent?: RenamedTitleEventGenqlSelection;
  on_ReopenedEvent?: ReopenedEventGenqlSelection;
  on_ReviewDismissedEvent?: ReviewDismissedEventGenqlSelection;
  on_ReviewRequestRemovedEvent?: ReviewRequestRemovedEventGenqlSelection;
  on_ReviewRequestedEvent?: ReviewRequestedEventGenqlSelection;
  on_SubscribedEvent?: SubscribedEventGenqlSelection;
  on_UnassignedEvent?: UnassignedEventGenqlSelection;
  on_UnlabeledEvent?: UnlabeledEventGenqlSelection;
  on_UnlockedEvent?: UnlockedEventGenqlSelection;
  on_UnsubscribedEvent?: UnsubscribedEventGenqlSelection;
  on_UserBlockedEvent?: UserBlockedEventGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_GitObject?: GitObjectGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Minimizable?: MinimizableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  __typename?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestTimelineItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestTimelineItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An item in a pull request timeline */
export interface PullRequestTimelineItemsGenqlSelection {
  on_AddedToMergeQueueEvent?: AddedToMergeQueueEventGenqlSelection;
  on_AddedToProjectEvent?: AddedToProjectEventGenqlSelection;
  on_AssignedEvent?: AssignedEventGenqlSelection;
  on_AutoMergeDisabledEvent?: AutoMergeDisabledEventGenqlSelection;
  on_AutoMergeEnabledEvent?: AutoMergeEnabledEventGenqlSelection;
  on_AutoRebaseEnabledEvent?: AutoRebaseEnabledEventGenqlSelection;
  on_AutoSquashEnabledEvent?: AutoSquashEnabledEventGenqlSelection;
  on_AutomaticBaseChangeFailedEvent?: AutomaticBaseChangeFailedEventGenqlSelection;
  on_AutomaticBaseChangeSucceededEvent?: AutomaticBaseChangeSucceededEventGenqlSelection;
  on_BaseRefChangedEvent?: BaseRefChangedEventGenqlSelection;
  on_BaseRefDeletedEvent?: BaseRefDeletedEventGenqlSelection;
  on_BaseRefForcePushedEvent?: BaseRefForcePushedEventGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_CommentDeletedEvent?: CommentDeletedEventGenqlSelection;
  on_ConnectedEvent?: ConnectedEventGenqlSelection;
  on_ConvertToDraftEvent?: ConvertToDraftEventGenqlSelection;
  on_ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEventGenqlSelection;
  on_ConvertedToDiscussionEvent?: ConvertedToDiscussionEventGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_DemilestonedEvent?: DemilestonedEventGenqlSelection;
  on_DeployedEvent?: DeployedEventGenqlSelection;
  on_DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEventGenqlSelection;
  on_DisconnectedEvent?: DisconnectedEventGenqlSelection;
  on_HeadRefDeletedEvent?: HeadRefDeletedEventGenqlSelection;
  on_HeadRefForcePushedEvent?: HeadRefForcePushedEventGenqlSelection;
  on_HeadRefRestoredEvent?: HeadRefRestoredEventGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_LabeledEvent?: LabeledEventGenqlSelection;
  on_LockedEvent?: LockedEventGenqlSelection;
  on_MarkedAsDuplicateEvent?: MarkedAsDuplicateEventGenqlSelection;
  on_MentionedEvent?: MentionedEventGenqlSelection;
  on_MergedEvent?: MergedEventGenqlSelection;
  on_MilestonedEvent?: MilestonedEventGenqlSelection;
  on_MovedColumnsInProjectEvent?: MovedColumnsInProjectEventGenqlSelection;
  on_PinnedEvent?: PinnedEventGenqlSelection;
  on_PullRequestCommit?: PullRequestCommitGenqlSelection;
  on_PullRequestCommitCommentThread?: PullRequestCommitCommentThreadGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewThread?: PullRequestReviewThreadGenqlSelection;
  on_PullRequestRevisionMarker?: PullRequestRevisionMarkerGenqlSelection;
  on_ReadyForReviewEvent?: ReadyForReviewEventGenqlSelection;
  on_ReferencedEvent?: ReferencedEventGenqlSelection;
  on_RemovedFromMergeQueueEvent?: RemovedFromMergeQueueEventGenqlSelection;
  on_RemovedFromProjectEvent?: RemovedFromProjectEventGenqlSelection;
  on_RenamedTitleEvent?: RenamedTitleEventGenqlSelection;
  on_ReopenedEvent?: ReopenedEventGenqlSelection;
  on_ReviewDismissedEvent?: ReviewDismissedEventGenqlSelection;
  on_ReviewRequestRemovedEvent?: ReviewRequestRemovedEventGenqlSelection;
  on_ReviewRequestedEvent?: ReviewRequestedEventGenqlSelection;
  on_SubscribedEvent?: SubscribedEventGenqlSelection;
  on_TransferredEvent?: TransferredEventGenqlSelection;
  on_UnassignedEvent?: UnassignedEventGenqlSelection;
  on_UnlabeledEvent?: UnlabeledEventGenqlSelection;
  on_UnlockedEvent?: UnlockedEventGenqlSelection;
  on_UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEventGenqlSelection;
  on_UnpinnedEvent?: UnpinnedEventGenqlSelection;
  on_UnsubscribedEvent?: UnsubscribedEventGenqlSelection;
  on_UserBlockedEvent?: UserBlockedEventGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Minimizable?: MinimizableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PullRequestTimelineItemsEdgeGenqlSelection;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount?: boolean | number;
  /** A list of nodes. */
  nodes?: PullRequestTimelineItemsGenqlSelection;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount?: boolean | number;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PullRequestTimelineItemsEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PullRequestTimelineItemsGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Git push. */
export interface PushGenqlSelection {
  id?: boolean | number;
  /** The SHA after the push */
  nextSha?: boolean | number;
  /** The permalink for this push. */
  permalink?: boolean | number;
  /** The SHA before the push */
  previousSha?: boolean | number;
  /** The actor who pushed */
  pusher?: ActorGenqlSelection;
  /** The repository that was pushed to */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A team, user, or app who has the ability to push to a protected branch. */
export interface PushAllowanceGenqlSelection {
  /** The actor that can push. */
  actor?: PushAllowanceActorGenqlSelection;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be an actor. */
export interface PushAllowanceActorGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for PushAllowance. */
export interface PushAllowanceConnectionGenqlSelection {
  /** A list of edges. */
  edges?: PushAllowanceEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: PushAllowanceGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface PushAllowanceEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: PushAllowanceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The query root of GitHub's GraphQL interface. */
export interface QueryGenqlSelection {
  /** Look up a code of conduct by its key */
  codeOfConduct?: CodeOfConductGenqlSelection & {
    __args: {
      /** The code of conduct's key */
      key: Scalars['String'];
    };
  };
  /** Look up a code of conduct by its key */
  codesOfConduct?: CodeOfConductGenqlSelection;
  /** Look up an enterprise by URL slug. */
  enterprise?: EnterpriseGenqlSelection & {
    __args: {
      /** The enterprise URL slug. */
      slug: Scalars['String'];
      /** The enterprise invitation token. */
      invitationToken?: Scalars['String'] | null;
    };
  };
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation?: EnterpriseAdministratorInvitationGenqlSelection & {
    __args: {
      /** The login of the user invited to join the business. */
      userLogin: Scalars['String'];
      /** The slug of the enterprise the user was invited to join. */
      enterpriseSlug: Scalars['String'];
      /** The role for the business member invitation. */
      role: EnterpriseAdministratorRole;
    };
  };
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken?: EnterpriseAdministratorInvitationGenqlSelection & {
    __args: {
      /** The invitation token sent with the invitation email. */
      invitationToken: Scalars['String'];
    };
  };
  /** Look up an open source license by its key */
  license?: LicenseGenqlSelection & {
    __args: {
      /** The license's downcased SPDX ID */
      key: Scalars['String'];
    };
  };
  /** Return a list of known open source licenses */
  licenses?: LicenseGenqlSelection;
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories?: MarketplaceCategoryGenqlSelection & {
    __args?: {
      /** Return only the specified categories. */
      includeCategories?: Scalars['String'][] | null;
      /** Exclude categories with no listings. */
      excludeEmpty?: Scalars['Boolean'] | null;
      /** Returns top level categories only, excluding any subcategories. */
      excludeSubcategories?: Scalars['Boolean'] | null;
    };
  };
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory?: MarketplaceCategoryGenqlSelection & {
    __args: {
      /** The URL slug of the category. */
      slug: Scalars['String'];
      /** Also check topic aliases for the category slug */
      useTopicAliases?: Scalars['Boolean'] | null;
    };
  };
  /** Look up a single Marketplace listing */
  marketplaceListing?: MarketplaceListingGenqlSelection & {
    __args: {
      /** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
      slug: Scalars['String'];
    };
  };
  /** Look up Marketplace listings */
  marketplaceListings?: MarketplaceListingConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Select only listings with the given category. */
      categorySlug?: Scalars['String'] | null;
      /** Also check topic aliases for the category slug */
      useTopicAliases?: Scalars['Boolean'] | null;
      /**
       * Select listings to which user has admin access. If omitted, listings visible to the
       * viewer are returned.
       *
       */
      viewerCanAdmin?: Scalars['Boolean'] | null;
      /** Select listings that can be administered by the specified user. */
      adminId?: Scalars['ID'] | null;
      /** Select listings for products owned by the specified organization. */
      organizationId?: Scalars['ID'] | null;
      /**
       * Select listings visible to the viewer even if they are not approved. If omitted or
       * false, only approved listings will be returned.
       *
       */
      allStates?: Scalars['Boolean'] | null;
      /** Select the listings with these slugs, if they are visible to the viewer. */
      slugs?: (Scalars['String'] | null)[] | null;
      /** Select only listings where the primary category matches the given category slug. */
      primaryCategoryOnly?: Scalars['Boolean'] | null;
      /** Select only listings that offer a free trial. */
      withFreeTrialsOnly?: Scalars['Boolean'] | null;
    };
  };
  /** Return information about the GitHub instance */
  meta?: GitHubMetadataGenqlSelection;
  /** Fetches an object given its ID. */
  node?: NodeGenqlSelection & {
    __args: {
      /** ID of the object. */
      id: Scalars['ID'];
    };
  };
  /** Lookup nodes by a list of IDs. */
  nodes?: NodeGenqlSelection & {
    __args: {
      /** The list of node IDs. */
      ids: Scalars['ID'][];
    };
  };
  /** Lookup a organization by login. */
  organization?: OrganizationGenqlSelection & {
    __args: {
      /** The organization's login. */
      login: Scalars['String'];
    };
  };
  /** The client's rate limit information. */
  rateLimit?: RateLimitGenqlSelection & {
    __args?: {
      /** If true, calculate the cost for the query without evaluating it */
      dryRun?: Scalars['Boolean'] | null;
    };
  };
  /** Workaround for re-exposing the root query object. (Refer to https://github.com/facebook/relay/issues/112 for more information.) */
  relay?: QueryGenqlSelection;
  /** Lookup a given repository by the owner and repository name. */
  repository?: RepositoryGenqlSelection & {
    __args: {
      /** The login field of a user or organization */
      owner: Scalars['String'];
      /** The name of the repository */
      name: Scalars['String'];
      /** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
      followRenames?: Scalars['Boolean'] | null;
    };
  };
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner?: RepositoryOwnerGenqlSelection & {
    __args: {
      /** The username to lookup the owner by. */
      login: Scalars['String'];
    };
  };
  /** Lookup resource by a URL. */
  resource?: UniformResourceLocatableGenqlSelection & {
    __args: {
      /** The URL. */
      url: Scalars['URI'];
    };
  };
  /** Perform a search across resources, returning a maximum of 1,000 results. */
  search?: SearchResultItemConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The search string to look for. */
      query: Scalars['String'];
      /** The types of search items to search within. */
      type: SearchType;
    };
  };
  /** GitHub Security Advisories */
  securityAdvisories?: SecurityAdvisoryConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for the returned topics. */
      orderBy?: SecurityAdvisoryOrder | null;
      /** Filter advisories by identifier, e.g. GHSA or CVE. */
      identifier?: SecurityAdvisoryIdentifierFilter | null;
      /** Filter advisories to those published since a time in the past. */
      publishedSince?: Scalars['DateTime'] | null;
      /** Filter advisories to those updated since a time in the past. */
      updatedSince?: Scalars['DateTime'] | null;
      /** A list of classifications to filter advisories by. */
      classifications?: SecurityAdvisoryClassification[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory?: SecurityAdvisoryGenqlSelection & {
    __args: {
      /** GitHub Security Advisory ID. */
      ghsaId: Scalars['String'];
    };
  };
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities?: SecurityVulnerabilityConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for the returned topics. */
      orderBy?: SecurityVulnerabilityOrder | null;
      /** An ecosystem to filter vulnerabilities by. */
      ecosystem?: SecurityAdvisoryEcosystem | null;
      /** A package name to filter vulnerabilities by. */
      package?: Scalars['String'] | null;
      /** A list of severities to filter vulnerabilities by. */
      severities?: SecurityAdvisorySeverity[] | null;
      /** A list of advisory classifications to filter vulnerabilities by. */
      classifications?: SecurityAdvisoryClassification[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables?: SponsorableItemConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for users and organizations returned from the connection. */
      orderBy?: SponsorableOrder | null;
      /** Whether only sponsorables who own the viewer's dependencies will be returned. Must be authenticated to use. Can check an organization instead for their dependencies owned by sponsorables by passing orgLoginForDependencies. */
      onlyDependencies?: Scalars['Boolean'] | null;
      /** Optional organization username for whose dependencies should be checked. Used when onlyDependencies = true. Omit to check your own dependencies. If you are not an administrator of the organization, only dependencies from its public repositories will be considered. */
      orgLoginForDependencies?: Scalars['String'] | null;
      /**
       * Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
       *
       * **Upcoming Change on 2022-07-01 UTC**
       * **Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
       * **Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem.
       *
       */
      dependencyEcosystem?: SecurityAdvisoryEcosystem | null;
      /** Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true. */
      ecosystem?: DependencyGraphEcosystem | null;
    };
  };
  /** Look up a topic by name. */
  topic?: TopicGenqlSelection & {
    __args: {
      /** The topic's name. */
      name: Scalars['String'];
    };
  };
  /** Lookup a user by login. */
  user?: UserGenqlSelection & {
    __args: {
      /** The user's login. */
      login: Scalars['String'];
    };
  };
  /** The currently authenticated user. */
  viewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents the client's rate limit. */
export interface RateLimitGenqlSelection {
  /** The point cost for the current query counting against the rate limit. */
  cost?: boolean | number;
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit?: boolean | number;
  /** The maximum number of nodes this query may return */
  nodeCount?: boolean | number;
  /** The number of points remaining in the current rate limit window. */
  remaining?: boolean | number;
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt?: boolean | number;
  /** The number of points used in the current rate limit window. */
  used?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a subject that can be reacted on. */
export interface ReactableGenqlSelection {
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_Release?: ReleaseGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface ReactingUserConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReactingUserEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user that's made a reaction. */
export interface ReactingUserEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  node?: UserGenqlSelection;
  /** The moment when the user made the reaction. */
  reactedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An emoji reaction to a particular piece of content. */
export interface ReactionGenqlSelection {
  /** Identifies the emoji reaction. */
  content?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The reactable piece of content */
  reactable?: ReactableGenqlSelection;
  /** Identifies the user who created this reaction. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of reactions that have been left on the subject. */
export interface ReactionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReactionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReactionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ReactionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ReactionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroupGenqlSelection {
  /** Identifies the emoji reaction. */
  content?: boolean | number;
  /** Identifies when the reaction was created. */
  createdAt?: boolean | number;
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors?: ReactorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The subject that was reacted to. */
  subject?: ReactableGenqlSelection;
  /**
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   */
  users?: ReactingUserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of reactions can be ordered upon return. */
export interface ReactionOrder {
  /** The field in which to order reactions by. */
  field: ReactionOrderField;
  /** The direction in which to order reactions by the specified field. */
  direction: OrderDirection;
}

/** Types that can be assigned to reactions. */
export interface ReactorGenqlSelection {
  on_Bot?: BotGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for Reactor. */
export interface ReactorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReactorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReactorGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an author of a reaction. */
export interface ReactorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The author of the reaction. */
  node?: ReactorGenqlSelection;
  /** The moment when the user made the reaction. */
  reactedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** The HTTP path for this ready for review event. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this ready for review event. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git reference. */
export interface RefGenqlSelection {
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Branch protection rules for this ref */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  /** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
  compare?: ComparisonGenqlSelection & {
    __args: {
      /** The head ref to compare against. */
      headRef: Scalars['String'];
    };
  };
  id?: boolean | number;
  /** The ref name. */
  name?: boolean | number;
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix?: boolean | number;
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule?: RefUpdateRuleGenqlSelection;
  /** The repository the ref belongs to. */
  repository?: RepositoryGenqlSelection;
  /** The object the ref points to. Returns null when object does not exist. */
  target?: GitObjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Ref. */
export interface RefConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RefEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RefGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RefEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTargetGenqlSelection {
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude?: boolean | number;
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
  include?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTargetInput {
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Scalars['String'][];
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
  include: Scalars['String'][];
}

/** Ways in which lists of git refs can be ordered upon return. */
export interface RefOrder {
  /** The field in which to order refs by. */
  field: RefOrderField;
  /** The direction in which to order refs by the specified field. */
  direction: OrderDirection;
}

/** A ref update rules for a viewer. */
export interface RefUpdateRuleGenqlSelection {
  /** Can this branch be deleted. */
  allowsDeletions?: boolean | number;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: boolean | number;
  /** Can matching branches be created. */
  blocksCreations?: boolean | number;
  /** Identifies the protection rule pattern. */
  pattern?: boolean | number;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: boolean | number;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: boolean | number;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: boolean | number;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: boolean | number;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: boolean | number;
  /** Are commits required to be signed. */
  requiresSignatures?: boolean | number;
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews?: boolean | number;
  /** Can the viewer push to the branch */
  viewerCanPush?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the commit associated with the 'referenced' event. */
  commit?: CommitGenqlSelection;
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository?: RepositoryGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Reference originated in a different repository. */
  isCrossRepository?: boolean | number;
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference?: boolean | number;
  /** Object referenced by event. */
  subject?: ReferencedSubjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Any referencable object */
export interface ReferencedSubjectGenqlSelection {
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The identity provider for the enterprise. */
  identityProvider?: EnterpriseIdentityProviderGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RegenerateVerifiableDomainToken */
export interface RegenerateVerifiableDomainTokenInput {
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RegenerateVerifiableDomainToken */
export interface RegenerateVerifiableDomainTokenPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The verification token that was generated. */
  verificationToken?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RejectDeployments */
export interface RejectDeploymentsInput {
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  environmentIds: Scalars['ID'][];
  /** Optional comment for rejecting deployments */
  comment?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RejectDeployments */
export interface RejectDeploymentsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The affected deployments. */
  deployments?: DeploymentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A release contains the content for a release. */
export interface ReleaseGenqlSelection {
  /** The author of the release */
  author?: UserGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The description of the release. */
  description?: boolean | number;
  /** The description of this release rendered to HTML. */
  descriptionHTML?: boolean | number;
  id?: boolean | number;
  /** Whether or not the release is a draft */
  isDraft?: boolean | number;
  /** Whether or not the release is the latest releast */
  isLatest?: boolean | number;
  /** Whether or not the release is a prerelease */
  isPrerelease?: boolean | number;
  /** A list of users mentioned in the release description */
  mentions?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The title of the release. */
  name?: boolean | number;
  /** Identifies the date and time when the release was created. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /** List of releases assets which are dependent on this release. */
  releaseAssets?: ReleaseAssetConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A list of names to filter the assets by. */
      name?: Scalars['String'] | null;
    };
  };
  /** The repository that the release belongs to. */
  repository?: RepositoryGenqlSelection;
  /** The HTTP path for this issue */
  resourcePath?: boolean | number;
  /** A description of the release, rendered to HTML without any links in it. */
  shortDescriptionHTML?:
    | {
        __args: {
          /** How many characters to return. */
          limit?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The Git tag the release points to */
  tag?: RefGenqlSelection;
  /** The tag commit for this release. */
  tagCommit?: CommitGenqlSelection;
  /** The name of the release's Git tag */
  tagName?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this issue */
  url?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A release asset contains the content for a release asset. */
export interface ReleaseAssetGenqlSelection {
  /** The asset's content-type */
  contentType?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The number of times this asset was downloaded */
  downloadCount?: boolean | number;
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl?: boolean | number;
  id?: boolean | number;
  /** Identifies the title of the release asset. */
  name?: boolean | number;
  /** Release that the asset is associated with */
  release?: ReleaseGenqlSelection;
  /** The size (in bytes) of the asset */
  size?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The user that performed the upload */
  uploadedBy?: UserGenqlSelection;
  /** Identifies the URL of the release asset. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReleaseAssetEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReleaseAssetGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ReleaseAssetEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ReleaseAssetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Release. */
export interface ReleaseConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReleaseEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReleaseGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ReleaseEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ReleaseGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of releases can be ordered upon return. */
export interface ReleaseOrder {
  /** The field in which to order releases by. */
  field: ReleaseOrderField;
  /** The direction in which to order releases by the specified field. */
  direction: OrderDirection;
}

/** Autogenerated input type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignableInput {
  /** The id of the assignable object to remove assignees from. */
  assignableId: Scalars['ID'];
  /** The id of users to remove as assignees. */
  assigneeIds: Scalars['ID'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayloadGenqlSelection {
  /** The item that was unassigned. */
  assignable?: AssignableGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminInput {
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to remove as an administrator. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayloadGenqlSelection {
  /** The user who was removed as an administrator. */
  admin?: UserGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated enterprise. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of removing an administrator. */
  message?: boolean | number;
  /** The viewer performing the mutation. */
  viewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderInput {
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The identity provider that was removed from the enterprise. */
  identityProvider?: EnterpriseIdentityProviderGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveEnterpriseMember */
export interface RemoveEnterpriseMemberInput {
  /** The ID of the enterprise from which the user should be removed. */
  enterpriseId: Scalars['ID'];
  /** The ID of the user to remove from the enterprise. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveEnterpriseMember */
export interface RemoveEnterpriseMemberPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated enterprise. */
  enterprise?: EnterpriseGenqlSelection;
  /** The user that was removed from the enterprise. */
  user?: UserGenqlSelection;
  /** The viewer performing the mutation. */
  viewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationInput {
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization to remove from the enterprise. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated enterprise. */
  enterprise?: EnterpriseGenqlSelection;
  /** The organization that was removed from the enterprise. */
  organization?: OrganizationGenqlSelection;
  /** The viewer performing the mutation. */
  viewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export interface RemoveEnterpriseSupportEntitlementInput {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will lose the support entitlement. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
export interface RemoveEnterpriseSupportEntitlementPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of removing the support entitlement. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelableInput {
  /** The id of the Labelable to remove labels from. */
  labelableId: Scalars['ID'];
  /** The ids of labels to remove. */
  labelIds: Scalars['ID'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The Labelable the labels were removed from. */
  labelable?: LabelableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorInput {
  /** The ID of the outside collaborator to remove. */
  userId: Scalars['ID'];
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The user that was removed as an outside collaborator. */
  removedUser?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveReaction */
export interface RemoveReactionInput {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The name of the emoji reaction to remove. */
  content: ReactionContent;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The reaction object. */
  reaction?: ReactionGenqlSelection;
  /** The reaction groups for the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** The reactable subject. */
  subject?: ReactableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveStar */
export interface RemoveStarInput {
  /** The Starrable ID to unstar. */
  starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The starrable. */
  starrable?: StarrableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RemoveUpvote */
export interface RemoveUpvoteInput {
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RemoveUpvote */
export interface RemoveUpvotePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The votable subject. */
  subject?: VotableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'removed_from_merge_queue' event on a given pull request. */
export interface RemovedFromMergeQueueEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the before commit SHA for the 'removed_from_merge_queue' event. */
  beforeCommit?: CommitGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The user who removed this Pull Request from the merge queue */
  enqueuer?: UserGenqlSelection;
  id?: boolean | number;
  /** The merge queue where this pull request was removed from. */
  mergeQueue?: MergeQueueGenqlSelection;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** The reason this pull request was removed from the queue. */
  reason?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the current title of the issue or pull request. */
  currentTitle?: boolean | number;
  id?: boolean | number;
  /** Identifies the previous title of the issue or pull request. */
  previousTitle?: boolean | number;
  /** Subject that was renamed. */
  subject?: RenamedTitleSubjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An object which has a renamable title */
export interface RenamedTitleSubjectGenqlSelection {
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  __typename?: boolean | number;
}

/** Autogenerated input type of ReopenDiscussion */
export interface ReopenDiscussionInput {
  /** ID of the discussion to be reopened. */
  discussionId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ReopenDiscussion */
export interface ReopenDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that was reopened. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ReopenIssue */
export interface ReopenIssueInput {
  /** ID of the issue to be opened. */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was opened. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ReopenPullRequest */
export interface ReopenPullRequestInput {
  /** ID of the pull request to be reopened. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that was reopened. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Object that was reopened. */
  closable?: ClosableGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The reason the issue state was changed to open. */
  stateReason?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The name of the topic added to the repository */
  topic?: TopicGenqlSelection;
  /** The name of the topic added to the repository */
  topicName?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the change was to enable (true) or disable (false) the merge type */
  isEnabled?: boolean | number;
  /** The merge method affected by the change */
  mergeType?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The name of the parent repository for this forked repository. */
  forkParentName?: boolean | number;
  /** The name of the root repository for this network. */
  forkSourceName?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  /** The visibility of the repository */
  visibility?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The name of the topic added to the repository */
  topic?: TopicGenqlSelection;
  /** The name of the topic added to the repository */
  topicName?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository contains the content for a project. */
export interface RepositoryGenqlSelection {
  /** Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging. */
  allowUpdateBranch?: boolean | number;
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: boolean | number;
  /** A list of users that can be assigned to issues in this repository. */
  assignableUsers?: UserConnectionGenqlSelection & {
    __args?: {
      /** Filters users with query on user name and login. */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  autoMergeAllowed?: boolean | number;
  /** A list of branch protection rules for this repository. */
  branchProtectionRules?: BranchProtectionRuleConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns the code of conduct for this repository */
  codeOfConduct?: CodeOfConductGenqlSelection;
  /** Information extracted from the repository's `CODEOWNERS` file. */
  codeowners?: RepositoryCodeownersGenqlSelection & {
    __args?: {
      /** The ref name used to return the associated `CODEOWNERS` file. */
      refName?: Scalars['String'] | null;
    };
  };
  /** A list of collaborators associated with the repository. */
  collaborators?: RepositoryCollaboratorConnectionGenqlSelection & {
    __args?: {
      /** Collaborators affiliation level with a repository. */
      affiliation?: CollaboratorAffiliation | null;
      /** The login of one specific collaborator. */
      login?: Scalars['String'] | null;
      /** Filters users with query on user name and login */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of commit comments associated with the repository. */
  commitComments?: CommitCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns a list of contact links associated to the repository */
  contactLinks?: RepositoryContactLinkGenqlSelection;
  /** Returns the contributing guidelines for this repository. */
  contributingGuidelines?: ContributingGuidelinesGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The Ref associated with the repository's default branch. */
  defaultBranchRef?: RefGenqlSelection;
  /** Whether or not branches are automatically deleted when merged in this repository. */
  deleteBranchOnMerge?: boolean | number;
  /** A list of deploy keys that are on this repository. */
  deployKeys?: DeployKeyConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Deployments associated with the repository */
  deployments?: DeploymentConnectionGenqlSelection & {
    __args?: {
      /** Environments to list deployments for */
      environments?: Scalars['String'][] | null;
      /** Ordering options for deployments returned from the connection. */
      orderBy?: DeploymentOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The description of the repository. */
  description?: boolean | number;
  /** The description of the repository rendered to HTML. */
  descriptionHTML?: boolean | number;
  /** Returns a single discussion from the current repository by number. */
  discussion?: DiscussionGenqlSelection & {
    __args: {
      /** The number for the discussion to be returned. */
      number: Scalars['Int'];
    };
  };
  /** A list of discussion categories that are available in the repository. */
  discussionCategories?: DiscussionCategoryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter by categories that are assignable by the viewer. */
      filterByAssignable?: Scalars['Boolean'] | null;
    };
  };
  /** A discussion category by slug. */
  discussionCategory?: DiscussionCategoryGenqlSelection & {
    __args: {
      /** The slug of the discussion category to be returned. */
      slug: Scalars['String'];
    };
  };
  /** A list of discussions that have been opened in the repository. */
  discussions?: DiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Only include discussions that belong to the category with this ID. */
      categoryId?: Scalars['ID'] | null;
      /** A list of states to filter the discussions by. */
      states?: DiscussionState[] | null;
      /** Ordering options for discussions returned from the connection. */
      orderBy?: DiscussionOrder | null;
      /** Only show answered or unanswered discussions */
      answered?: Scalars['Boolean'] | null;
    };
  };
  /** The number of kilobytes this repository occupies on disk. */
  diskUsage?: boolean | number;
  /** Returns a single active environment from the current repository by name. */
  environment?: EnvironmentGenqlSelection & {
    __args: {
      /** The name of the environment to be returned. */
      name: Scalars['String'];
    };
  };
  /** A list of environments that are in this repository. */
  environments?: EnvironmentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the environments */
      orderBy?: Environments | null;
    };
  };
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount?: boolean | number;
  /** Whether this repository allows forks. */
  forkingAllowed?: boolean | number;
  /** A list of direct forked repositories. */
  forks?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The funding links for this repository */
  fundingLinks?: FundingLinkGenqlSelection;
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled?: boolean | number;
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled?: boolean | number;
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled?: boolean | number;
  /** Whether vulnerability alerts are enabled for the repository. */
  hasVulnerabilityAlertsEnabled?: boolean | number;
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled?: boolean | number;
  /** The repository's URL. */
  homepageUrl?: boolean | number;
  id?: boolean | number;
  /** The interaction ability settings for this repository. */
  interactionAbility?: RepositoryInteractionAbilityGenqlSelection;
  /** Indicates if the repository is unmaintained. */
  isArchived?: boolean | number;
  /** Returns true if blank issue creation is allowed */
  isBlankIssuesEnabled?: boolean | number;
  /** Returns whether or not this repository disabled. */
  isDisabled?: boolean | number;
  /** Returns whether or not this repository is empty. */
  isEmpty?: boolean | number;
  /** Identifies if the repository is a fork. */
  isFork?: boolean | number;
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization?: boolean | number;
  /** Indicates if the repository has been locked or not. */
  isLocked?: boolean | number;
  /** Identifies if the repository is a mirror. */
  isMirror?: boolean | number;
  /** Identifies if the repository is private or internal. */
  isPrivate?: boolean | number;
  /** Returns true if this repository has a security policy */
  isSecurityPolicyEnabled?: boolean | number;
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate?: boolean | number;
  /** Is this repository a user configuration repository? */
  isUserConfigurationRepository?: boolean | number;
  /** Returns a single issue from the current repository by number. */
  issue?: IssueGenqlSelection & {
    __args: {
      /** The number for the issue to be returned. */
      number: Scalars['Int'];
    };
  };
  /** Returns a single issue-like object from the current repository by number. */
  issueOrPullRequest?: IssueOrPullRequestGenqlSelection & {
    __args: {
      /** The number for the issue to be returned. */
      number: Scalars['Int'];
    };
  };
  /** Returns a list of issue templates associated to the repository */
  issueTemplates?: IssueTemplateGenqlSelection;
  /** A list of issues that have been opened in the repository. */
  issues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issues returned from the connection. */
      orderBy?: IssueOrder | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** A list of states to filter the issues by. */
      states?: IssueState[] | null;
      /** Filtering options for issues returned from the connection. */
      filterBy?: IssueFilters | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns a single label by name */
  label?: LabelGenqlSelection & {
    __args: {
      /** Label name */
      name: Scalars['String'];
    };
  };
  /** A list of labels associated with the repository. */
  labels?: LabelConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for labels returned from the connection. */
      orderBy?: LabelOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If provided, searches labels by name and description. */
      query?: Scalars['String'] | null;
    };
  };
  /** A list containing a breakdown of the language composition of the repository. */
  languages?: LanguageConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: LanguageOrder | null;
    };
  };
  /** Get the latest release for the repository if one exists. */
  latestRelease?: ReleaseGenqlSelection;
  /** The license associated with the repository */
  licenseInfo?: LicenseGenqlSelection;
  /** The reason the repository has been locked. */
  lockReason?: boolean | number;
  /** A list of Users that can be mentioned in the context of the repository. */
  mentionableUsers?: UserConnectionGenqlSelection & {
    __args?: {
      /** Filters users with query on user name and login */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether or not PRs are merged with a merge commit on this repository. */
  mergeCommitAllowed?: boolean | number;
  /** How the default commit message will be generated when merging a pull request. */
  mergeCommitMessage?: boolean | number;
  /** How the default commit title will be generated when merging a pull request. */
  mergeCommitTitle?: boolean | number;
  /** The merge queue for a specified branch, otherwise the default branch if not provided. */
  mergeQueue?: MergeQueueGenqlSelection & {
    __args?: {
      /** The name of the branch to get the merge queue for. Case sensitive. */
      branch?: Scalars['String'] | null;
    };
  };
  /** Returns a single milestone from the current repository by number. */
  milestone?: MilestoneGenqlSelection & {
    __args: {
      /** The number for the milestone to be returned. */
      number: Scalars['Int'];
    };
  };
  /** A list of milestones associated with the repository. */
  milestones?: MilestoneConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter by the state of the milestones. */
      states?: MilestoneState[] | null;
      /** Ordering options for milestones. */
      orderBy?: MilestoneOrder | null;
      /** Filters milestones with a query on the title */
      query?: Scalars['String'] | null;
    };
  };
  /** The repository's original mirror URL. */
  mirrorUrl?: boolean | number;
  /** The name of the repository. */
  name?: boolean | number;
  /** The repository's name with owner. */
  nameWithOwner?: boolean | number;
  /** A Git object in the repository */
  object?: GitObjectGenqlSelection & {
    __args?: {
      /** The Git object ID */
      oid?: Scalars['GitObjectID'] | null;
      /** A Git revision expression suitable for rev-parse */
      expression?: Scalars['String'] | null;
    };
  };
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl?: boolean | number;
  /** The User owner of the repository. */
  owner?: RepositoryOwnerGenqlSelection;
  /** A list of packages under the owner. */
  packages?: PackageConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Find packages by their names. */
      names?: (Scalars['String'] | null)[] | null;
      /** Find packages in a repository by ID. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter registry package by type. */
      packageType?: PackageType | null;
      /** Ordering of the returned packages. */
      orderBy?: PackageOrder | null;
    };
  };
  /** The repository parent, if this is a fork. */
  parent?: RepositoryGenqlSelection;
  /** A list of discussions that have been pinned in this repository. */
  pinnedDiscussions?: PinnedDiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of pinned issues for this repository. */
  pinnedIssues?: PinnedIssueConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The primary language of the repository's code. */
  primaryLanguage?: LanguageGenqlSelection;
  /** Find project by number. */
  project?: ProjectGenqlSelection & {
    __args: {
      /** The project number to find. */
      number: Scalars['Int'];
    };
  };
  /** Finds and returns the Project according to the provided Project number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The Project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projects?: ProjectConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for projects returned from the connection */
      orderBy?: ProjectOrder | null;
      /** Query to search projects by, currently only searching by name. */
      search?: Scalars['String'] | null;
      /** A list of states to filter the projects by. */
      states?: ProjectState[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path listing the repository's projects */
  projectsResourcePath?: boolean | number;
  /** The HTTP URL listing the repository's projects */
  projectsUrl?: boolean | number;
  /** List of projects linked to this repository. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A project to search for linked to the repo. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
    };
  };
  /** Returns a single pull request from the current repository by number. */
  pullRequest?: PullRequestGenqlSelection & {
    __args: {
      /** The number for the pull request to be returned. */
      number: Scalars['Int'];
    };
  };
  /** Returns a list of pull request templates associated to the repository */
  pullRequestTemplates?: PullRequestTemplateGenqlSelection;
  /** A list of pull requests that have been opened in the repository. */
  pullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: boolean | number;
  /** Whether or not rebase-merging is enabled on this repository. */
  rebaseMergeAllowed?: boolean | number;
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Fetch a given ref from the repository */
  ref?: RefGenqlSelection & {
    __args: {
      /** The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). */
      qualifiedName: Scalars['String'];
    };
  };
  /** Fetch a list of refs from the repository */
  refs?: RefConnectionGenqlSelection & {
    __args: {
      /** Filters refs with query on name */
      query?: Scalars['String'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
      refPrefix: Scalars['String'];
      /** DEPRECATED: use orderBy. The ordering direction. */
      direction?: OrderDirection | null;
      /** Ordering options for refs returned from the connection. */
      orderBy?: RefOrder | null;
    };
  };
  /** Lookup a single release given various criteria. */
  release?: ReleaseGenqlSelection & {
    __args: {
      /** The name of the Tag the Release was created from */
      tagName: Scalars['String'];
    };
  };
  /** List of releases which are dependent on this repository. */
  releases?: ReleaseConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: ReleaseOrder | null;
    };
  };
  /** A list of applied repository-topic associations for this repository. */
  repositoryTopics?: RepositoryTopicConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path for this repository */
  resourcePath?: boolean | number;
  /** Returns a single ruleset from the current repository by ID. */
  ruleset?: RepositoryRulesetGenqlSelection & {
    __args: {
      /** Include rulesets configured at higher levels that apply to this repository */
      includeParents?: Scalars['Boolean'] | null;
      /** The ID of the ruleset to be returned. */
      databaseId: Scalars['Int'];
    };
  };
  /** A list of rulesets for this repository. */
  rulesets?: RepositoryRulesetConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Return rulesets configured at higher levels that apply to this repository */
      includeParents?: Scalars['Boolean'] | null;
    };
  };
  /** The security policy URL. */
  securityPolicyUrl?: boolean | number;
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML?:
    | {
        __args: {
          /** How many characters to return. */
          limit?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Whether or not squash-merging is enabled on this repository. */
  squashMergeAllowed?: boolean | number;
  /** How the default commit message will be generated when squash merging a pull request. */
  squashMergeCommitMessage?: boolean | number;
  /** How the default commit title will be generated when squash merging a pull request. */
  squashMergeCommitTitle?: boolean | number;
  /**
   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.
   * Whether a squash merge commit can use the pull request title as default.
   */
  squashPrTitleUsedAsDefault?: boolean | number;
  /** The SSH URL to clone this repository */
  sshUrl?: boolean | number;
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount?: boolean | number;
  /** A list of users who have starred this starrable. */
  stargazers?: StargazerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: StarOrder | null;
    };
  };
  /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */
  submodules?: SubmoduleConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Temporary authentication token for cloning this repository. */
  tempCloneToken?: boolean | number;
  /** The repository from which this repository was generated, if any. */
  templateRepository?: RepositoryGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this repository */
  url?: boolean | number;
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage?: boolean | number;
  /** Indicates whether the viewer has admin permissions on this repository. */
  viewerCanAdminister?: boolean | number;
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Indicates whether the viewer can update the topics of this repository. */
  viewerCanUpdateTopics?: boolean | number;
  /** The last commit email for the viewer. */
  viewerDefaultCommitEmail?: boolean | number;
  /** The last used merge method by the viewer or the default for the repository. */
  viewerDefaultMergeMethod?: boolean | number;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: boolean | number;
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  viewerPermission?: boolean | number;
  /** A list of emails this viewer can commit with. */
  viewerPossibleCommitEmails?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  /** Indicates the repository's visibility level. */
  visibility?: boolean | number;
  /** Returns a single vulnerability alert from the current repository by number. */
  vulnerabilityAlert?: RepositoryVulnerabilityAlertGenqlSelection & {
    __args: {
      /** The number for the vulnerability alert to be returned. */
      number: Scalars['Int'];
    };
  };
  /** A list of vulnerability alerts that are on this repository. */
  vulnerabilityAlerts?: RepositoryVulnerabilityAlertConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter by the state of the alert */
      states?: RepositoryVulnerabilityAlertState[] | null;
      /** Filter by the scope of the alert's dependency */
      dependencyScopes?: RepositoryVulnerabilityAlertDependencyScope[] | null;
    };
  };
  /** A list of users watching the repository. */
  watchers?: UserConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Whether contributors are required to sign off on web-based commits in this repository. */
  webCommitSignoffRequired?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryDataGenqlSelection {
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  on_OrgRestoreMemberMembershipRepositoryAuditEntryData?: OrgRestoreMemberMembershipRepositoryAuditEntryDataGenqlSelection;
  on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryGenqlSelection;
  on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryGenqlSelection;
  on_RepoAccessAuditEntry?: RepoAccessAuditEntryGenqlSelection;
  on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryGenqlSelection;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryGenqlSelection;
  on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryGenqlSelection;
  on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryGenqlSelection;
  on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryGenqlSelection;
  on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryGenqlSelection;
  on_RepoCreateAuditEntry?: RepoCreateAuditEntryGenqlSelection;
  on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryGenqlSelection;
  on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Information extracted from a repository's `CODEOWNERS` file. */
export interface RepositoryCodeownersGenqlSelection {
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors?: RepositoryCodeownersErrorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An error in a `CODEOWNERS` file. */
export interface RepositoryCodeownersErrorGenqlSelection {
  /** The column number where the error occurs. */
  column?: boolean | number;
  /** A short string describing the type of error. */
  kind?: boolean | number;
  /** The line number where the error occurs. */
  line?: boolean | number;
  /** A complete description of the error, combining information from other fields. */
  message?: boolean | number;
  /** The path to the file when the error occurs. */
  path?: boolean | number;
  /** The content of the line where the error occurs. */
  source?: boolean | number;
  /** A suggestion of how to fix the error. */
  suggestion?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface RepositoryCollaboratorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryCollaboratorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  node?: UserGenqlSelection;
  /** The permission the user has on the repository. */
  permission?: boolean | number;
  /** A list of sources for the user's access to the repository. */
  permissionSources?: PermissionSourceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of repositories owned by the subject. */
export interface RepositoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** The total size in kilobytes of all repositories in the connection. Value will never be larger than max 32-bit signed integer. */
  totalDiskUsage?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository contact link. */
export interface RepositoryContactLinkGenqlSelection {
  /** The contact link purpose. */
  about?: boolean | number;
  /** The contact link name. */
  name?: boolean | number;
  /** The contact link URL. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an author of discussions in repositories. */
export interface RepositoryDiscussionAuthorGenqlSelection {
  /** Discussions this user has started. */
  repositoryDiscussions?: DiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for discussions returned from the connection. */
      orderBy?: DiscussionOrder | null;
      /** Filter discussions to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. */
      answered?: Scalars['Boolean'] | null;
      /** A list of states to filter the discussions by. */
      states?: DiscussionState[] | null;
    };
  };
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an author of discussion comments in repositories. */
export interface RepositoryDiscussionCommentAuthorGenqlSelection {
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: DiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter discussion comments to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussion comments to only those that were marked as the answer */
      onlyAnswers?: Scalars['Boolean'] | null;
    };
  };
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTargetGenqlSelection {
  /** One of these repo IDs must match the repo. */
  repositoryIds?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTargetInput {
  /** One of these repo IDs must match the repo. */
  repositoryIds: Scalars['ID'][];
}

/** A subset of repository info. */
export interface RepositoryInfoGenqlSelection {
  /** Identifies the date and time when the repository was archived. */
  archivedAt?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The description of the repository. */
  description?: boolean | number;
  /** The description of the repository rendered to HTML. */
  descriptionHTML?: boolean | number;
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount?: boolean | number;
  /** Indicates if the repository has the Discussions feature enabled. */
  hasDiscussionsEnabled?: boolean | number;
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled?: boolean | number;
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled?: boolean | number;
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled?: boolean | number;
  /** The repository's URL. */
  homepageUrl?: boolean | number;
  /** Indicates if the repository is unmaintained. */
  isArchived?: boolean | number;
  /** Identifies if the repository is a fork. */
  isFork?: boolean | number;
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization?: boolean | number;
  /** Indicates if the repository has been locked or not. */
  isLocked?: boolean | number;
  /** Identifies if the repository is a mirror. */
  isMirror?: boolean | number;
  /** Identifies if the repository is private or internal. */
  isPrivate?: boolean | number;
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate?: boolean | number;
  /** The license associated with the repository */
  licenseInfo?: LicenseGenqlSelection;
  /** The reason the repository has been locked. */
  lockReason?: boolean | number;
  /** The repository's original mirror URL. */
  mirrorUrl?: boolean | number;
  /** The name of the repository. */
  name?: boolean | number;
  /** The repository's name with owner. */
  nameWithOwner?: boolean | number;
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl?: boolean | number;
  /** The User owner of the repository. */
  owner?: RepositoryOwnerGenqlSelection;
  /** Identifies the date and time when the repository was last pushed to. */
  pushedAt?: boolean | number;
  /** The HTTP path for this repository */
  resourcePath?: boolean | number;
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML?:
    | {
        __args: {
          /** How many characters to return. */
          limit?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this repository */
  url?: boolean | number;
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage?: boolean | number;
  /** Indicates the repository's visibility level. */
  visibility?: boolean | number;
  on_Repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Repository interaction limit that applies to this object. */
export interface RepositoryInteractionAbilityGenqlSelection {
  /** The time the currently active limit expires. */
  expiresAt?: boolean | number;
  /** The current limit that is enabled on this object. */
  limit?: boolean | number;
  /** The origin of the currently active interaction limit. */
  origin?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitationGenqlSelection {
  /** The email address that received the invitation. */
  email?: boolean | number;
  id?: boolean | number;
  /** The user who received the invitation. */
  invitee?: UserGenqlSelection;
  /** The user who created the invitation. */
  inviter?: UserGenqlSelection;
  /** The permalink for this repository invitation. */
  permalink?: boolean | number;
  /** The permission granted on this repository by this invitation. */
  permission?: boolean | number;
  /** The Repository the user is invited to. */
  repository?: RepositoryInfoGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of repository invitations. */
export interface RepositoryInvitationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryInvitationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryInvitationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryInvitationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryInvitationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for repository invitation connections. */
export interface RepositoryInvitationOrder {
  /** The field to order repository invitations by. */
  field: RepositoryInvitationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A GitHub Enterprise Importer (GEI) repository migration. */
export interface RepositoryMigrationGenqlSelection {
  /** The migration flag to continue on error. */
  continueOnError?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The reason the migration failed. */
  failureReason?: boolean | number;
  id?: boolean | number;
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: boolean | number;
  /** The migration source. */
  migrationSource?: MigrationSourceGenqlSelection;
  /** The target repository name. */
  repositoryName?: boolean | number;
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  sourceUrl?: boolean | number;
  /** The migration state. */
  state?: boolean | number;
  /** The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer). */
  warningsCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for RepositoryMigration. */
export interface RepositoryMigrationConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryMigrationEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryMigrationGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a repository migration. */
export interface RepositoryMigrationEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryMigrationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for repository migrations. */
export interface RepositoryMigrationOrder {
  /** The field to order repository migrations by. */
  field: RepositoryMigrationOrderField;
  /** The ordering direction. */
  direction: RepositoryMigrationOrderDirection;
}

/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTargetGenqlSelection {
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude?: boolean | number;
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include?: boolean | number;
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTargetInput {
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Scalars['String'][];
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: Scalars['String'][];
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: Scalars['Boolean'] | null;
}

/** Represents a object that belongs to a repository. */
export interface RepositoryNodeGenqlSelection {
  /** The repository associated with this node. */
  repository?: RepositoryGenqlSelection;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_CommitCommentThread?: CommitCommentThreadGenqlSelection;
  on_DependabotUpdate?: DependabotUpdateGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionCategory?: DiscussionCategoryGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PinnedDiscussion?: PinnedDiscussionGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestCommitCommentThread?: PullRequestCommitCommentThreadGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlertGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for repository connections */
export interface RepositoryOrder {
  /** The field to order repositories by. */
  field: RepositoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Represents an owner of a Repository. */
export interface RepositoryOwnerGenqlSelection {
  /** A URL pointing to the owner's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  id?: boolean | number;
  /** The username used to login. */
  login?: boolean | number;
  /** A list of repositories that the user owns. */
  repositories?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If non-null, filters repositories according to whether they are archived and not maintained */
      isArchived?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they are forks of another repository */
      isFork?: Scalars['Boolean'] | null;
    };
  };
  /** Find Repository. */
  repository?: RepositoryGenqlSelection & {
    __args: {
      /** Name of Repository to find. */
      name: Scalars['String'];
      /** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
      followRenames?: Scalars['Boolean'] | null;
    };
  };
  /** The HTTP URL for the owner. */
  resourcePath?: boolean | number;
  /** The HTTP URL for the owner. */
  url?: boolean | number;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository rule. */
export interface RepositoryRuleGenqlSelection {
  id?: boolean | number;
  /** The parameters for this rule. */
  parameters?: RuleParametersGenqlSelection;
  /** The repository ruleset associated with this rule configuration */
  repositoryRuleset?: RepositoryRulesetGenqlSelection;
  /** The type of rule. */
  type?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Set of conditions that determine if a ruleset will evaluate */
export interface RepositoryRuleConditionsGenqlSelection {
  /** Configuration for the ref_name condition */
  refName?: RefNameConditionTargetGenqlSelection;
  /** Configuration for the repository_id condition */
  repositoryId?: RepositoryIdConditionTargetGenqlSelection;
  /** Configuration for the repository_name condition */
  repositoryName?: RepositoryNameConditionTargetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies the conditions required for a ruleset to evaluate */
export interface RepositoryRuleConditionsInput {
  /** Configuration for the ref_name condition */
  refName?: RefNameConditionTargetInput | null;
  /** Configuration for the repository_name condition */
  repositoryName?: RepositoryNameConditionTargetInput | null;
  /** Configuration for the repository_id condition */
  repositoryId?: RepositoryIdConditionTargetInput | null;
}

/** The connection type for RepositoryRule. */
export interface RepositoryRuleConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryRuleEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryRuleGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryRuleEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryRuleGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies the attributes for a new or updated rule. */
export interface RepositoryRuleInput {
  /** Optional ID of this rule when updating */
  id?: Scalars['ID'] | null;
  /** The type of rule to create. */
  type: RepositoryRuleType;
  /** The parameters for the rule. */
  parameters?: RuleParametersInput | null;
}

/** A repository ruleset. */
export interface RepositoryRulesetGenqlSelection {
  /** The actors that can bypass this ruleset */
  bypassActors?: RepositoryRulesetBypassActorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The set of conditions that must evaluate to true for this ruleset to apply */
  conditions?: RepositoryRuleConditionsGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The enforcement level of this ruleset */
  enforcement?: boolean | number;
  id?: boolean | number;
  /** Name of the ruleset. */
  name?: boolean | number;
  /** List of rules. */
  rules?: RepositoryRuleConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The type of rule. */
      type?: RepositoryRuleType | null;
    };
  };
  /** Source of ruleset. */
  source?: RuleSourceGenqlSelection;
  /** Target of the ruleset. */
  target?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A team or app that has the ability to bypass a rules defined on a ruleset */
export interface RepositoryRulesetBypassActorGenqlSelection {
  /** The actor that can bypass rules. */
  actor?: BypassActorGenqlSelection;
  /** The mode for the bypass actor */
  bypassMode?: boolean | number;
  id?: boolean | number;
  /** This actor represents the ability for an organization admin to bypass */
  organizationAdmin?: boolean | number;
  /** If the actor is a repository role, the repository role's ID that can bypass */
  repositoryRoleDatabaseId?: boolean | number;
  /** If the actor is a repository role, the repository role's name that can bypass */
  repositoryRoleName?: boolean | number;
  /** Identifies the ruleset associated with the allowed actor */
  repositoryRuleset?: RepositoryRulesetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for RepositoryRulesetBypassActor. */
export interface RepositoryRulesetBypassActorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryRulesetBypassActorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryRulesetBypassActorGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryRulesetBypassActorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryRulesetBypassActorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies the attributes for a new or updated ruleset bypass actor. Only one of `actor_id`, `repository_role_database_id`, or `organization_admin` should be specified. */
export interface RepositoryRulesetBypassActorInput {
  /** For Team and Integration bypasses, the Team or Integration ID */
  actorId?: Scalars['ID'] | null;
  /** For role bypasses, the role database ID */
  repositoryRoleDatabaseId?: Scalars['Int'] | null;
  /** For org admin bupasses, true */
  organizationAdmin?: Scalars['Boolean'] | null;
  /** The bypass mode for this actor. */
  bypassMode: RepositoryRulesetBypassActorBypassMode;
}

/** The connection type for RepositoryRuleset. */
export interface RepositoryRulesetConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryRulesetEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryRulesetGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryRulesetEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryRulesetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopicGenqlSelection {
  id?: boolean | number;
  /** The HTTP path for this repository-topic. */
  resourcePath?: boolean | number;
  /** The topic. */
  topic?: TopicGenqlSelection;
  /** The HTTP URL for this repository-topic. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryTopicEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryTopicGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryTopicEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryTopicGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: boolean | number;
  /** The slug of the enterprise. */
  enterpriseSlug?: boolean | number;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: boolean | number;
  id?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export interface RepositoryVulnerabilityAlertGenqlSelection {
  /** When was the alert auto-dismissed? */
  autoDismissedAt?: boolean | number;
  /** When was the alert created? */
  createdAt?: boolean | number;
  /** The associated Dependabot update */
  dependabotUpdate?: DependabotUpdateGenqlSelection;
  /** The scope of an alert's dependency */
  dependencyScope?: boolean | number;
  /** Comment explaining the reason the alert was dismissed */
  dismissComment?: boolean | number;
  /** The reason the alert was dismissed */
  dismissReason?: boolean | number;
  /** When was the alert dismissed? */
  dismissedAt?: boolean | number;
  /** The user who dismissed the alert */
  dismisser?: UserGenqlSelection;
  /** When was the alert fixed? */
  fixedAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the alert number. */
  number?: boolean | number;
  /** The associated repository */
  repository?: RepositoryGenqlSelection;
  /** The associated security advisory */
  securityAdvisory?: SecurityAdvisoryGenqlSelection;
  /** The associated security vulnerability */
  securityVulnerability?: SecurityVulnerabilityGenqlSelection;
  /** Identifies the state of the alert. */
  state?: boolean | number;
  /** The vulnerable manifest filename */
  vulnerableManifestFilename?: boolean | number;
  /** The vulnerable manifest path */
  vulnerableManifestPath?: boolean | number;
  /** The vulnerable requirements */
  vulnerableRequirements?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RepositoryVulnerabilityAlertEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryVulnerabilityAlertGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RepositoryVulnerabilityAlertGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RequestReviews */
export interface RequestReviewsInput {
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The Node IDs of the user to request. */
  userIds?: Scalars['ID'][] | null;
  /** The Node IDs of the team to request. */
  teamIds?: Scalars['ID'][] | null;
  /** Add users to the set rather than replace. */
  union?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that is getting requests. */
  pullRequest?: PullRequestGenqlSelection;
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge?: UserEdgeGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be requested reviewers. */
export interface RequestedReviewerGenqlSelection {
  on_Bot?: BotGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for RequestedReviewer. */
export interface RequestedReviewerConnectionGenqlSelection {
  /** A list of edges. */
  edges?: RequestedReviewerEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RequestedReviewerGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface RequestedReviewerEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: RequestedReviewerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a type that can be required by a pull request for merging. */
export interface RequirableByPullRequestGenqlSelection {
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?:
    | {
        __args: {
          /** The id of the pull request this is required for */
          pullRequestId?: Scalars['ID'] | null;
          /** The number of the pull request this is required for */
          pullRequestNumber?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  on_CheckRun?: CheckRunGenqlSelection;
  on_StatusContext?: StatusContextGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParametersGenqlSelection {
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParametersInput {
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: Scalars['String'][];
}

/** Represents a required status check for a protected branch, but not any specific run of that check. */
export interface RequiredStatusCheckDescriptionGenqlSelection {
  /** The App that must provide this status in order for it to be accepted. */
  app?: AppGenqlSelection;
  /** The name of this status. */
  context?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Specifies the attributes for a new or updated required status check. */
export interface RequiredStatusCheckInput {
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: Scalars['String'];
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  appId?: Scalars['ID'] | null;
}

/** Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParametersGenqlSelection {
  /** Status checks that are required. */
  requiredStatusChecks?: StatusCheckConfigurationGenqlSelection;
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
  strictRequiredStatusChecksPolicy?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParametersInput {
  /** Status checks that are required. */
  requiredStatusChecks: StatusCheckConfigurationInput[];
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
  strictRequiredStatusChecksPolicy: Scalars['Boolean'];
}

/** Autogenerated input type of RerequestCheckSuite */
export interface RerequestCheckSuiteInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The Node ID of the check suite. */
  checkSuiteId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayloadGenqlSelection {
  /** The requested check suite. */
  checkSuite?: CheckSuiteGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of ResolveReviewThread */
export interface ResolveReviewThreadInput {
  /** The ID of the thread to resolve */
  threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The thread to resolve. */
  thread?: PullRequestReviewThreadGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContributionGenqlSelection {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted?: boolean | number;
  /** When this contribution was made. */
  occurredAt?: boolean | number;
  /** The HTTP path for this contribution. */
  resourcePath?: boolean | number;
  /** The HTTP URL for this contribution. */
  url?: boolean | number;
  /**
   * The user who made this contribution.
   *
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RetireSponsorsTier */
export interface RetireSponsorsTierInput {
  /** The ID of the published tier to retire. */
  tierId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RetireSponsorsTier */
export interface RetireSponsorsTierPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The tier that was retired. */
  sponsorsTier?: SponsorsTierGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RevertPullRequest */
export interface RevertPullRequestInput {
  /** The ID of the pull request to revert. */
  pullRequestId: Scalars['ID'];
  /** The title of the revert pull request. */
  title?: Scalars['String'] | null;
  /** The description of the revert pull request. */
  body?: Scalars['String'] | null;
  /** Indicates whether the revert pull request should be a draft. */
  draft?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RevertPullRequest */
export interface RevertPullRequestPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The pull request that was reverted. */
  pullRequest?: PullRequestGenqlSelection;
  /** The new pull request that reverts the input pull request. */
  revertPullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowanceGenqlSelection {
  /** The actor that can dismiss. */
  actor?: ReviewDismissalAllowanceActorGenqlSelection;
  /** Identifies the branch protection rule associated with the allowed user, team, or app. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  id?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be an actor. */
export interface ReviewDismissalAllowanceActorGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReviewDismissalAllowanceEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReviewDismissalAllowanceGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ReviewDismissalAllowanceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  dismissalMessage?: boolean | number;
  /** Identifies the optional message associated with the event, rendered to HTML. */
  dismissalMessageHTML?: boolean | number;
  id?: boolean | number;
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  previousReviewState?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the commit which caused the review to become stale. */
  pullRequestCommit?: PullRequestCommitGenqlSelection;
  /** The HTTP path for this review dismissed event. */
  resourcePath?: boolean | number;
  /** Identifies the review associated with the 'review_dismissed' event. */
  review?: PullRequestReviewGenqlSelection;
  /** The HTTP URL for this review dismissed event. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A request for a user to review a pull request. */
export interface ReviewRequestGenqlSelection {
  /** Whether this request was created for a code owner */
  asCodeOwner?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** Identifies the pull request associated with this review request. */
  pullRequest?: PullRequestGenqlSelection;
  /** The reviewer that is requested. */
  requestedReviewer?: RequestedReviewerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for ReviewRequest. */
export interface ReviewRequestConnectionGenqlSelection {
  /** A list of edges. */
  edges?: ReviewRequestEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: ReviewRequestGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface ReviewRequestEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: ReviewRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer?: RequestedReviewerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** PullRequest referenced by event. */
  pullRequest?: PullRequestGenqlSelection;
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer?: RequestedReviewerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 *
 */
export interface ReviewStatusHovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  /** The current status of the pull request with respect to code review. */
  reviewDecision?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export interface RevokeEnterpriseOrganizationsMigratorRoleInput {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to revoke the migrator role */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export interface RevokeEnterpriseOrganizationsMigratorRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organizations that had the migrator role revoked for the given user. */
  organizations?: OrganizationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of RevokeMigratorRole */
export interface RevokeMigratorRoleInput {
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
  /** The user login or Team slug to revoke the migrator role from. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of RevokeMigratorRole */
export interface RevokeMigratorRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Did the operation succeed? */
  success?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types which can be parameters for `RepositoryRule` objects. */
export interface RuleParametersGenqlSelection {
  on_BranchNamePatternParameters?: BranchNamePatternParametersGenqlSelection;
  on_CommitAuthorEmailPatternParameters?: CommitAuthorEmailPatternParametersGenqlSelection;
  on_CommitMessagePatternParameters?: CommitMessagePatternParametersGenqlSelection;
  on_CommitterEmailPatternParameters?: CommitterEmailPatternParametersGenqlSelection;
  on_PullRequestParameters?: PullRequestParametersGenqlSelection;
  on_RequiredDeploymentsParameters?: RequiredDeploymentsParametersGenqlSelection;
  on_RequiredStatusChecksParameters?: RequiredStatusChecksParametersGenqlSelection;
  on_TagNamePatternParameters?: TagNamePatternParametersGenqlSelection;
  on_UpdateParameters?: UpdateParametersGenqlSelection;
  on_WorkflowsParameters?: WorkflowsParametersGenqlSelection;
  __typename?: boolean | number;
}

/** Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified. */
export interface RuleParametersInput {
  /** Parameters used for the `update` rule type */
  update?: UpdateParametersInput | null;
  /** Parameters used for the `required_deployments` rule type */
  requiredDeployments?: RequiredDeploymentsParametersInput | null;
  /** Parameters used for the `pull_request` rule type */
  pullRequest?: PullRequestParametersInput | null;
  /** Parameters used for the `required_status_checks` rule type */
  requiredStatusChecks?: RequiredStatusChecksParametersInput | null;
  /** Parameters used for the `commit_message_pattern` rule type */
  commitMessagePattern?: CommitMessagePatternParametersInput | null;
  /** Parameters used for the `commit_author_email_pattern` rule type */
  commitAuthorEmailPattern?: CommitAuthorEmailPatternParametersInput | null;
  /** Parameters used for the `committer_email_pattern` rule type */
  committerEmailPattern?: CommitterEmailPatternParametersInput | null;
  /** Parameters used for the `branch_name_pattern` rule type */
  branchNamePattern?: BranchNamePatternParametersInput | null;
  /** Parameters used for the `tag_name_pattern` rule type */
  tagNamePattern?: TagNamePatternParametersInput | null;
  /** Parameters used for the `workflows` rule type */
  workflows?: WorkflowsParametersInput | null;
}

/** Types which can have `RepositoryRule` objects. */
export interface RuleSourceGenqlSelection {
  on_Organization?: OrganizationGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_Starrable?: StarrableGenqlSelection;
  on_RepositoryInfo?: RepositoryInfoGenqlSelection;
  __typename?: boolean | number;
}

/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReplyGenqlSelection {
  /** The body of the saved reply. */
  body?: boolean | number;
  /** The saved reply body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The title of the saved reply. */
  title?: boolean | number;
  /** The user that saved this reply. */
  user?: ActorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SavedReply. */
export interface SavedReplyConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SavedReplyEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SavedReplyGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SavedReplyEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SavedReplyGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for saved reply connections. */
export interface SavedReplyOrder {
  /** The field to order saved replies by. */
  field: SavedReplyOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** The results of a search. */
export interface SearchResultItemGenqlSelection {
  on_App?: AppGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_MarketplaceListing?: MarketplaceListingGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Closable?: ClosableGenqlSelection;
  on_Comment?: CommentGenqlSelection;
  on_Updatable?: UpdatableGenqlSelection;
  on_Deletable?: DeletableGenqlSelection;
  on_Labelable?: LabelableGenqlSelection;
  on_Lockable?: LockableGenqlSelection;
  on_RepositoryNode?: RepositoryNodeGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_Reactable?: ReactableGenqlSelection;
  on_Votable?: VotableGenqlSelection;
  on_Assignable?: AssignableGenqlSelection;
  on_UpdatableComment?: UpdatableCommentGenqlSelection;
  on_SubscribableThread?: SubscribableThreadGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  on_Starrable?: StarrableGenqlSelection;
  on_RepositoryInfo?: RepositoryInfoGenqlSelection;
  __typename?: boolean | number;
}

/** A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages. */
export interface SearchResultItemConnectionGenqlSelection {
  /** The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  codeCount?: boolean | number;
  /** The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  discussionCount?: boolean | number;
  /** A list of edges. */
  edges?: SearchResultItemEdgeGenqlSelection;
  /** The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  issueCount?: boolean | number;
  /** A list of nodes. */
  nodes?: SearchResultItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  repositoryCount?: boolean | number;
  /** The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  userCount?: boolean | number;
  /** The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types. */
  wikiCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SearchResultItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SearchResultItemGenqlSelection;
  /** Text matches on the result found. */
  textMatches?: TextMatchGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Security Advisory */
export interface SecurityAdvisoryGenqlSelection {
  /** The classification of the advisory */
  classification?: boolean | number;
  /** The CVSS associated with this advisory */
  cvss?: CVSSGenqlSelection;
  /** CWEs associated with this Advisory */
  cwes?: CWEConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** This is a long plaintext description of the advisory */
  description?: boolean | number;
  /** The GitHub Security Advisory ID */
  ghsaId?: boolean | number;
  id?: boolean | number;
  /** A list of identifiers for this advisory */
  identifiers?: SecurityAdvisoryIdentifierGenqlSelection;
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink?: boolean | number;
  /** The organization that originated the advisory */
  origin?: boolean | number;
  /** The permalink for the advisory */
  permalink?: boolean | number;
  /** When the advisory was published */
  publishedAt?: boolean | number;
  /** A list of references for this advisory */
  references?: SecurityAdvisoryReferenceGenqlSelection;
  /** The severity of the advisory */
  severity?: boolean | number;
  /** A short plaintext summary of the advisory */
  summary?: boolean | number;
  /** When the advisory was last updated */
  updatedAt?: boolean | number;
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities?: SecurityVulnerabilityConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for the returned topics. */
      orderBy?: SecurityVulnerabilityOrder | null;
      /** An ecosystem to filter vulnerabilities by. */
      ecosystem?: SecurityAdvisoryEcosystem | null;
      /** A package name to filter vulnerabilities by. */
      package?: Scalars['String'] | null;
      /** A list of severities to filter vulnerabilities by. */
      severities?: SecurityAdvisorySeverity[] | null;
      /** A list of advisory classifications to filter vulnerabilities by. */
      classifications?: SecurityAdvisoryClassification[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SecurityAdvisoryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SecurityAdvisoryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SecurityAdvisoryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SecurityAdvisoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifierGenqlSelection {
  /** The identifier type, e.g. GHSA, CVE */
  type?: boolean | number;
  /** The identifier */
  value?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An advisory identifier to filter results on. */
export interface SecurityAdvisoryIdentifierFilter {
  /** The identifier type. */
  type: SecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  value: Scalars['String'];
}

/** Ordering options for security advisory connections */
export interface SecurityAdvisoryOrder {
  /** The field to order security advisories by. */
  field: SecurityAdvisoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** An individual package */
export interface SecurityAdvisoryPackageGenqlSelection {
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem?: boolean | number;
  /** The package name */
  name?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An individual package version */
export interface SecurityAdvisoryPackageVersionGenqlSelection {
  /** The package name or version */
  identifier?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReferenceGenqlSelection {
  /** A publicly accessible reference */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An individual vulnerability within an Advisory */
export interface SecurityVulnerabilityGenqlSelection {
  /** The Advisory associated with this Vulnerability */
  advisory?: SecurityAdvisoryGenqlSelection;
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion?: SecurityAdvisoryPackageVersionGenqlSelection;
  /** A description of the vulnerable package */
  package?: SecurityAdvisoryPackageGenqlSelection;
  /** The severity of the vulnerability within this package */
  severity?: boolean | number;
  /** When the vulnerability was last updated */
  updatedAt?: boolean | number;
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   *
   */
  vulnerableVersionRange?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SecurityVulnerabilityEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SecurityVulnerabilityGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SecurityVulnerabilityEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SecurityVulnerabilityGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for security vulnerability connections */
export interface SecurityVulnerabilityOrder {
  /** The field to order security vulnerabilities by. */
  field: SecurityVulnerabilityOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Autogenerated input type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderInput {
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars['URI'];
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: Scalars['String'] | null;
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars['String'];
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: SamlSignatureAlgorithm;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: SamlDigestAlgorithm;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The identity provider for the enterprise. */
  identityProvider?: EnterpriseIdentityProviderGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of SetOrganizationInteractionLimit */
export interface SetOrganizationInteractionLimitInput {
  /** The ID of the organization to set a limit for. */
  organizationId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: RepositoryInteractionLimitExpiry | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of SetOrganizationInteractionLimit */
export interface SetOrganizationInteractionLimitPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organization that the interaction limit was set for. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of SetRepositoryInteractionLimit */
export interface SetRepositoryInteractionLimitInput {
  /** The ID of the repository to set a limit for. */
  repositoryId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: RepositoryInteractionLimitExpiry | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of SetRepositoryInteractionLimit */
export interface SetRepositoryInteractionLimitPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository that the interaction limit was set for. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of SetUserInteractionLimit */
export interface SetUserInteractionLimitInput {
  /** The ID of the user to set a limit for. */
  userId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: RepositoryInteractionLimitExpiry | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of SetUserInteractionLimit */
export interface SetUserInteractionLimitPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The user that the interaction limit was set for. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignatureGenqlSelection {
  /** Email used to sign this object. */
  email?: boolean | number;
  /** True if the signature is valid and verified by GitHub. */
  isValid?: boolean | number;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: boolean | number;
  /** ASCII-armored signature header from object. */
  signature?: boolean | number;
  /** GitHub user corresponding to the email signing this commit. */
  signer?: UserGenqlSelection;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state?: boolean | number;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Social media profile associated with a user. */
export interface SocialAccountGenqlSelection {
  /** Name of the social media account as it appears on the profile. */
  displayName?: boolean | number;
  /** Software or company that hosts the social media account. */
  provider?: boolean | number;
  /** URL of the social media account. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SocialAccount. */
export interface SocialAccountConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SocialAccountEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SocialAccountGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SocialAccountEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SocialAccountGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can sponsor others via GitHub Sponsors */
export interface SponsorGenqlSelection {
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for Sponsor. */
export interface SponsorConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export interface SponsorEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export interface SponsorOrder {
  /** The field to order sponsor entities by. */
  field: SponsorOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Entities that can sponsor or be sponsored through GitHub Sponsors. */
export interface SponsorableGenqlSelection {
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: boolean | number;
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: boolean | number;
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: {
    __args: {
      /** The target account's login. */
      accountLogin: Scalars['String'];
    };
  };
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: boolean | number;
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: boolean | number;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the users and organizations returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** List of sponsors for this user or organization. */
  sponsors?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. */
      tierId?: Scalars['ID'] | null;
      /** Ordering options for sponsors returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: SponsorsActivityConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given. */
      period?: SponsorsActivityPeriod | null;
      /** Filter activities to those that occurred on or after this time. */
      since?: Scalars['DateTime'] | null;
      /** Filter activities to those that occurred before this time. */
      until?: Scalars['DateTime'] | null;
      /** Ordering options for activity returned from the connection. */
      orderBy?: SponsorsActivityOrder | null;
      /** Filter activities to only the specified actions. */
      actions?: SponsorsActivityAction[] | null;
      /** Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship. */
      includeAsSponsor?: Scalars['Boolean'] | null;
      /** Whether or not to include private activities in the result set. Defaults to including public and private activities. */
      includePrivate?: Scalars['Boolean'] | null;
    };
  };
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: SponsorshipNewsletterConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorship updates returned from the connection. */
      orderBy?: SponsorshipNewsletterOrder | null;
    };
  };
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Whether or not to include private sponsorships in the result set */
      includePrivate?: Scalars['Boolean'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins. */
      maintainerLogins?: Scalars['String'][] | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?:
    | {
        __args: {
          /** Filter payments to those that occurred on or after this time. */
          since?: Scalars['DateTime'] | null;
          /** Filter payments to those that occurred before this time. */
          until?: Scalars['DateTime'] | null;
          /** Filter payments to those made to the users or organizations with the specified usernames. */
          sponsorableLogins?: Scalars['String'][] | null;
        };
      }
    | boolean
    | number;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: boolean | number;
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: boolean | number;
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be sponsored via GitHub Sponsors */
export interface SponsorableItemGenqlSelection {
  on_Organization?: OrganizationGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for SponsorableItem. */
export interface SponsorableItemConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorableItemEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorableItemGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SponsorableItemEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorableItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export interface SponsorableOrder {
  /** The field to order sponsorable entities by. */
  field: SponsorableOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** An event related to sponsorship activity. */
export interface SponsorsActivityGenqlSelection {
  /** What action this activity indicates took place. */
  action?: boolean | number;
  /** The sponsor's current privacy level. */
  currentPrivacyLevel?: boolean | number;
  id?: boolean | number;
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier?: SponsorsTierGenqlSelection;
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor?: SponsorGenqlSelection;
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable?: SponsorableGenqlSelection;
  /** The associated sponsorship tier. */
  sponsorsTier?: SponsorsTierGenqlSelection;
  /** The timestamp of this event. */
  timestamp?: boolean | number;
  /** Was this sponsorship made alongside other sponsorships at the same time from the same sponsor? */
  viaBulkSponsorship?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SponsorsActivity. */
export interface SponsorsActivityConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorsActivityEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorsActivityGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SponsorsActivityEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorsActivityGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for GitHub Sponsors activity connections. */
export interface SponsorsActivityOrder {
  /** The field to order activity by. */
  field: SponsorsActivityOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export interface SponsorsGoalGenqlSelection {
  /** A description of the goal from the maintainer. */
  description?: boolean | number;
  /** What the objective of this goal is. */
  kind?: boolean | number;
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete?: boolean | number;
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue?: boolean | number;
  /** A brief summary of the kind and target value of this goal. */
  title?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Sponsors listing. */
export interface SponsorsListingGenqlSelection {
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal?: SponsorsGoalGenqlSelection;
  /** The Stripe Connect account currently in use for payouts for this Sponsors listing, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  activeStripeConnectAccount?: StripeConnectAccountGenqlSelection;
  /** The name of the country or region with the maintainer's bank account or fiscal host. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion?: boolean | number;
  /** The email address used by GitHub to contact the sponsorable about their GitHub Sponsors profile. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  contactEmailAddress?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
  dashboardResourcePath?: boolean | number;
  /** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
  dashboardUrl?: boolean | number;
  /** The records featured on the GitHub Sponsors profile. */
  featuredItems?: SponsorsListingFeaturedItemGenqlSelection & {
    __args?: {
      /** The types of featured items to return. */
      featureableTypes?: SponsorsListingFeaturedItemFeatureableType[] | null;
    };
  };
  /** The fiscal host used for payments, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  fiscalHost?: OrganizationGenqlSelection;
  /** The full description of the listing. */
  fullDescription?: boolean | number;
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML?: boolean | number;
  id?: boolean | number;
  /** Whether this listing is publicly visible. */
  isPublic?: boolean | number;
  /** The listing's full name. */
  name?: boolean | number;
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate?: boolean | number;
  /** The name of the country or region where the maintainer resides. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization. */
  residenceCountryOrRegion?: boolean | number;
  /** The HTTP path for this Sponsors listing. */
  resourcePath?: boolean | number;
  /** The short description of the listing. */
  shortDescription?: boolean | number;
  /** The short name of the listing. */
  slug?: boolean | number;
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable?: SponsorableGenqlSelection;
  /** The tiers for this GitHub Sponsors profile. */
  tiers?: SponsorsTierConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for Sponsors tiers returned from the connection. */
      orderBy?: SponsorsTierOrder | null;
      /** Whether to include tiers that aren't published. Only admins of the Sponsors listing can see draft tiers. Only admins of the Sponsors listing and viewers who are currently sponsoring on a retired tier can see those retired tiers. Defaults to including only published tiers, which are visible to anyone who can see the GitHub Sponsors profile. */
      includeUnpublished?: Scalars['Boolean'] | null;
    };
  };
  /** The HTTP URL for this Sponsors listing. */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A record that can be featured on a GitHub Sponsors profile. */
export interface SponsorsListingFeatureableItemGenqlSelection {
  on_Repository?: RepositoryGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_Subscribable?: SubscribableGenqlSelection;
  on_Starrable?: StarrableGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_RepositoryInfo?: RepositoryInfoGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** A record that is promoted on a GitHub Sponsors profile. */
export interface SponsorsListingFeaturedItemGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Will either be a description from the sponsorable maintainer about why they featured this item, or the item's description itself, such as a user's bio from their GitHub profile page. */
  description?: boolean | number;
  /** The record that is featured on the GitHub Sponsors profile. */
  featureable?: SponsorsListingFeatureableItemGenqlSelection;
  id?: boolean | number;
  /** The position of this featured item on the GitHub Sponsors profile with a lower position indicating higher precedence. Starts at 1. */
  position?: boolean | number;
  /** The GitHub Sponsors profile that features this record. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTierGenqlSelection {
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo?: SponsorsTierAdminInfoGenqlSelection;
  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */
  closestLesserValueTier?: SponsorsTierGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The description of the tier. */
  description?: boolean | number;
  /** The tier description rendered to HTML */
  descriptionHTML?: boolean | number;
  id?: boolean | number;
  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount?: boolean | number;
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime?: boolean | number;
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents?: boolean | number;
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars?: boolean | number;
  /** The name of the tier. */
  name?: boolean | number;
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfoGenqlSelection {
  /** Indicates whether this tier is still a work in progress by the sponsorable and not yet published to the associated GitHub Sponsors profile. Draft tiers cannot be used for new sponsorships and will not be in use on existing sponsorships. Draft tiers cannot be seen by anyone but the admins of the GitHub Sponsors profile. */
  isDraft?: boolean | number;
  /** Indicates whether this tier is published to the associated GitHub Sponsors profile. Published tiers are visible to anyone who can see the GitHub Sponsors profile, and are available for use in sponsorships if the GitHub Sponsors profile is publicly visible. */
  isPublished?: boolean | number;
  /** Indicates whether this tier has been retired from the associated GitHub Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors profile and cannot be chosen for new sponsorships. Existing sponsorships may still use retired tiers if the sponsor selected the tier before it was retired. */
  isRetired?: boolean | number;
  /** The sponsorships using this tier. */
  sponsorships?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Whether or not to return private sponsorships using this tier. Defaults to only returning public sponsorships on this tier. */
      includePrivate?: Scalars['Boolean'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SponsorsTier. */
export interface SponsorsTierConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorsTierEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorsTierGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SponsorsTierEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorsTierGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for Sponsors tiers connections. */
export interface SponsorsTierOrder {
  /** The field to order tiers by. */
  field: SponsorsTierOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A sponsorship relationship between a sponsor and a maintainer */
export interface SponsorshipGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the sponsorship is active. False implies the sponsor is a past sponsor of the maintainer, while true implies they are a current sponsor. */
  isActive?: boolean | number;
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment?: boolean | number;
  /** Whether the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail?: boolean | number;
  /**
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   * The entity that is being sponsored
   */
  maintainer?: UserGenqlSelection;
  /** The privacy level for this sponsorship. */
  privacyLevel?: boolean | number;
  /**
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   */
  sponsor?: UserGenqlSelection;
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity?: SponsorGenqlSelection;
  /** The entity that is being sponsored */
  sponsorable?: SponsorableGenqlSelection;
  /** The associated sponsorship tier */
  tier?: SponsorsTierGenqlSelection;
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Sponsorship. */
export interface SponsorshipConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorshipEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorshipGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents?: boolean | number;
  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SponsorshipEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorshipGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export interface SponsorshipNewsletterGenqlSelection {
  /** The author of the newsletter. */
  author?: UserGenqlSelection;
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished?: boolean | number;
  /** The user or organization this newsletter is from. */
  sponsorable?: SponsorableGenqlSelection;
  /** The subject of the newsletter, what it's about. */
  subject?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for SponsorshipNewsletter. */
export interface SponsorshipNewsletterConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SponsorshipNewsletterEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SponsorshipNewsletterGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SponsorshipNewsletterEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SponsorshipNewsletterGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for sponsorship newsletter connections. */
export interface SponsorshipNewsletterOrder {
  /** The field to order sponsorship newsletters by. */
  field: SponsorshipNewsletterOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Ordering options for sponsorship connections. */
export interface SponsorshipOrder {
  /** The field to order sponsorship by. */
  field: SponsorshipOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Represents an SSH signature on a Commit or Tag. */
export interface SshSignatureGenqlSelection {
  /** Email used to sign this object. */
  email?: boolean | number;
  /** True if the signature is valid and verified by GitHub. */
  isValid?: boolean | number;
  /** Hex-encoded fingerprint of the key that signed this object. */
  keyFingerprint?: boolean | number;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: boolean | number;
  /** ASCII-armored signature header from object. */
  signature?: boolean | number;
  /** GitHub user corresponding to the email signing this commit. */
  signer?: UserGenqlSelection;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state?: boolean | number;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which star connections can be ordered. */
export interface StarOrder {
  /** The field in which to order nodes by. */
  field: StarOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
}

/** The connection type for User. */
export interface StargazerConnectionGenqlSelection {
  /** A list of edges. */
  edges?: StargazerEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user that's starred a repository. */
export interface StargazerEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  node?: UserGenqlSelection;
  /** Identifies when the item was starred. */
  starredAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Things that can be starred. */
export interface StarrableGenqlSelection {
  id?: boolean | number;
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount?: boolean | number;
  /** A list of users who have starred this starrable. */
  stargazers?: StargazerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: StarOrder | null;
    };
  };
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: boolean | number;
  on_Gist?: GistGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_Topic?: TopicGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Repository. */
export interface StarredRepositoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: StarredRepositoryEdgeGenqlSelection;
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit?: boolean | number;
  /** A list of nodes. */
  nodes?: RepositoryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a starred repository. */
export interface StarredRepositoryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  node?: RepositoryGenqlSelection;
  /** Identifies when the item was starred. */
  starredAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of StartOrganizationMigration */
export interface StartOrganizationMigrationInput {
  /** The URL of the organization to migrate. */
  sourceOrgUrl: Scalars['URI'];
  /** The name of the target organization. */
  targetOrgName: Scalars['String'];
  /** The ID of the enterprise the target organization belongs to. */
  targetEnterpriseId: Scalars['ID'];
  /** The migration source access token. */
  sourceAccessToken: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of StartOrganizationMigration */
export interface StartOrganizationMigrationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new organization migration. */
  orgMigration?: OrganizationMigrationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of StartRepositoryMigration */
export interface StartRepositoryMigrationInput {
  /** The ID of the migration source. */
  sourceId: Scalars['ID'];
  /** The ID of the organization that will own the imported repository. */
  ownerId: Scalars['ID'];
  /** The URL of the source repository. */
  sourceRepositoryUrl?: Scalars['URI'] | null;
  /** The name of the imported repository. */
  repositoryName: Scalars['String'];
  /** Whether to continue the migration on error. Defaults to `true`. */
  continueOnError?: Scalars['Boolean'] | null;
  /** The signed URL to access the user-uploaded git archive. */
  gitArchiveUrl?: Scalars['String'] | null;
  /** The signed URL to access the user-uploaded metadata archive. */
  metadataArchiveUrl?: Scalars['String'] | null;
  /** The migration source access token. */
  accessToken?: Scalars['String'] | null;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: Scalars['String'] | null;
  /** Whether to skip migrating releases for the repository. */
  skipReleases?: Scalars['Boolean'] | null;
  /** The visibility of the imported repository. */
  targetRepoVisibility?: Scalars['String'] | null;
  /** Whether to lock the source repository. */
  lockSource?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of StartRepositoryMigration */
export interface StartRepositoryMigrationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The new repository migration. */
  repositoryMigration?: RepositoryMigrationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a commit status. */
export interface StatusGenqlSelection {
  /** A list of status contexts and check runs for this commit. */
  combinedContexts?: StatusCheckRollupContextConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The commit this status is attached to. */
  commit?: CommitGenqlSelection;
  /** Looks up an individual status context by context name. */
  context?: StatusContextGenqlSelection & {
    __args: {
      /** The context name. */
      name: Scalars['String'];
    };
  };
  /** The individual status contexts for this commit. */
  contexts?: StatusContextGenqlSelection;
  id?: boolean | number;
  /** The combined commit status. */
  state?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Required status check */
export interface StatusCheckConfigurationGenqlSelection {
  /** The status check context name that must be present on the commit. */
  context?: boolean | number;
  /** The optional integration ID that this status check must originate from. */
  integrationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Required status check */
export interface StatusCheckConfigurationInput {
  /** The status check context name that must be present on the commit. */
  context: Scalars['String'];
  /** The optional integration ID that this status check must originate from. */
  integrationId?: Scalars['Int'] | null;
}

/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollupGenqlSelection {
  /** The commit the status and check runs are attached to. */
  commit?: CommitGenqlSelection;
  /** A list of status contexts and check runs for this commit. */
  contexts?: StatusCheckRollupContextConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  id?: boolean | number;
  /** The combined status for the commit. */
  state?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Types that can be inside a StatusCheckRollup context. */
export interface StatusCheckRollupContextGenqlSelection {
  on_CheckRun?: CheckRunGenqlSelection;
  on_StatusContext?: StatusContextGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_RequirableByPullRequest?: RequirableByPullRequestGenqlSelection;
  __typename?: boolean | number;
}

/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnectionGenqlSelection {
  /** The number of check runs in this rollup. */
  checkRunCount?: boolean | number;
  /** Counts of check runs by state. */
  checkRunCountsByState?: CheckRunStateCountGenqlSelection;
  /** A list of edges. */
  edges?: StatusCheckRollupContextEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: StatusCheckRollupContextGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** The number of status contexts in this rollup. */
  statusContextCount?: boolean | number;
  /** Counts of status contexts by state. */
  statusContextCountsByState?: StatusContextStateCountGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface StatusCheckRollupContextEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: StatusCheckRollupContextGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an individual commit status context */
export interface StatusContextGenqlSelection {
  /** The avatar of the OAuth application or the user that created the status */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** This commit this status context is attached to. */
  commit?: CommitGenqlSelection;
  /** The name of this status context. */
  context?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The actor who created this status context. */
  creator?: ActorGenqlSelection;
  /** The description for this status context. */
  description?: boolean | number;
  id?: boolean | number;
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired?:
    | {
        __args: {
          /** The id of the pull request this is required for */
          pullRequestId?: Scalars['ID'] | null;
          /** The number of the pull request this is required for */
          pullRequestNumber?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The state of this status context. */
  state?: boolean | number;
  /** The URL for this status context. */
  targetUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a count of the state of a status context. */
export interface StatusContextStateCountGenqlSelection {
  /** The number of statuses with this state. */
  count?: boolean | number;
  /** The state of a status context. */
  state?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors. */
export interface StripeConnectAccountGenqlSelection {
  /** The account number used to identify this Stripe Connect account. */
  accountId?: boolean | number;
  /** The name of the country or region of an external account, such as a bank account, tied to the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization. */
  billingCountryOrRegion?: boolean | number;
  /** The name of the country or region of the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization. */
  countryOrRegion?: boolean | number;
  /** Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile. */
  isActive?: boolean | number;
  /** The GitHub Sponsors profile associated with this Stripe Connect account. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** The URL to access this Stripe Connect account on Stripe's website. */
  stripeDashboardUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewInput {
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: Scalars['ID'] | null;
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: Scalars['ID'] | null;
  /** The event to send to the Pull Request Review. */
  event: PullRequestReviewEvent;
  /** The text field to set on the Pull Request Review. */
  body?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The submitted pull request review. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface SubmoduleGenqlSelection {
  /** The branch of the upstream submodule for tracking updates */
  branch?: boolean | number;
  /** The git URL of the submodule repository */
  gitUrl?: boolean | number;
  /** The name of the submodule in .gitmodules */
  name?: boolean | number;
  /** The name of the submodule in .gitmodules (Base64-encoded) */
  nameRaw?: boolean | number;
  /** The path in the superproject that this submodule is located in */
  path?: boolean | number;
  /** The path in the superproject that this submodule is located in (Base64-encoded) */
  pathRaw?: boolean | number;
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Submodule. */
export interface SubmoduleConnectionGenqlSelection {
  /** A list of edges. */
  edges?: SubmoduleEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: SubmoduleGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface SubmoduleEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: SubmoduleGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribableGenqlSelection {
  id?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  on_Commit?: CommitGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_Team?: TeamGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribableThreadGenqlSelection {
  id?: boolean | number;
  /** Identifies the viewer's thread subscription form action. */
  viewerThreadSubscriptionFormAction?: boolean | number;
  /** Identifies the viewer's thread subscription status. */
  viewerThreadSubscriptionStatus?: boolean | number;
  on_Issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Object referenced by event. */
  subscribable?: SubscribableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewerGenqlSelection {
  /** Is this suggestion based on past commits? */
  isAuthor?: boolean | number;
  /** Is this suggestion based on past review comments? */
  isCommenter?: boolean | number;
  /** Identifies the user suggested to review the pull request. */
  reviewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git tag. */
export interface TagGenqlSelection {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: boolean | number;
  /** The HTTP path for this Git object */
  commitResourcePath?: boolean | number;
  /** The HTTP URL for this Git object */
  commitUrl?: boolean | number;
  id?: boolean | number;
  /** The Git tag message. */
  message?: boolean | number;
  /** The Git tag name. */
  name?: boolean | number;
  /** The Git object ID */
  oid?: boolean | number;
  /** The Repository the Git object belongs to */
  repository?: RepositoryGenqlSelection;
  /** Details about the tag author. */
  tagger?: GitActorGenqlSelection;
  /** The Git object the tag points to. */
  target?: GitObjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParametersGenqlSelection {
  /** How this rule will appear to users. */
  name?: boolean | number;
  /** If true, the rule will fail if the pattern matches. */
  negate?: boolean | number;
  /** The operator to use for matching. */
  operator?: boolean | number;
  /** The pattern to match with. */
  pattern?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParametersInput {
  /** How this rule will appear to users. */
  name?: Scalars['String'] | null;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Scalars['Boolean'] | null;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
}

/** A team of users in an organization. */
export interface TeamGenqlSelection {
  /** A list of teams that are ancestors of this team. */
  ancestors?: TeamConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A URL pointing to the team's avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size in pixels of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** List of child teams belonging to this team */
  childTeams?: TeamConnectionGenqlSelection & {
    __args?: {
      /** Order for connection */
      orderBy?: TeamOrder | null;
      /** User logins to filter by */
      userLogins?: Scalars['String'][] | null;
      /** Whether to list immediate child teams or all descendant child teams. */
      immediateOnly?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The slug corresponding to the organization and team. */
  combinedSlug?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The description of the team. */
  description?: boolean | number;
  /** Find a team discussion by its number. */
  discussion?: TeamDiscussionGenqlSelection & {
    __args: {
      /** The sequence number of the discussion to find. */
      number: Scalars['Int'];
    };
  };
  /** A list of team discussions. */
  discussions?: TeamDiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If provided, filters discussions according to whether or not they are pinned. */
      isPinned?: Scalars['Boolean'] | null;
      /** Order for connection */
      orderBy?: TeamDiscussionOrder | null;
    };
  };
  /** The HTTP path for team discussions */
  discussionsResourcePath?: boolean | number;
  /** The HTTP URL for team discussions */
  discussionsUrl?: boolean | number;
  /** The HTTP path for editing this team */
  editTeamResourcePath?: boolean | number;
  /** The HTTP URL for editing this team */
  editTeamUrl?: boolean | number;
  id?: boolean | number;
  /** A list of pending invitations for users to this team */
  invitations?: OrganizationInvitationConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses?: UserStatusConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for user statuses returned from the connection. */
      orderBy?: UserStatusOrder | null;
    };
  };
  /** A list of users who are members of this team. */
  members?: TeamMemberConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The search string to look for. */
      query?: Scalars['String'] | null;
      /** Filter by membership type */
      membership?: TeamMembershipType | null;
      /** Filter by team member role */
      role?: TeamMemberRole | null;
      /** Order for the connection. */
      orderBy?: TeamMemberOrder | null;
    };
  };
  /** The HTTP path for the team' members */
  membersResourcePath?: boolean | number;
  /** The HTTP URL for the team' members */
  membersUrl?: boolean | number;
  /** The name of the team. */
  name?: boolean | number;
  /** The HTTP path creating a new team */
  newTeamResourcePath?: boolean | number;
  /** The HTTP URL creating a new team */
  newTeamUrl?: boolean | number;
  /** The notification setting that the team has set. */
  notificationSetting?: boolean | number;
  /** The organization that owns this team. */
  organization?: OrganizationGenqlSelection;
  /** The parent team of the team. */
  parentTeam?: TeamGenqlSelection;
  /** The level of privacy the team has. */
  privacy?: boolean | number;
  /** Finds and returns the project according to the provided project number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The Project number. */
      number: Scalars['Int'];
    };
  };
  /** List of projects this team has collaborator access to. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Filtering options for projects returned from this connection */
      filterBy?: ProjectV2Filters | null;
      /** The query to search projects by. */
      query?: Scalars['String'] | null;
    };
  };
  /** A list of repositories this team has access to. */
  repositories?: TeamRepositoryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The search string to look for. Repositories will be returned where the name contains your search string. */
      query?: Scalars['String'] | null;
      /** Order for the connection. */
      orderBy?: TeamRepositoryOrder | null;
    };
  };
  /** The HTTP path for this team's repositories */
  repositoriesResourcePath?: boolean | number;
  /** The HTTP URL for this team's repositories */
  repositoriesUrl?: boolean | number;
  /** The HTTP path for this team */
  resourcePath?: boolean | number;
  /** The slug corresponding to the team. */
  slug?: boolean | number;
  /** The HTTP path for this team's teams */
  teamsResourcePath?: boolean | number;
  /** The HTTP URL for this team's teams */
  teamsUrl?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this team */
  url?: boolean | number;
  /** Team is adminable by the viewer. */
  viewerCanAdminister?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryDataGenqlSelection {
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  on_OrgRestoreMemberMembershipTeamAuditEntryData?: OrgRestoreMemberMembershipTeamAuditEntryDataGenqlSelection;
  on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryGenqlSelection;
  on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryGenqlSelection;
  on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryGenqlSelection;
  on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryGenqlSelection;
  on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The new parent team. */
  parentTeam?: TeamGenqlSelection;
  /** The name of the new parent team */
  parentTeamName?: boolean | number;
  /** The name of the former parent team */
  parentTeamNameWas?: boolean | number;
  /** The HTTP path for the parent team */
  parentTeamResourcePath?: boolean | number;
  /** The HTTP URL for the parent team */
  parentTeamUrl?: boolean | number;
  /** The former parent team. */
  parentTeamWas?: TeamGenqlSelection;
  /** The HTTP path for the previous parent team */
  parentTeamWasResourcePath?: boolean | number;
  /** The HTTP URL for the previous parent team */
  parentTeamWasUrl?: boolean | number;
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Team. */
export interface TeamConnectionGenqlSelection {
  /** A list of edges. */
  edges?: TeamEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: TeamGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A team discussion. */
export interface TeamDiscussionGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Author's association with the discussion's team.
   */
  authorAssociation?: boolean | number;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the discussion body hash.
   */
  bodyVersion?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * A list of comments on this discussion.
   */
  comments?: TeamDiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: TeamDiscussionCommentOrder | null;
      /** When provided, filters the connection such that results begin with the comment with this number. */
      fromComment?: Scalars['Int'] | null;
    };
  };
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for discussion comments
   */
  commentsResourcePath?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for discussion comments
   */
  commentsUrl?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the discussion is pinned.
   */
  isPinned?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the discussion is only visible to team members and org admins.
   */
  isPrivate?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the discussion within its team.
   */
  number?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for this discussion
   */
  resourcePath?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The team that defines the context of this discussion.
   */
  team?: TeamGenqlSelection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The title of the discussion
   */
  title?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for this discussion
   */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Whether or not the current viewer can pin this discussion.
   */
  viewerCanPin?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A comment on a team discussion. */
export interface TeamDiscussionCommentGenqlSelection {
  /** The actor who authored the comment. */
  author?: ActorGenqlSelection;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Author's association with the comment's team.
   */
  authorAssociation?: boolean | number;
  /** The body as Markdown. */
  body?: boolean | number;
  /** The body rendered to HTML. */
  bodyHTML?: boolean | number;
  /** The body rendered to text. */
  bodyText?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The current version of the body content.
   */
  bodyVersion?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Check if this comment was created via an email reply. */
  createdViaEmail?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The discussion this comment is about.
   */
  discussion?: TeamDiscussionGenqlSelection;
  /** The actor who edited the comment. */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit?: boolean | number;
  /** The moment the editor made the last edit */
  lastEditedAt?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * Identifies the comment number.
   */
  number?: boolean | number;
  /** Identifies when the comment was published at. */
  publishedAt?: boolean | number;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: ReactionGroupGenqlSelection;
  /** A list of Reactions left on the Issue. */
  reactions?: ReactionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Allows filtering Reactions by emoji. */
      content?: ReactionContent | null;
      /** Allows specifying the order in which reactions are returned. */
      orderBy?: ReactionOrder | null;
    };
  };
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP path for this comment
   */
  resourcePath?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /**
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   * The HTTP URL for this comment
   */
  url?: boolean | number;
  /** A list of edits to this content. */
  userContentEdits?: UserContentEditConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Check if the current viewer can delete this object. */
  viewerCanDelete?: boolean | number;
  /** Can user react to this subject */
  viewerCanReact?: boolean | number;
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  /** Did the viewer author this comment. */
  viewerDidAuthor?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnectionGenqlSelection {
  /** A list of edges. */
  edges?: TeamDiscussionCommentEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: TeamDiscussionCommentGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface TeamDiscussionCommentEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which team discussion comment connections can be ordered. */
export interface TeamDiscussionCommentOrder {
  /** The field by which to order nodes. */
  field: TeamDiscussionCommentOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
}

/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnectionGenqlSelection {
  /** A list of edges. */
  edges?: TeamDiscussionEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: TeamDiscussionGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface TeamDiscussionEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: TeamDiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which team discussion connections can be ordered. */
export interface TeamDiscussionOrder {
  /** The field by which to order nodes. */
  field: TeamDiscussionOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
}

/** An edge in a connection. */
export interface TeamEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: TeamGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface TeamMemberConnectionGenqlSelection {
  /** A list of edges. */
  edges?: TeamMemberEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user who is a member of a team. */
export interface TeamMemberEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath?: boolean | number;
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl?: boolean | number;
  node?: UserGenqlSelection;
  /** The role the member has on the team. */
  role?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for team member connections */
export interface TeamMemberOrder {
  /** The field to order team members by. */
  field: TeamMemberOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Ways in which team connections can be ordered. */
export interface TeamOrder {
  /** The field in which to order nodes by. */
  field: TeamOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
}

/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntryGenqlSelection {
  /** The action name */
  action?: boolean | number;
  /** The user who initiated the action */
  actor?: AuditEntryActorGenqlSelection;
  /** The IP address of the actor */
  actorIp?: boolean | number;
  /** A readable representation of the actor's location */
  actorLocation?: ActorLocationGenqlSelection;
  /** The username of the user who initiated the action */
  actorLogin?: boolean | number;
  /** The HTTP path for the actor. */
  actorResourcePath?: boolean | number;
  /** The HTTP URL for the actor. */
  actorUrl?: boolean | number;
  /** The time the action was initiated */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: boolean | number;
  /** The corresponding operation type for the action */
  operationType?: boolean | number;
  /** The Organization associated with the Audit Entry. */
  organization?: OrganizationGenqlSelection;
  /** The name of the Organization. */
  organizationName?: boolean | number;
  /** The HTTP path for the organization */
  organizationResourcePath?: boolean | number;
  /** The HTTP URL for the organization */
  organizationUrl?: boolean | number;
  /** The repository associated with the action */
  repository?: RepositoryGenqlSelection;
  /** The name of the repository */
  repositoryName?: boolean | number;
  /** The HTTP path for the repository */
  repositoryResourcePath?: boolean | number;
  /** The HTTP URL for the repository */
  repositoryUrl?: boolean | number;
  /** The team associated with the action */
  team?: TeamGenqlSelection;
  /** The name of the team */
  teamName?: boolean | number;
  /** The HTTP path for this team */
  teamResourcePath?: boolean | number;
  /** The HTTP URL for this team */
  teamUrl?: boolean | number;
  /** The user affected by the action */
  user?: UserGenqlSelection;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: boolean | number;
  /** The HTTP path for the user. */
  userResourcePath?: boolean | number;
  /** The HTTP URL for the user. */
  userUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for Repository. */
export interface TeamRepositoryConnectionGenqlSelection {
  /** A list of edges. */
  edges?: TeamRepositoryEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: RepositoryGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a team repository. */
export interface TeamRepositoryEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  node?: RepositoryGenqlSelection;
  /** The permission level the team has on the repository */
  permission?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for team repository connections */
export interface TeamRepositoryOrder {
  /** The field to order repositories by. */
  field: TeamRepositoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A text match within a search result. */
export interface TextMatchGenqlSelection {
  /** The specific text fragment within the property matched on. */
  fragment?: boolean | number;
  /** Highlights within the matched fragment. */
  highlights?: TextMatchHighlightGenqlSelection;
  /** The property matched on. */
  property?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a single highlight in a search result match. */
export interface TextMatchHighlightGenqlSelection {
  /** The indice in the fragment where the matched text begins. */
  beginIndice?: boolean | number;
  /** The indice in the fragment where the matched text ends. */
  endIndice?: boolean | number;
  /** The text matched. */
  text?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A topic aggregates entities that are related to a subject. */
export interface TopicGenqlSelection {
  id?: boolean | number;
  /** The topic's name. */
  name?: boolean | number;
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   *
   */
  relatedTopics?: TopicGenqlSelection & {
    __args?: {
      /** How many topics to return. */
      first?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories. */
  repositories?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned. */
      sponsorableOnly?: Scalars['Boolean'] | null;
    };
  };
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount?: boolean | number;
  /** A list of users who have starred this starrable. */
  stargazers?: StargazerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Order for connection */
      orderBy?: StarOrder | null;
    };
  };
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryDataGenqlSelection {
  /** The name of the topic added to the repository */
  topic?: TopicGenqlSelection;
  /** The name of the topic added to the repository */
  topicName?: boolean | number;
  on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryGenqlSelection;
  on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of TransferEnterpriseOrganization */
export interface TransferEnterpriseOrganizationInput {
  /** The ID of the organization to transfer. */
  organizationId: Scalars['ID'];
  /** The ID of the enterprise where the organization should be transferred. */
  destinationEnterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of TransferEnterpriseOrganization */
export interface TransferEnterpriseOrganizationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organization for which a transfer was initiated. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of TransferIssue */
export interface TransferIssueInput {
  /** The Node ID of the issue to be transferred */
  issueId: Scalars['ID'];
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: Scalars['ID'];
  /** Whether to create labels if they don't exist in the target repository (matched by name) */
  createLabelsIfMissing?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was transferred */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The repository this came from */
  fromRepository?: RepositoryGenqlSelection;
  id?: boolean | number;
  /** Identifies the issue associated with the event. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git tree. */
export interface TreeGenqlSelection {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid?: boolean | number;
  /** The HTTP path for this Git object */
  commitResourcePath?: boolean | number;
  /** The HTTP URL for this Git object */
  commitUrl?: boolean | number;
  /** A list of tree entries. */
  entries?: TreeEntryGenqlSelection;
  id?: boolean | number;
  /** The Git object ID */
  oid?: boolean | number;
  /** The Repository the Git object belongs to */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a Git tree entry. */
export interface TreeEntryGenqlSelection {
  /** The extension of the file */
  extension?: boolean | number;
  /** Whether or not this tree entry is generated */
  isGenerated?: boolean | number;
  /** The programming language this file is written in. */
  language?: LanguageGenqlSelection;
  /** Number of lines in the file. */
  lineCount?: boolean | number;
  /** Entry file mode. */
  mode?: boolean | number;
  /** Entry file name. */
  name?: boolean | number;
  /** Entry file name. (Base64-encoded) */
  nameRaw?: boolean | number;
  /** Entry file object. */
  object?: GitObjectGenqlSelection;
  /** Entry file Git object ID. */
  oid?: boolean | number;
  /** The full path of the file. */
  path?: boolean | number;
  /** The full path of the file. (Base64-encoded) */
  pathRaw?: boolean | number;
  /** The Repository the tree entry belongs to */
  repository?: RepositoryGenqlSelection;
  /** Entry byte size */
  size?: boolean | number;
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule?: SubmoduleGenqlSelection;
  /** Entry file type. */
  type?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnarchiveProjectV2Item */
export interface UnarchiveProjectV2ItemInput {
  /** The ID of the Project to archive the item from. */
  projectId: Scalars['ID'];
  /** The ID of the ProjectV2Item to unarchive. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnarchiveProjectV2Item */
export interface UnarchiveProjectV2ItemPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item unarchived from the project. */
  item?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnarchiveRepository */
export interface UnarchiveRepositoryInput {
  /** The ID of the repository to unarchive. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository that was unarchived. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the assignable associated with the event. */
  assignable?: AssignableGenqlSelection;
  /** Identifies the user or mannequin that was unassigned. */
  assignee?: AssigneeGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   * Identifies the subject (user) who was unassigned.
   */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnfollowOrganization */
export interface UnfollowOrganizationInput {
  /** ID of the organization to unfollow. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnfollowOrganization */
export interface UnfollowOrganizationPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The organization that was unfollowed. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnfollowUser */
export interface UnfollowUserInput {
  /** ID of the user to unfollow. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The user that was unfollowed. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatableGenqlSelection {
  /** The HTML path to this resource. */
  resourcePath?: boolean | number;
  /** The URL to this resource. */
  url?: boolean | number;
  on_Bot?: BotGenqlSelection;
  on_CheckRun?: CheckRunGenqlSelection;
  on_ClosedEvent?: ClosedEventGenqlSelection;
  on_Commit?: CommitGenqlSelection;
  on_ConvertToDraftEvent?: ConvertToDraftEventGenqlSelection;
  on_CrossReferencedEvent?: CrossReferencedEventGenqlSelection;
  on_Gist?: GistGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_Mannequin?: MannequinGenqlSelection;
  on_MergedEvent?: MergedEventGenqlSelection;
  on_Milestone?: MilestoneGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestCommit?: PullRequestCommitGenqlSelection;
  on_ReadyForReviewEvent?: ReadyForReviewEventGenqlSelection;
  on_Release?: ReleaseGenqlSelection;
  on_Repository?: RepositoryGenqlSelection;
  on_RepositoryTopic?: RepositoryTopicGenqlSelection;
  on_ReviewDismissedEvent?: ReviewDismissedEventGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  on_User?: UserGenqlSelection;
  on_Workflow?: WorkflowGenqlSelection;
  on_WorkflowRun?: WorkflowRunGenqlSelection;
  on_WorkflowRunFile?: WorkflowRunFileGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignatureGenqlSelection {
  /** Email used to sign this object. */
  email?: boolean | number;
  /** True if the signature is valid and verified by GitHub. */
  isValid?: boolean | number;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload?: boolean | number;
  /** ASCII-armored signature header from object. */
  signature?: boolean | number;
  /** GitHub user corresponding to the email signing this commit. */
  signer?: UserGenqlSelection;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state?: boolean | number;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the label associated with the 'unlabeled' event. */
  label?: LabelGenqlSelection;
  /** Identifies the `Labelable` associated with the event. */
  labelable?: LabelableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnlinkProjectV2FromRepository */
export interface UnlinkProjectV2FromRepositoryInput {
  /** The ID of the project to unlink from the repository. */
  projectId: Scalars['ID'];
  /** The ID of the repository to unlink from the project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnlinkProjectV2FromRepository */
export interface UnlinkProjectV2FromRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository the project is no longer linked to. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnlinkProjectV2FromTeam */
export interface UnlinkProjectV2FromTeamInput {
  /** The ID of the project to unlink from the team. */
  projectId: Scalars['ID'];
  /** The ID of the team to unlink from the project. */
  teamId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnlinkProjectV2FromTeam */
export interface UnlinkProjectV2FromTeamPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The team the project is unlinked from */
  team?: TeamGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectInput {
  /** The ID of the Project linked to the Repository. */
  projectId: Scalars['ID'];
  /** The ID of the Repository linked to the Project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The linked Project. */
  project?: ProjectGenqlSelection;
  /** The linked Repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnlockLockable */
export interface UnlockLockableInput {
  /** ID of the item to be unlocked. */
  lockableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The item that was unlocked. */
  unlockedRecord?: LockableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Object that was unlocked. */
  lockable?: LockableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export interface UnmarkDiscussionCommentAsAnswerInput {
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
export interface UnmarkDiscussionCommentAsAnswerPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The discussion that includes the comment. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnmarkFileAsViewed */
export interface UnmarkFileAsViewedInput {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The path of the file to mark as unviewed */
  path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnmarkFileAsViewed */
export interface UnmarkFileAsViewedPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated pull request. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicateInput {
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: Scalars['ID'];
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue or pull request that was marked as a duplicate. */
  duplicate?: IssueOrPullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnmarkProjectV2AsTemplate */
export interface UnmarkProjectV2AsTemplateInput {
  /** The ID of the Project to unmark as a template. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnmarkProjectV2AsTemplate */
export interface UnmarkProjectV2AsTemplatePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: IssueOrPullRequestGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: IssueOrPullRequestGenqlSelection;
  id?: boolean | number;
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnminimizeComment */
export interface UnminimizeCommentInput {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The comment that was unminimized. */
  unminimizedComment?: MinimizableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnpinIssue */
export interface UnpinIssueInput {
  /** The ID of the issue to be unpinned */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue that was unpinned */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Identifies the issue associated with the event. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UnresolveReviewThread */
export interface UnresolveReviewThreadInput {
  /** The ID of the thread to unresolve */
  threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The thread to resolve. */
  thread?: PullRequestReviewThreadGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** Object referenced by event. */
  subscribable?: SubscribableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Entities that can be updated. */
export interface UpdatableGenqlSelection {
  /** Check if the current viewer can update this object. */
  viewerCanUpdate?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_Project?: ProjectGenqlSelection;
  on_ProjectV2?: ProjectV2GenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Comments that can be updated. */
export interface UpdatableCommentGenqlSelection {
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons?: boolean | number;
  on_CommitComment?: CommitCommentGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  on_GistComment?: GistCommentGenqlSelection;
  on_Issue?: IssueGenqlSelection;
  on_IssueComment?: IssueCommentGenqlSelection;
  on_PullRequest?: PullRequestGenqlSelection;
  on_PullRequestReview?: PullRequestReviewGenqlSelection;
  on_PullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  on_TeamDiscussion?: TeamDiscussionGenqlSelection;
  on_TeamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRuleInput {
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  pattern?: Scalars['String'] | null;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: Scalars['Boolean'] | null;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Scalars['Int'] | null;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: Scalars['Boolean'] | null;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: Scalars['Boolean'] | null;
  /** Is branch creation a protected operation. */
  blocksCreations?: Scalars['Boolean'] | null;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: Scalars['Boolean'] | null;
  /** Can this branch be deleted. */
  allowsDeletions?: Scalars['Boolean'] | null;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: Scalars['Boolean'] | null;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: Scalars['Boolean'] | null;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: Scalars['Boolean'] | null;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: Scalars['Boolean'] | null;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: Scalars['Boolean'] | null;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: Scalars['Boolean'] | null;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: Scalars['ID'][] | null;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: Scalars['ID'][] | null;
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: Scalars['ID'][] | null;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: Scalars['Boolean'] | null;
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: Scalars['ID'][] | null;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Scalars['String'][] | null;
  /** The list of required status checks */
  requiredStatusChecks?: RequiredStatusCheckInput[] | null;
  /** Are successful deployments required before merging. */
  requiresDeployments?: Scalars['Boolean'] | null;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: Scalars['String'][] | null;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: Scalars['Boolean'] | null;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: Scalars['Boolean'] | null;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: Scalars['Boolean'] | null;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayloadGenqlSelection {
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: BranchProtectionRuleGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateCheckRun */
export interface UpdateCheckRunInput {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The node of the check. */
  checkRunId: Scalars['ID'];
  /** The name of the check. */
  name?: Scalars['String'] | null;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: Scalars['URI'] | null;
  /** A reference for the run on the integrator's system. */
  externalId?: Scalars['String'] | null;
  /** The current status. */
  status?: RequestableCheckStatusState | null;
  /** The time that the check run began. */
  startedAt?: Scalars['DateTime'] | null;
  /** The final conclusion of the check. */
  conclusion?: CheckConclusionState | null;
  /** The time that the check run finished. */
  completedAt?: Scalars['DateTime'] | null;
  /** Descriptive details about the run. */
  output?: CheckRunOutput | null;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: CheckRunAction[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayloadGenqlSelection {
  /** The updated check run. */
  checkRun?: CheckRunGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The check suite preferences to modify. */
  autoTriggerPreferences: CheckSuiteAutoTriggerPreference[];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateDiscussionComment */
export interface UpdateDiscussionCommentInput {
  /** The Node ID of the discussion comment to update. */
  commentId: Scalars['ID'];
  /** The new contents of the comment body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateDiscussionComment */
export interface UpdateDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The modified discussion comment. */
  comment?: DiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateDiscussion */
export interface UpdateDiscussionInput {
  /** The Node ID of the discussion to update. */
  discussionId: Scalars['ID'];
  /** The new discussion title. */
  title?: Scalars['String'] | null;
  /** The new contents of the discussion body. */
  body?: Scalars['String'] | null;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateDiscussion */
export interface UpdateDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The modified discussion. */
  discussion?: DiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRoleInput {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a administrator whose role is being changed. */
  login: Scalars['String'];
  /** The new role for the Enterprise administrator. */
  role: EnterpriseAdministratorRole;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of changing the administrator's role. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** The value for the allow private repository forking policy on the enterprise. */
  policyValue?: EnterpriseAllowPrivateRepositoryForkingPolicyValue | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated base repository permission setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the base repository permission setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can change repository visibility setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can change repository visibility setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: Scalars['ID'];
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: EnterpriseMembersCanCreateRepositoriesSettingValue | null;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: Scalars['Boolean'] | null;
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: Scalars['Boolean'] | null;
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: Scalars['Boolean'] | null;
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can create repositories setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can create repositories setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can delete issues setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can delete issues setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can delete repositories setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can make purchases setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can make purchases setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can update protected branches setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingInput {
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the organization projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated organization projects setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the organization projects setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export interface UpdateEnterpriseOwnerOrganizationRoleInput {
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization for membership change. */
  organizationId: Scalars['ID'];
  /** The role to assume in the organization. */
  organizationRole: RoleInOrganization;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
export interface UpdateEnterpriseOwnerOrganizationRolePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of changing the owner's organization role. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfileInput {
  /** The Enterprise ID to update. */
  enterpriseId: Scalars['ID'];
  /** The name of the enterprise. */
  name?: Scalars['String'] | null;
  /** The description of the enterprise. */
  description?: Scalars['String'] | null;
  /** The URL of the enterprise's website. */
  websiteUrl?: Scalars['String'] | null;
  /** The location of the enterprise. */
  location?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated enterprise. */
  enterprise?: EnterpriseGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingInput {
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the repository projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated repository projects setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the repository projects setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingInput {
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the team discussions setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated team discussions setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the team discussions setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: EnterpriseEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise?: EnterpriseGenqlSelection;
  /** A message confirming the result of updating the two factor authentication required setting. */
  message?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateEnvironment */
export interface UpdateEnvironmentInput {
  /** The node ID of the environment. */
  environmentId: Scalars['ID'];
  /** The wait timer in minutes. */
  waitTimer?: Scalars['Int'] | null;
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: Scalars['ID'][] | null;
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateEnvironment */
export interface UpdateEnvironmentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated environment. */
  environment?: EnvironmentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingInput {
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list enabled setting. */
  settingValue: IpAllowListEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The IP allow list owner on which the setting was updated. */
  owner?: IpAllowListOwnerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryInput {
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  name?: Scalars['String'] | null;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The IP allow list entry that was updated. */
  ipAllowListEntry?: IpAllowListEntryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  /** The ID of the owner. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The IP allow list owner on which the setting was updated. */
  owner?: IpAllowListOwnerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateIssueComment */
export interface UpdateIssueCommentInput {
  /** The ID of the IssueComment to modify. */
  id: Scalars['ID'];
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated comment. */
  issueComment?: IssueCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateIssue */
export interface UpdateIssueInput {
  /** The ID of the Issue to modify. */
  id: Scalars['ID'];
  /** The title for the issue. */
  title?: Scalars['String'] | null;
  /** The body for the issue description. */
  body?: Scalars['String'] | null;
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: Scalars['ID'][] | null;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: Scalars['ID'] | null;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: Scalars['ID'][] | null;
  /** The desired issue state. */
  state?: IssueState | null;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: Scalars['ID'][] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The issue. */
  issue?: IssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export interface UpdateNotificationRestrictionSettingInput {
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: Scalars['ID'];
  /** The value for the restrict notifications setting. */
  settingValue: NotificationRestrictionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateNotificationRestrictionSetting */
export interface UpdateNotificationRestrictionSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The owner on which the setting was updated. */
  owner?: VerifiableDomainOwnerGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: Scalars['ID'];
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: boolean | number;
  /** The organization with the updated allow private repository forking setting. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
export interface UpdateOrganizationWebCommitSignoffSettingInput {
  /** The ID of the organization on which to set the web commit signoff setting. */
  organizationId: Scalars['ID'];
  /** Enable signoff on web-based commits for repositories in the organization? */
  webCommitSignoffRequired: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
export interface UpdateOrganizationWebCommitSignoffSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: boolean | number;
  /** The organization with the updated web commit signoff setting. */
  organization?: OrganizationGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParametersGenqlSelection {
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParametersInput {
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: Scalars['Boolean'];
}

/** Autogenerated input type of UpdateProjectCard */
export interface UpdateProjectCardInput {
  /** The ProjectCard ID to update. */
  projectCardId: Scalars['ID'];
  /** Whether or not the ProjectCard should be archived */
  isArchived?: Scalars['Boolean'] | null;
  /** The note of ProjectCard. */
  note?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated ProjectCard. */
  projectCard?: ProjectCardGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProjectColumn */
export interface UpdateProjectColumnInput {
  /** The ProjectColumn ID to update. */
  projectColumnId: Scalars['ID'];
  /** The name of project column. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated project column. */
  projectColumn?: ProjectColumnGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProject */
export interface UpdateProjectInput {
  /** The Project ID to update. */
  projectId: Scalars['ID'];
  /** The name of project. */
  name?: Scalars['String'] | null;
  /** The description of project. */
  body?: Scalars['String'] | null;
  /** Whether the project is open or closed. */
  state?: ProjectState | null;
  /** Whether the project is public or not. */
  public?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated project. */
  project?: ProjectGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProjectV2Collaborators */
export interface UpdateProjectV2CollaboratorsInput {
  /** The ID of the project to update the collaborators for. */
  projectId: Scalars['ID'];
  /** The collaborators to update. */
  collaborators: ProjectV2Collaborator[];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectV2Collaborators */
export interface UpdateProjectV2CollaboratorsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The collaborators granted a role */
  collaborators?: ProjectV2ActorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProjectV2DraftIssue */
export interface UpdateProjectV2DraftIssueInput {
  /** The ID of the draft issue to update. */
  draftIssueId: Scalars['ID'];
  /** The title of the draft issue. */
  title?: Scalars['String'] | null;
  /** The body of the draft issue. */
  body?: Scalars['String'] | null;
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: Scalars['ID'][] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectV2DraftIssue */
export interface UpdateProjectV2DraftIssuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The draft issue updated in the project. */
  draftIssue?: DraftIssueGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProjectV2 */
export interface UpdateProjectV2Input {
  /** The ID of the Project to update. */
  projectId: Scalars['ID'];
  /** Set the title of the project. */
  title?: Scalars['String'] | null;
  /** Set the short description of the project. */
  shortDescription?: Scalars['String'] | null;
  /** Set the readme description of the project. */
  readme?: Scalars['String'] | null;
  /** Set the project to closed or open. */
  closed?: Scalars['Boolean'] | null;
  /** Set the project to public or private. */
  public?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
export interface UpdateProjectV2ItemFieldValueInput {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be updated. */
  itemId: Scalars['ID'];
  /** The ID of the field to be updated. */
  fieldId: Scalars['ID'];
  /** The value which will be set on the field. */
  value: ProjectV2FieldValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
export interface UpdateProjectV2ItemFieldValuePayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated item. */
  projectV2Item?: ProjectV2ItemGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateProjectV2ItemPosition */
export interface UpdateProjectV2ItemPositionInput {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be moved. */
  itemId: Scalars['ID'];
  /** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
  afterId?: Scalars['ID'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateProjectV2ItemPosition */
export interface UpdateProjectV2ItemPositionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The items in the new order */
  items?: ProjectV2ItemConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated return type of UpdateProjectV2 */
export interface UpdateProjectV2PayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated Project. */
  projectV2?: ProjectV2GenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdatePullRequestBranch */
export interface UpdatePullRequestBranchInput {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: Scalars['GitObjectID'] | null;
  /** The update branch method to use. If omitted, defaults to 'MERGE' */
  updateMethod?: PullRequestBranchUpdateMethod | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdatePullRequestBranch */
export interface UpdatePullRequestBranchPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated pull request. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdatePullRequest */
export interface UpdatePullRequestInput {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   *
   */
  baseRefName?: Scalars['String'] | null;
  /** The title of the pull request. */
  title?: Scalars['String'] | null;
  /** The contents of the pull request. */
  body?: Scalars['String'] | null;
  /** The target state of the pull request. */
  state?: PullRequestUpdateState | null;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: Scalars['Boolean'] | null;
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: Scalars['ID'][] | null;
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: Scalars['ID'] | null;
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: Scalars['ID'][] | null;
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: Scalars['ID'][] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayloadGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated pull request. */
  pullRequest?: PullRequestGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentInput {
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: Scalars['ID'];
  /** The text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated comment. */
  pullRequestReviewComment?: PullRequestReviewCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewInput {
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated pull request review. */
  pullRequestReview?: PullRequestReviewGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateRef */
export interface UpdateRefInput {
  /** The Node ID of the Ref to be updated. */
  refId: Scalars['ID'];
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: Scalars['GitObjectID'];
  /** Permit updates of branch Refs that are not fast-forwards? */
  force?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated Ref. */
  ref?: RefGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateRepository */
export interface UpdateRepositoryInput {
  /** The ID of the repository to update. */
  repositoryId: Scalars['ID'];
  /** The new name of the repository. */
  name?: Scalars['String'] | null;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: Scalars['String'] | null;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: Scalars['Boolean'] | null;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: Scalars['URI'] | null;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: Scalars['Boolean'] | null;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: Scalars['Boolean'] | null;
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: Scalars['Boolean'] | null;
  /** Indicates if the repository should have the discussions feature enabled. */
  hasDiscussionsEnabled?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateRepositoryRuleset */
export interface UpdateRepositoryRulesetInput {
  /** The global relay id of the repository ruleset to be updated. */
  repositoryRulesetId: Scalars['ID'];
  /** The name of the ruleset. */
  name?: Scalars['String'] | null;
  /** The target of the ruleset. */
  target?: RepositoryRulesetTarget | null;
  /** The list of rules for this ruleset */
  rules?: RepositoryRuleInput[] | null;
  /** The list of conditions for this ruleset */
  conditions?: RepositoryRuleConditionsInput | null;
  /** The enforcement level for this ruleset */
  enforcement?: RuleEnforcement | null;
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: RepositoryRulesetBypassActorInput[] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateRepositoryRuleset */
export interface UpdateRepositoryRulesetPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The newly created Ruleset. */
  ruleset?: RepositoryRulesetGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
export interface UpdateRepositoryWebCommitSignoffSettingInput {
  /** The ID of the repository to update. */
  repositoryId: Scalars['ID'];
  /** Indicates if the repository should require signoff on web-based commits. */
  webCommitSignoffRequired: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
export interface UpdateRepositoryWebCommitSignoffSettingPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** A message confirming the result of updating the web commit signoff setting. */
  message?: boolean | number;
  /** The updated repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateSponsorshipPreferences */
export interface UpdateSponsorshipPreferencesInput {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Scalars['ID'] | null;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Scalars['String'] | null;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Scalars['ID'] | null;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Scalars['String'] | null;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: Scalars['Boolean'] | null;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: SponsorshipPrivacy | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateSponsorshipPreferences */
export interface UpdateSponsorshipPreferencesPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The sponsorship that was updated. */
  sponsorship?: SponsorshipGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateSubscription */
export interface UpdateSubscriptionInput {
  /** The Node ID of the subscribable object to modify. */
  subscribableId: Scalars['ID'];
  /** The new state of the subscription. */
  state: SubscriptionState;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The input subscribable entity. */
  subscribable?: SubscribableGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentInput {
  /** The ID of the comment to modify. */
  id: Scalars['ID'];
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** The current version of the body content. */
  bodyVersion?: Scalars['String'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated comment. */
  teamDiscussionComment?: TeamDiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionInput {
  /** The Node ID of the discussion to modify. */
  id: Scalars['ID'];
  /** The updated title of the discussion. */
  title?: Scalars['String'] | null;
  /** The updated text of the discussion. */
  body?: Scalars['String'] | null;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: Scalars['String'] | null;
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: Scalars['Boolean'] | null;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The updated discussion. */
  teamDiscussion?: TeamDiscussionGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateTeamsRepository */
export interface UpdateTeamsRepositoryInput {
  /** Repository ID being granted access to. */
  repositoryId: Scalars['ID'];
  /** A list of teams being granted access. Limit: 10 */
  teamIds: Scalars['ID'][];
  /** Permission that should be granted to the teams. */
  permission: RepositoryPermission;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateTeamsRepository */
export interface UpdateTeamsRepositoryPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The repository that was updated. */
  repository?: RepositoryGenqlSelection;
  /** The teams granted permission on the repository. */
  teams?: TeamGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Autogenerated input type of UpdateTopics */
export interface UpdateTopicsInput {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** An array of topic names. */
  topicNames: Scalars['String'][];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** Names of the provided topics that are not valid. */
  invalidTopicNames?: boolean | number;
  /** The updated repository. */
  repository?: RepositoryGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface UserGenqlSelection {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems?:
    | {
        __args: {
          /** Filter to only a particular kind of pinnable item. */
          type?: PinnableItemType | null;
        };
      }
    | boolean
    | number;
  /** A URL pointing to the user's public avatar. */
  avatarUrl?:
    | {
        __args: {
          /** The size of the resulting square image. */
          size?: Scalars['Int'] | null;
        };
      }
    | boolean
    | number;
  /** The user's public profile bio. */
  bio?: boolean | number;
  /** The user's public profile bio as HTML. */
  bioHTML?: boolean | number;
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  canReceiveOrganizationEmailsWhenNotificationsRestricted?: {
    __args: {
      /** The login of the organization to check. */
      login: Scalars['String'];
    };
  };
  /** A list of commit comments made by this user. */
  commitComments?: CommitCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The user's public profile company. */
  company?: boolean | number;
  /** The user's public profile company as HTML. */
  companyHTML?: boolean | number;
  /** The collection of contributions this user has made to different repositories. */
  contributionsCollection?: ContributionsCollectionGenqlSelection & {
    __args?: {
      /** The ID of the organization used to filter contributions. */
      organizationID?: Scalars['ID'] | null;
      /** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
      from?: Scalars['DateTime'] | null;
      /** Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. */
      to?: Scalars['DateTime'] | null;
    };
  };
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The user's publicly visible profile email. */
  email?: boolean | number;
  /** A list of enterprises that the user belongs to. */
  enterprises?: EnterpriseConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the User's enterprises. */
      orderBy?: EnterpriseOrder | null;
      /** Filter enterprises returned based on the user's membership type. */
      membershipType?: EnterpriseMembershipType | null;
    };
  };
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents?: boolean | number;
  /** A list of users the given user is followed by. */
  followers?: FollowerConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of users the given user is following. */
  following?: FollowingConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Find gist by repo name. */
  gist?: GistGenqlSelection & {
    __args: {
      /** The gist name to find. */
      name: Scalars['String'];
    };
  };
  /** A list of gist comments made by this user. */
  gistComments?: GistCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of the Gists the user has created. */
  gists?: GistConnectionGenqlSelection & {
    __args?: {
      /** Filters Gists according to privacy. */
      privacy?: GistPrivacy | null;
      /** Ordering options for gists returned from the connection */
      orderBy?: GistOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing?: boolean | number;
  /** The hovercard information for this user in a given context */
  hovercard?: HovercardGenqlSelection & {
    __args?: {
      /** The ID of the subject to get the hovercard in the context of */
      primarySubjectId?: Scalars['ID'] | null;
    };
  };
  id?: boolean | number;
  /** The interaction ability settings for this user. */
  interactionAbility?: RepositoryInteractionAbilityGenqlSelection;
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  isBountyHunter?: boolean | number;
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  isCampusExpert?: boolean | number;
  /** Whether or not this user is a GitHub Developer Program member. */
  isDeveloperProgramMember?: boolean | number;
  /** Whether or not this user is a GitHub employee. */
  isEmployee?: boolean | number;
  /** Whether or not this user is following the viewer. Inverse of viewerIsFollowing */
  isFollowingViewer?: boolean | number;
  /** Whether or not this user is a member of the GitHub Stars Program. */
  isGitHubStar?: boolean | number;
  /** Whether or not the user has marked themselves as for hire. */
  isHireable?: boolean | number;
  /** Whether or not this user is a site administrator. */
  isSiteAdmin?: boolean | number;
  /** Whether the given account is sponsoring this user/organization. */
  isSponsoredBy?: {
    __args: {
      /** The target account's login. */
      accountLogin: Scalars['String'];
    };
  };
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer?: boolean | number;
  /** Whether or not this user is the viewing user. */
  isViewer?: boolean | number;
  /** A list of issue comments made by this user. */
  issueComments?: IssueCommentConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issue comments returned from the connection. */
      orderBy?: IssueCommentOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of issues associated with this user. */
  issues?: IssueConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for issues returned from the connection. */
      orderBy?: IssueOrder | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** A list of states to filter the issues by. */
      states?: IssueState[] | null;
      /** Filtering options for issues returned from the connection. */
      filterBy?: IssueFilters | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase?: ProfileItemShowcaseGenqlSelection;
  /** The user's public profile location. */
  location?: boolean | number;
  /** The username used to login. */
  login?: boolean | number;
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents?: boolean | number;
  /** The user's public profile name. */
  name?: boolean | number;
  /** Find an organization by its login that the user belongs to. */
  organization?: OrganizationGenqlSelection & {
    __args: {
      /** The login of the organization to find. */
      login: Scalars['String'];
    };
  };
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  organizationVerifiedDomainEmails?: {
    __args: {
      /** The login of the organization to match verified domains from. */
      login: Scalars['String'];
    };
  };
  /** A list of organizations the user belongs to. */
  organizations?: OrganizationConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for the User's organizations. */
      orderBy?: OrganizationOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of packages under the owner. */
  packages?: PackageConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Find packages by their names. */
      names?: (Scalars['String'] | null)[] | null;
      /** Find packages in a repository by ID. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter registry package by type. */
      packageType?: PackageType | null;
      /** Ordering of the returned packages. */
      orderBy?: PackageOrder | null;
    };
  };
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinnable items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems?: PinnableItemConnectionGenqlSelection & {
    __args?: {
      /** Filter the types of pinned items that are returned. */
      types?: PinnableItemType[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining?: boolean | number;
  /** Find project by number. */
  project?: ProjectGenqlSelection & {
    __args: {
      /** The project number to find. */
      number: Scalars['Int'];
    };
  };
  /** Find a project by number. */
  projectV2?: ProjectV2GenqlSelection & {
    __args: {
      /** The project number. */
      number: Scalars['Int'];
    };
  };
  /** A list of projects under the owner. */
  projects?: ProjectConnectionGenqlSelection & {
    __args?: {
      /** Ordering options for projects returned from the connection */
      orderBy?: ProjectOrder | null;
      /** Query to search projects by, currently only searching by name. */
      search?: Scalars['String'] | null;
      /** A list of states to filter the projects by. */
      states?: ProjectState[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path listing user's projects */
  projectsResourcePath?: boolean | number;
  /** The HTTP URL listing user's projects */
  projectsUrl?: boolean | number;
  /** A list of projects under the owner. */
  projectsV2?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** A project to search for under the the owner. */
      query?: Scalars['String'] | null;
      /** How to order the returned projects. */
      orderBy?: ProjectV2Order | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The user's profile pronouns */
  pronouns?: boolean | number;
  /** A list of public keys associated with this user. */
  publicKeys?: PublicKeyConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of pull requests associated with this user. */
  pullRequests?: PullRequestConnectionGenqlSelection & {
    __args?: {
      /** A list of states to filter the pull requests by. */
      states?: PullRequestState[] | null;
      /** A list of label names to filter the pull requests by. */
      labels?: Scalars['String'][] | null;
      /** The head ref name to filter the pull requests by. */
      headRefName?: Scalars['String'] | null;
      /** The base ref name to filter the pull requests by. */
      baseRefName?: Scalars['String'] | null;
      /** Ordering options for pull requests returned from the connection. */
      orderBy?: IssueOrder | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Recent projects that this user has modified in the context of the owner. */
  recentProjects?: ProjectV2ConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A list of repositories that the user owns. */
  repositories?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If non-null, filters repositories according to whether they are archived and not maintained */
      isArchived?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they are forks of another repository */
      isFork?: Scalars['Boolean'] | null;
    };
  };
  /** A list of repositories that the user recently contributed to. */
  repositoriesContributedTo?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssues?: Scalars['Boolean'] | null;
      /** If true, include user repositories */
      includeUserRepositories?: Scalars['Boolean'] | null;
      /** If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY] */
      contributionTypes?: (RepositoryContributionType | null)[] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** Find Repository. */
  repository?: RepositoryGenqlSelection & {
    __args: {
      /** Name of Repository to find. */
      name: Scalars['String'];
      /** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
      followRenames?: Scalars['Boolean'] | null;
    };
  };
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments?: DiscussionCommentConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter discussion comments to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussion comments to only those that were marked as the answer */
      onlyAnswers?: Scalars['Boolean'] | null;
    };
  };
  /** Discussions this user has started. */
  repositoryDiscussions?: DiscussionConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for discussions returned from the connection. */
      orderBy?: DiscussionOrder | null;
      /** Filter discussions to only those in a specific repository. */
      repositoryId?: Scalars['ID'] | null;
      /** Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. */
      answered?: Scalars['Boolean'] | null;
      /** A list of states to filter the discussions by. */
      states?: DiscussionState[] | null;
    };
  };
  /** The HTTP path for this user */
  resourcePath?: boolean | number;
  /** Replies this user has saved */
  savedReplies?: SavedReplyConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** The field to order saved replies by. */
      orderBy?: SavedReplyOrder | null;
    };
  };
  /** The user's social media accounts, ordered as they appear on the user's profile. */
  socialAccounts?: SocialAccountConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** List of users and organizations this entity is sponsoring. */
  sponsoring?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the users and organizations returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** List of sponsors for this user or organization. */
  sponsors?: SponsorConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. */
      tierId?: Scalars['ID'] | null;
      /** Ordering options for sponsors returned from the connection. */
      orderBy?: SponsorOrder | null;
    };
  };
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities?: SponsorsActivityConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given. */
      period?: SponsorsActivityPeriod | null;
      /** Filter activities to those that occurred on or after this time. */
      since?: Scalars['DateTime'] | null;
      /** Filter activities to those that occurred before this time. */
      until?: Scalars['DateTime'] | null;
      /** Ordering options for activity returned from the connection. */
      orderBy?: SponsorsActivityOrder | null;
      /** Filter activities to only the specified actions. */
      actions?: SponsorsActivityAction[] | null;
      /** Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship. */
      includeAsSponsor?: Scalars['Boolean'] | null;
      /** Whether or not to include private activities in the result set. Defaults to including public and private activities. */
      includePrivate?: Scalars['Boolean'] | null;
    };
  };
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: SponsorsListingGenqlSelection;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */
  sponsorshipForViewerAsSponsor?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */
  sponsorshipForViewerAsSponsorable?: SponsorshipGenqlSelection & {
    __args?: {
      /** Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters?: SponsorshipNewsletterConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorship updates returned from the connection. */
      orderBy?: SponsorshipNewsletterOrder | null;
    };
  };
  /** The sponsorships where this user or organization is the maintainer receiving the funds. */
  sponsorshipsAsMaintainer?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Whether or not to include private sponsorships in the result set */
      includePrivate?: Scalars['Boolean'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** The sponsorships where this user or organization is the funder. */
  sponsorshipsAsSponsor?: SponsorshipConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. */
      orderBy?: SponsorshipOrder | null;
      /** Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins. */
      maintainerLogins?: Scalars['String'][] | null;
      /** Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made. */
      activeOnly?: Scalars['Boolean'] | null;
    };
  };
  /** Repositories the user has starred. */
  starredRepositories?: StarredRepositoryConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Filters starred repositories to only return repositories owned by the viewer. */
      ownedByViewer?: Scalars['Boolean'] | null;
      /** Order for connection */
      orderBy?: StarOrder | null;
    };
  };
  /** The user's description of what they're currently doing. */
  status?: UserStatusGenqlSelection;
  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   *
   */
  topRepositories?: RepositoryConnectionGenqlSelection & {
    __args: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for repositories returned from the connection */
      orderBy: RepositoryOrder;
      /** How far back in time to fetch contributed repositories */
      since?: Scalars['DateTime'] | null;
    };
  };
  /** The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization. */
  totalSponsorshipAmountAsSponsorInCents?:
    | {
        __args: {
          /** Filter payments to those that occurred on or after this time. */
          since?: Scalars['DateTime'] | null;
          /** Filter payments to those that occurred before this time. */
          until?: Scalars['DateTime'] | null;
          /** Filter payments to those made to the users or organizations with the specified usernames. */
          sponsorableLogins?: Scalars['String'][] | null;
        };
      }
    | boolean
    | number;
  /** The user's Twitter username. */
  twitterUsername?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this user */
  url?: boolean | number;
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems?: boolean | number;
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects?: boolean | number;
  /** Whether or not the viewer is able to follow the user. */
  viewerCanFollow?: boolean | number;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor?: boolean | number;
  /** Whether or not this user is followed by the viewer. Inverse of isFollowingViewer. */
  viewerIsFollowing?: boolean | number;
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring?: boolean | number;
  /** A list of repositories the given user is watching. */
  watching?: RepositoryConnectionGenqlSelection & {
    __args?: {
      /** If non-null, filters repositories according to privacy */
      privacy?: RepositoryPrivacy | null;
      /** Ordering options for repositories returned from the connection */
      orderBy?: RepositoryOrder | null;
      /** Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. */
      affiliations?: (RepositoryAffiliation | null)[] | null;
      /** Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. */
      ownerAffiliations?: (RepositoryAffiliation | null)[] | null;
      /** If non-null, filters repositories according to whether they have been locked */
      isLocked?: Scalars['Boolean'] | null;
      /** If non-null, filters repositories according to whether they have issues enabled */
      hasIssuesEnabled?: Scalars['Boolean'] | null;
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** A URL pointing to the user's public website/blog. */
  websiteUrl?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEventGenqlSelection {
  /** Identifies the actor who performed the event. */
  actor?: ActorGenqlSelection;
  /** Number of days that the user was blocked for. */
  blockDuration?: boolean | number;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  id?: boolean | number;
  /** The user who was blocked. */
  subject?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for User. */
export interface UserConnectionGenqlSelection {
  /** A list of edges. */
  edges?: UserEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edit on user content */
export interface UserContentEditGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the date and time when the object was deleted. */
  deletedAt?: boolean | number;
  /** The actor who deleted this content */
  deletedBy?: ActorGenqlSelection;
  /** A summary of the changes for this edit */
  diff?: boolean | number;
  /** When this content was edited */
  editedAt?: boolean | number;
  /** The actor who edited this content */
  editor?: ActorGenqlSelection;
  id?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A list of edits to content. */
export interface UserContentEditConnectionGenqlSelection {
  /** A list of edges. */
  edges?: UserContentEditEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserContentEditGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface UserContentEditEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserContentEditGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Represents a user. */
export interface UserEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Email attributes from External Identity */
export interface UserEmailMetadataGenqlSelection {
  /** Boolean to identify primary emails */
  primary?: boolean | number;
  /** Type of email */
  type?: boolean | number;
  /** Email id */
  value?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The user's description of what they're currently doing. */
export interface UserStatusGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** An emoji summarizing the user's status. */
  emoji?: boolean | number;
  /** The status emoji as HTML. */
  emojiHTML?: boolean | number;
  /** If set, the status will not be shown after this date. */
  expiresAt?: boolean | number;
  id?: boolean | number;
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability?: boolean | number;
  /** A brief message describing what the user is doing. */
  message?: boolean | number;
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization?: OrganizationGenqlSelection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The user who has this status. */
  user?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for UserStatus. */
export interface UserStatusConnectionGenqlSelection {
  /** A list of edges. */
  edges?: UserStatusEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: UserStatusGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface UserStatusEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: UserStatusGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for user status connections. */
export interface UserStatusOrder {
  /** The field to order user statuses by. */
  field: UserStatusOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** A domain that can be verified or approved for an organization or an enterprise. */
export interface VerifiableDomainGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The DNS host name that should be used for verification. */
  dnsHostName?: boolean | number;
  /** The unicode encoded domain. */
  domain?: boolean | number;
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName?: boolean | number;
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken?: boolean | number;
  id?: boolean | number;
  /** Whether or not the domain is approved. */
  isApproved?: boolean | number;
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement?: boolean | number;
  /** Whether or not the domain is verified. */
  isVerified?: boolean | number;
  /** The owner of the domain. */
  owner?: VerifiableDomainOwnerGenqlSelection;
  /** The punycode encoded domain. */
  punycodeEncodedDomain?: boolean | number;
  /** The time that the current verification token will expire. */
  tokenExpirationTime?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The current verification token for the domain. */
  verificationToken?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for VerifiableDomain. */
export interface VerifiableDomainConnectionGenqlSelection {
  /** A list of edges. */
  edges?: VerifiableDomainEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: VerifiableDomainGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface VerifiableDomainEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: VerifiableDomainGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ordering options for verifiable domain connections. */
export interface VerifiableDomainOrder {
  /** The field to order verifiable domains by. */
  field: VerifiableDomainOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Types that can own a verifiable domain. */
export interface VerifiableDomainOwnerGenqlSelection {
  on_Enterprise?: EnterpriseGenqlSelection;
  on_Organization?: OrganizationGenqlSelection;
  on_Node?: NodeGenqlSelection;
  on_AnnouncementBanner?: AnnouncementBannerGenqlSelection;
  on_Actor?: ActorGenqlSelection;
  on_PackageOwner?: PackageOwnerGenqlSelection;
  on_ProjectOwner?: ProjectOwnerGenqlSelection;
  on_ProjectV2Owner?: ProjectV2OwnerGenqlSelection;
  on_ProjectV2Recent?: ProjectV2RecentGenqlSelection;
  on_RepositoryDiscussionAuthor?: RepositoryDiscussionAuthorGenqlSelection;
  on_RepositoryDiscussionCommentAuthor?: RepositoryDiscussionCommentAuthorGenqlSelection;
  on_RepositoryOwner?: RepositoryOwnerGenqlSelection;
  on_UniformResourceLocatable?: UniformResourceLocatableGenqlSelection;
  on_MemberStatusable?: MemberStatusableGenqlSelection;
  on_ProfileOwner?: ProfileOwnerGenqlSelection;
  on_Sponsorable?: SponsorableGenqlSelection;
  __typename?: boolean | number;
}

/** Autogenerated input type of VerifyVerifiableDomain */
export interface VerifyVerifiableDomainInput {
  /** The ID of the verifiable domain to verify. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Scalars['String'] | null;
}

/** Autogenerated return type of VerifyVerifiableDomain */
export interface VerifyVerifiableDomainPayloadGenqlSelection {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: boolean | number;
  /** The verifiable domain that was verified. */
  domain?: VerifiableDomainGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContextGenqlSelection {
  /** A string describing this context */
  message?: boolean | number;
  /** An octicon to accompany this context */
  octicon?: boolean | number;
  /** Identifies the user who is related to this context. */
  viewer?: UserGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A subject that may be upvoted. */
export interface VotableGenqlSelection {
  /** Number of upvotes that this subject has received. */
  upvoteCount?: boolean | number;
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote?: boolean | number;
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted?: boolean | number;
  on_Discussion?: DiscussionGenqlSelection;
  on_DiscussionComment?: DiscussionCommentGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A workflow contains meta information about an Actions workflow file. */
export interface WorkflowGenqlSelection {
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  id?: boolean | number;
  /** The name of the workflow. */
  name?: boolean | number;
  /** The HTTP path for this workflow */
  resourcePath?: boolean | number;
  /** The runs of the workflow. */
  runs?: WorkflowRunConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
      /** Ordering options for the connection */
      orderBy?: WorkflowRunOrder | null;
    };
  };
  /** The state of the workflow. */
  state?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this workflow */
  url?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A workflow that must run for this rule to pass */
export interface WorkflowFileReferenceGenqlSelection {
  /** The path to the workflow file */
  path?: boolean | number;
  /** The ref (branch or tag) of the workflow file to use */
  ref?: boolean | number;
  /** The ID of the repository where the workflow is defined */
  repositoryId?: boolean | number;
  /** The commit SHA of the workflow file to use */
  sha?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** A workflow that must run for this rule to pass */
export interface WorkflowFileReferenceInput {
  /** The path to the workflow file */
  path: Scalars['String'];
  /** The ref (branch or tag) of the workflow file to use */
  ref?: Scalars['String'] | null;
  /** The ID of the repository where the workflow is defined */
  repositoryId: Scalars['Int'];
  /** The commit SHA of the workflow file to use */
  sha?: Scalars['String'] | null;
}

/** A workflow run. */
export interface WorkflowRunGenqlSelection {
  /** The check suite this workflow run belongs to. */
  checkSuite?: CheckSuiteGenqlSelection;
  /** Identifies the date and time when the object was created. */
  createdAt?: boolean | number;
  /** Identifies the primary key from the database. */
  databaseId?: boolean | number;
  /** The log of deployment reviews */
  deploymentReviews?: DeploymentReviewConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The event that triggered the workflow run */
  event?: boolean | number;
  /** The workflow file */
  file?: WorkflowRunFileGenqlSelection;
  id?: boolean | number;
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests?: DeploymentRequestConnectionGenqlSelection & {
    __args?: {
      /** Returns the elements in the list that come after the specified cursor. */
      after?: Scalars['String'] | null;
      /** Returns the elements in the list that come before the specified cursor. */
      before?: Scalars['String'] | null;
      /** Returns the first _n_ elements from the list. */
      first?: Scalars['Int'] | null;
      /** Returns the last _n_ elements from the list. */
      last?: Scalars['Int'] | null;
    };
  };
  /** The HTTP path for this workflow run */
  resourcePath?: boolean | number;
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber?: boolean | number;
  /** Identifies the date and time when the object was last updated. */
  updatedAt?: boolean | number;
  /** The HTTP URL for this workflow run */
  url?: boolean | number;
  /** The workflow executed in this workflow run. */
  workflow?: WorkflowGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** The connection type for WorkflowRun. */
export interface WorkflowRunConnectionGenqlSelection {
  /** A list of edges. */
  edges?: WorkflowRunEdgeGenqlSelection;
  /** A list of nodes. */
  nodes?: WorkflowRunGenqlSelection;
  /** Information to aid in pagination. */
  pageInfo?: PageInfoGenqlSelection;
  /** Identifies the total count of items in the connection. */
  totalCount?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An edge in a connection. */
export interface WorkflowRunEdgeGenqlSelection {
  /** A cursor for use in pagination. */
  cursor?: boolean | number;
  /** The item at the end of the edge. */
  node?: WorkflowRunGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** An executed workflow file for a workflow run. */
export interface WorkflowRunFileGenqlSelection {
  id?: boolean | number;
  /** The path of the workflow file relative to its repository. */
  path?: boolean | number;
  /** The direct link to the file in the repository which stores the workflow file. */
  repositoryFileUrl?: boolean | number;
  /** The repository name and owner which stores the workflow file. */
  repositoryName?: boolean | number;
  /** The HTTP path for this workflow run file */
  resourcePath?: boolean | number;
  /** The parent workflow run execution for this file. */
  run?: WorkflowRunGenqlSelection;
  /** The HTTP URL for this workflow run file */
  url?: boolean | number;
  /** If the viewer has permissions to push to the repository which stores the workflow. */
  viewerCanPushRepository?: boolean | number;
  /** If the viewer has permissions to read the repository which stores the workflow. */
  viewerCanReadRepository?: boolean | number;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Ways in which lists of workflow runs can be ordered upon return. */
export interface WorkflowRunOrder {
  /** The field by which to order workflows. */
  field: WorkflowRunOrderField;
  /** The direction in which to order workflow runs by the specified field. */
  direction: OrderDirection;
}

/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParametersGenqlSelection {
  /** Workflows that must pass for this rule to pass. */
  workflows?: WorkflowFileReferenceGenqlSelection;
  __typename?: boolean | number;
  __scalar?: boolean | number;
}

/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParametersInput {
  /** Workflows that must pass for this rule to pass. */
  workflows: WorkflowFileReferenceInput[];
}

const AbortQueuedMigrationsPayload_possibleTypes: string[] = ['AbortQueuedMigrationsPayload'];
export const isAbortQueuedMigrationsPayload = (
  obj?: { __typename?: any } | null,
): obj is AbortQueuedMigrationsPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAbortQueuedMigrationsPayload"');
  return AbortQueuedMigrationsPayload_possibleTypes.includes(obj.__typename);
};

const AbortRepositoryMigrationPayload_possibleTypes: string[] = ['AbortRepositoryMigrationPayload'];
export const isAbortRepositoryMigrationPayload = (
  obj?: { __typename?: any } | null,
): obj is AbortRepositoryMigrationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAbortRepositoryMigrationPayload"');
  return AbortRepositoryMigrationPayload_possibleTypes.includes(obj.__typename);
};

const AcceptEnterpriseAdministratorInvitationPayload_possibleTypes: string[] = [
  'AcceptEnterpriseAdministratorInvitationPayload',
];
export const isAcceptEnterpriseAdministratorInvitationPayload = (
  obj?: { __typename?: any } | null,
): obj is AcceptEnterpriseAdministratorInvitationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAcceptEnterpriseAdministratorInvitationPayload"');
  return AcceptEnterpriseAdministratorInvitationPayload_possibleTypes.includes(obj.__typename);
};

const AcceptTopicSuggestionPayload_possibleTypes: string[] = ['AcceptTopicSuggestionPayload'];
export const isAcceptTopicSuggestionPayload = (
  obj?: { __typename?: any } | null,
): obj is AcceptTopicSuggestionPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAcceptTopicSuggestionPayload"');
  return AcceptTopicSuggestionPayload_possibleTypes.includes(obj.__typename);
};

const Actor_possibleTypes: string[] = [
  'Bot',
  'EnterpriseUserAccount',
  'Mannequin',
  'Organization',
  'User',
];
export const isActor = (obj?: { __typename?: any } | null): obj is Actor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isActor"');
  return Actor_possibleTypes.includes(obj.__typename);
};

const ActorLocation_possibleTypes: string[] = ['ActorLocation'];
export const isActorLocation = (obj?: { __typename?: any } | null): obj is ActorLocation => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isActorLocation"');
  return ActorLocation_possibleTypes.includes(obj.__typename);
};

const AddAssigneesToAssignablePayload_possibleTypes: string[] = ['AddAssigneesToAssignablePayload'];
export const isAddAssigneesToAssignablePayload = (
  obj?: { __typename?: any } | null,
): obj is AddAssigneesToAssignablePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddAssigneesToAssignablePayload"');
  return AddAssigneesToAssignablePayload_possibleTypes.includes(obj.__typename);
};

const AddCommentPayload_possibleTypes: string[] = ['AddCommentPayload'];
export const isAddCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is AddCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddCommentPayload"');
  return AddCommentPayload_possibleTypes.includes(obj.__typename);
};

const AddDiscussionCommentPayload_possibleTypes: string[] = ['AddDiscussionCommentPayload'];
export const isAddDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is AddDiscussionCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddDiscussionCommentPayload"');
  return AddDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const AddDiscussionPollVotePayload_possibleTypes: string[] = ['AddDiscussionPollVotePayload'];
export const isAddDiscussionPollVotePayload = (
  obj?: { __typename?: any } | null,
): obj is AddDiscussionPollVotePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddDiscussionPollVotePayload"');
  return AddDiscussionPollVotePayload_possibleTypes.includes(obj.__typename);
};

const AddEnterpriseOrganizationMemberPayload_possibleTypes: string[] = [
  'AddEnterpriseOrganizationMemberPayload',
];
export const isAddEnterpriseOrganizationMemberPayload = (
  obj?: { __typename?: any } | null,
): obj is AddEnterpriseOrganizationMemberPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddEnterpriseOrganizationMemberPayload"');
  return AddEnterpriseOrganizationMemberPayload_possibleTypes.includes(obj.__typename);
};

const AddEnterpriseSupportEntitlementPayload_possibleTypes: string[] = [
  'AddEnterpriseSupportEntitlementPayload',
];
export const isAddEnterpriseSupportEntitlementPayload = (
  obj?: { __typename?: any } | null,
): obj is AddEnterpriseSupportEntitlementPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddEnterpriseSupportEntitlementPayload"');
  return AddEnterpriseSupportEntitlementPayload_possibleTypes.includes(obj.__typename);
};

const AddLabelsToLabelablePayload_possibleTypes: string[] = ['AddLabelsToLabelablePayload'];
export const isAddLabelsToLabelablePayload = (
  obj?: { __typename?: any } | null,
): obj is AddLabelsToLabelablePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddLabelsToLabelablePayload"');
  return AddLabelsToLabelablePayload_possibleTypes.includes(obj.__typename);
};

const AddProjectCardPayload_possibleTypes: string[] = ['AddProjectCardPayload'];
export const isAddProjectCardPayload = (
  obj?: { __typename?: any } | null,
): obj is AddProjectCardPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddProjectCardPayload"');
  return AddProjectCardPayload_possibleTypes.includes(obj.__typename);
};

const AddProjectColumnPayload_possibleTypes: string[] = ['AddProjectColumnPayload'];
export const isAddProjectColumnPayload = (
  obj?: { __typename?: any } | null,
): obj is AddProjectColumnPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddProjectColumnPayload"');
  return AddProjectColumnPayload_possibleTypes.includes(obj.__typename);
};

const AddProjectV2DraftIssuePayload_possibleTypes: string[] = ['AddProjectV2DraftIssuePayload'];
export const isAddProjectV2DraftIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is AddProjectV2DraftIssuePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddProjectV2DraftIssuePayload"');
  return AddProjectV2DraftIssuePayload_possibleTypes.includes(obj.__typename);
};

const AddProjectV2ItemByIdPayload_possibleTypes: string[] = ['AddProjectV2ItemByIdPayload'];
export const isAddProjectV2ItemByIdPayload = (
  obj?: { __typename?: any } | null,
): obj is AddProjectV2ItemByIdPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddProjectV2ItemByIdPayload"');
  return AddProjectV2ItemByIdPayload_possibleTypes.includes(obj.__typename);
};

const AddPullRequestReviewCommentPayload_possibleTypes: string[] = [
  'AddPullRequestReviewCommentPayload',
];
export const isAddPullRequestReviewCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is AddPullRequestReviewCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddPullRequestReviewCommentPayload"');
  return AddPullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename);
};

const AddPullRequestReviewPayload_possibleTypes: string[] = ['AddPullRequestReviewPayload'];
export const isAddPullRequestReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is AddPullRequestReviewPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddPullRequestReviewPayload"');
  return AddPullRequestReviewPayload_possibleTypes.includes(obj.__typename);
};

const AddPullRequestReviewThreadPayload_possibleTypes: string[] = [
  'AddPullRequestReviewThreadPayload',
];
export const isAddPullRequestReviewThreadPayload = (
  obj?: { __typename?: any } | null,
): obj is AddPullRequestReviewThreadPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddPullRequestReviewThreadPayload"');
  return AddPullRequestReviewThreadPayload_possibleTypes.includes(obj.__typename);
};

const AddPullRequestReviewThreadReplyPayload_possibleTypes: string[] = [
  'AddPullRequestReviewThreadReplyPayload',
];
export const isAddPullRequestReviewThreadReplyPayload = (
  obj?: { __typename?: any } | null,
): obj is AddPullRequestReviewThreadReplyPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAddPullRequestReviewThreadReplyPayload"');
  return AddPullRequestReviewThreadReplyPayload_possibleTypes.includes(obj.__typename);
};

const AddReactionPayload_possibleTypes: string[] = ['AddReactionPayload'];
export const isAddReactionPayload = (
  obj?: { __typename?: any } | null,
): obj is AddReactionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddReactionPayload"');
  return AddReactionPayload_possibleTypes.includes(obj.__typename);
};

const AddStarPayload_possibleTypes: string[] = ['AddStarPayload'];
export const isAddStarPayload = (obj?: { __typename?: any } | null): obj is AddStarPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddStarPayload"');
  return AddStarPayload_possibleTypes.includes(obj.__typename);
};

const AddUpvotePayload_possibleTypes: string[] = ['AddUpvotePayload'];
export const isAddUpvotePayload = (obj?: { __typename?: any } | null): obj is AddUpvotePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddUpvotePayload"');
  return AddUpvotePayload_possibleTypes.includes(obj.__typename);
};

const AddVerifiableDomainPayload_possibleTypes: string[] = ['AddVerifiableDomainPayload'];
export const isAddVerifiableDomainPayload = (
  obj?: { __typename?: any } | null,
): obj is AddVerifiableDomainPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddVerifiableDomainPayload"');
  return AddVerifiableDomainPayload_possibleTypes.includes(obj.__typename);
};

const AddedToMergeQueueEvent_possibleTypes: string[] = ['AddedToMergeQueueEvent'];
export const isAddedToMergeQueueEvent = (
  obj?: { __typename?: any } | null,
): obj is AddedToMergeQueueEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddedToMergeQueueEvent"');
  return AddedToMergeQueueEvent_possibleTypes.includes(obj.__typename);
};

const AddedToProjectEvent_possibleTypes: string[] = ['AddedToProjectEvent'];
export const isAddedToProjectEvent = (
  obj?: { __typename?: any } | null,
): obj is AddedToProjectEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAddedToProjectEvent"');
  return AddedToProjectEvent_possibleTypes.includes(obj.__typename);
};

const AnnouncementBanner_possibleTypes: string[] = ['Enterprise', 'Organization'];
export const isAnnouncementBanner = (
  obj?: { __typename?: any } | null,
): obj is AnnouncementBanner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAnnouncementBanner"');
  return AnnouncementBanner_possibleTypes.includes(obj.__typename);
};

const App_possibleTypes: string[] = ['App'];
export const isApp = (obj?: { __typename?: any } | null): obj is App => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isApp"');
  return App_possibleTypes.includes(obj.__typename);
};

const ApproveDeploymentsPayload_possibleTypes: string[] = ['ApproveDeploymentsPayload'];
export const isApproveDeploymentsPayload = (
  obj?: { __typename?: any } | null,
): obj is ApproveDeploymentsPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isApproveDeploymentsPayload"');
  return ApproveDeploymentsPayload_possibleTypes.includes(obj.__typename);
};

const ApproveVerifiableDomainPayload_possibleTypes: string[] = ['ApproveVerifiableDomainPayload'];
export const isApproveVerifiableDomainPayload = (
  obj?: { __typename?: any } | null,
): obj is ApproveVerifiableDomainPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isApproveVerifiableDomainPayload"');
  return ApproveVerifiableDomainPayload_possibleTypes.includes(obj.__typename);
};

const ArchiveProjectV2ItemPayload_possibleTypes: string[] = ['ArchiveProjectV2ItemPayload'];
export const isArchiveProjectV2ItemPayload = (
  obj?: { __typename?: any } | null,
): obj is ArchiveProjectV2ItemPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isArchiveProjectV2ItemPayload"');
  return ArchiveProjectV2ItemPayload_possibleTypes.includes(obj.__typename);
};

const ArchiveRepositoryPayload_possibleTypes: string[] = ['ArchiveRepositoryPayload'];
export const isArchiveRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is ArchiveRepositoryPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isArchiveRepositoryPayload"');
  return ArchiveRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const Assignable_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isAssignable = (obj?: { __typename?: any } | null): obj is Assignable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAssignable"');
  return Assignable_possibleTypes.includes(obj.__typename);
};

const AssignedEvent_possibleTypes: string[] = ['AssignedEvent'];
export const isAssignedEvent = (obj?: { __typename?: any } | null): obj is AssignedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAssignedEvent"');
  return AssignedEvent_possibleTypes.includes(obj.__typename);
};

const Assignee_possibleTypes: string[] = ['Bot', 'Mannequin', 'Organization', 'User'];
export const isAssignee = (obj?: { __typename?: any } | null): obj is Assignee => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAssignee"');
  return Assignee_possibleTypes.includes(obj.__typename);
};

const AuditEntry_possibleTypes: string[] = [
  'MembersCanDeleteReposClearAuditEntry',
  'MembersCanDeleteReposDisableAuditEntry',
  'MembersCanDeleteReposEnableAuditEntry',
  'OauthApplicationCreateAuditEntry',
  'OrgAddBillingManagerAuditEntry',
  'OrgAddMemberAuditEntry',
  'OrgBlockUserAuditEntry',
  'OrgConfigDisableCollaboratorsOnlyAuditEntry',
  'OrgConfigEnableCollaboratorsOnlyAuditEntry',
  'OrgCreateAuditEntry',
  'OrgDisableOauthAppRestrictionsAuditEntry',
  'OrgDisableSamlAuditEntry',
  'OrgDisableTwoFactorRequirementAuditEntry',
  'OrgEnableOauthAppRestrictionsAuditEntry',
  'OrgEnableSamlAuditEntry',
  'OrgEnableTwoFactorRequirementAuditEntry',
  'OrgInviteMemberAuditEntry',
  'OrgInviteToBusinessAuditEntry',
  'OrgOauthAppAccessApprovedAuditEntry',
  'OrgOauthAppAccessBlockedAuditEntry',
  'OrgOauthAppAccessDeniedAuditEntry',
  'OrgOauthAppAccessRequestedAuditEntry',
  'OrgOauthAppAccessUnblockedAuditEntry',
  'OrgRemoveBillingManagerAuditEntry',
  'OrgRemoveMemberAuditEntry',
  'OrgRemoveOutsideCollaboratorAuditEntry',
  'OrgRestoreMemberAuditEntry',
  'OrgUnblockUserAuditEntry',
  'OrgUpdateDefaultRepositoryPermissionAuditEntry',
  'OrgUpdateMemberAuditEntry',
  'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
  'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'RepoAccessAuditEntry',
  'RepoAddMemberAuditEntry',
  'RepoAddTopicAuditEntry',
  'RepoArchivedAuditEntry',
  'RepoChangeMergeSettingAuditEntry',
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
  'RepoConfigDisableContributorsOnlyAuditEntry',
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
  'RepoConfigEnableContributorsOnlyAuditEntry',
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
  'RepoConfigLockAnonymousGitAccessAuditEntry',
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
  'RepoCreateAuditEntry',
  'RepoDestroyAuditEntry',
  'RepoRemoveMemberAuditEntry',
  'RepoRemoveTopicAuditEntry',
  'RepositoryVisibilityChangeDisableAuditEntry',
  'RepositoryVisibilityChangeEnableAuditEntry',
  'TeamAddMemberAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamChangeParentTeamAuditEntry',
  'TeamRemoveMemberAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
];
export const isAuditEntry = (obj?: { __typename?: any } | null): obj is AuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntry"');
  return AuditEntry_possibleTypes.includes(obj.__typename);
};

const AuditEntryActor_possibleTypes: string[] = ['Bot', 'Organization', 'User'];
export const isAuditEntryActor = (obj?: { __typename?: any } | null): obj is AuditEntryActor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntryActor"');
  return AuditEntryActor_possibleTypes.includes(obj.__typename);
};

const AutoMergeDisabledEvent_possibleTypes: string[] = ['AutoMergeDisabledEvent'];
export const isAutoMergeDisabledEvent = (
  obj?: { __typename?: any } | null,
): obj is AutoMergeDisabledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAutoMergeDisabledEvent"');
  return AutoMergeDisabledEvent_possibleTypes.includes(obj.__typename);
};

const AutoMergeEnabledEvent_possibleTypes: string[] = ['AutoMergeEnabledEvent'];
export const isAutoMergeEnabledEvent = (
  obj?: { __typename?: any } | null,
): obj is AutoMergeEnabledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAutoMergeEnabledEvent"');
  return AutoMergeEnabledEvent_possibleTypes.includes(obj.__typename);
};

const AutoMergeRequest_possibleTypes: string[] = ['AutoMergeRequest'];
export const isAutoMergeRequest = (obj?: { __typename?: any } | null): obj is AutoMergeRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAutoMergeRequest"');
  return AutoMergeRequest_possibleTypes.includes(obj.__typename);
};

const AutoRebaseEnabledEvent_possibleTypes: string[] = ['AutoRebaseEnabledEvent'];
export const isAutoRebaseEnabledEvent = (
  obj?: { __typename?: any } | null,
): obj is AutoRebaseEnabledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAutoRebaseEnabledEvent"');
  return AutoRebaseEnabledEvent_possibleTypes.includes(obj.__typename);
};

const AutoSquashEnabledEvent_possibleTypes: string[] = ['AutoSquashEnabledEvent'];
export const isAutoSquashEnabledEvent = (
  obj?: { __typename?: any } | null,
): obj is AutoSquashEnabledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isAutoSquashEnabledEvent"');
  return AutoSquashEnabledEvent_possibleTypes.includes(obj.__typename);
};

const AutomaticBaseChangeFailedEvent_possibleTypes: string[] = ['AutomaticBaseChangeFailedEvent'];
export const isAutomaticBaseChangeFailedEvent = (
  obj?: { __typename?: any } | null,
): obj is AutomaticBaseChangeFailedEvent => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAutomaticBaseChangeFailedEvent"');
  return AutomaticBaseChangeFailedEvent_possibleTypes.includes(obj.__typename);
};

const AutomaticBaseChangeSucceededEvent_possibleTypes: string[] = [
  'AutomaticBaseChangeSucceededEvent',
];
export const isAutomaticBaseChangeSucceededEvent = (
  obj?: { __typename?: any } | null,
): obj is AutomaticBaseChangeSucceededEvent => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isAutomaticBaseChangeSucceededEvent"');
  return AutomaticBaseChangeSucceededEvent_possibleTypes.includes(obj.__typename);
};

const BaseRefChangedEvent_possibleTypes: string[] = ['BaseRefChangedEvent'];
export const isBaseRefChangedEvent = (
  obj?: { __typename?: any } | null,
): obj is BaseRefChangedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBaseRefChangedEvent"');
  return BaseRefChangedEvent_possibleTypes.includes(obj.__typename);
};

const BaseRefDeletedEvent_possibleTypes: string[] = ['BaseRefDeletedEvent'];
export const isBaseRefDeletedEvent = (
  obj?: { __typename?: any } | null,
): obj is BaseRefDeletedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBaseRefDeletedEvent"');
  return BaseRefDeletedEvent_possibleTypes.includes(obj.__typename);
};

const BaseRefForcePushedEvent_possibleTypes: string[] = ['BaseRefForcePushedEvent'];
export const isBaseRefForcePushedEvent = (
  obj?: { __typename?: any } | null,
): obj is BaseRefForcePushedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBaseRefForcePushedEvent"');
  return BaseRefForcePushedEvent_possibleTypes.includes(obj.__typename);
};

const Blame_possibleTypes: string[] = ['Blame'];
export const isBlame = (obj?: { __typename?: any } | null): obj is Blame => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBlame"');
  return Blame_possibleTypes.includes(obj.__typename);
};

const BlameRange_possibleTypes: string[] = ['BlameRange'];
export const isBlameRange = (obj?: { __typename?: any } | null): obj is BlameRange => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBlameRange"');
  return BlameRange_possibleTypes.includes(obj.__typename);
};

const Blob_possibleTypes: string[] = ['Blob'];
export const isBlob = (obj?: { __typename?: any } | null): obj is Blob => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBlob"');
  return Blob_possibleTypes.includes(obj.__typename);
};

const Bot_possibleTypes: string[] = ['Bot'];
export const isBot = (obj?: { __typename?: any } | null): obj is Bot => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBot"');
  return Bot_possibleTypes.includes(obj.__typename);
};

const BranchActorAllowanceActor_possibleTypes: string[] = ['App', 'Team', 'User'];
export const isBranchActorAllowanceActor = (
  obj?: { __typename?: any } | null,
): obj is BranchActorAllowanceActor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBranchActorAllowanceActor"');
  return BranchActorAllowanceActor_possibleTypes.includes(obj.__typename);
};

const BranchNamePatternParameters_possibleTypes: string[] = ['BranchNamePatternParameters'];
export const isBranchNamePatternParameters = (
  obj?: { __typename?: any } | null,
): obj is BranchNamePatternParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBranchNamePatternParameters"');
  return BranchNamePatternParameters_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRule_possibleTypes: string[] = ['BranchProtectionRule'];
export const isBranchProtectionRule = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBranchProtectionRule"');
  return BranchProtectionRule_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRuleConflict_possibleTypes: string[] = ['BranchProtectionRuleConflict'];
export const isBranchProtectionRuleConflict = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRuleConflict => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBranchProtectionRuleConflict"');
  return BranchProtectionRuleConflict_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRuleConflictConnection_possibleTypes: string[] = [
  'BranchProtectionRuleConflictConnection',
];
export const isBranchProtectionRuleConflictConnection = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRuleConflictConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBranchProtectionRuleConflictConnection"');
  return BranchProtectionRuleConflictConnection_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRuleConflictEdge_possibleTypes: string[] = [
  'BranchProtectionRuleConflictEdge',
];
export const isBranchProtectionRuleConflictEdge = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRuleConflictEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBranchProtectionRuleConflictEdge"');
  return BranchProtectionRuleConflictEdge_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRuleConnection_possibleTypes: string[] = ['BranchProtectionRuleConnection'];
export const isBranchProtectionRuleConnection = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRuleConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBranchProtectionRuleConnection"');
  return BranchProtectionRuleConnection_possibleTypes.includes(obj.__typename);
};

const BranchProtectionRuleEdge_possibleTypes: string[] = ['BranchProtectionRuleEdge'];
export const isBranchProtectionRuleEdge = (
  obj?: { __typename?: any } | null,
): obj is BranchProtectionRuleEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBranchProtectionRuleEdge"');
  return BranchProtectionRuleEdge_possibleTypes.includes(obj.__typename);
};

const BypassActor_possibleTypes: string[] = ['App', 'Team'];
export const isBypassActor = (obj?: { __typename?: any } | null): obj is BypassActor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBypassActor"');
  return BypassActor_possibleTypes.includes(obj.__typename);
};

const BypassForcePushAllowance_possibleTypes: string[] = ['BypassForcePushAllowance'];
export const isBypassForcePushAllowance = (
  obj?: { __typename?: any } | null,
): obj is BypassForcePushAllowance => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBypassForcePushAllowance"');
  return BypassForcePushAllowance_possibleTypes.includes(obj.__typename);
};

const BypassForcePushAllowanceConnection_possibleTypes: string[] = [
  'BypassForcePushAllowanceConnection',
];
export const isBypassForcePushAllowanceConnection = (
  obj?: { __typename?: any } | null,
): obj is BypassForcePushAllowanceConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBypassForcePushAllowanceConnection"');
  return BypassForcePushAllowanceConnection_possibleTypes.includes(obj.__typename);
};

const BypassForcePushAllowanceEdge_possibleTypes: string[] = ['BypassForcePushAllowanceEdge'];
export const isBypassForcePushAllowanceEdge = (
  obj?: { __typename?: any } | null,
): obj is BypassForcePushAllowanceEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBypassForcePushAllowanceEdge"');
  return BypassForcePushAllowanceEdge_possibleTypes.includes(obj.__typename);
};

const BypassPullRequestAllowance_possibleTypes: string[] = ['BypassPullRequestAllowance'];
export const isBypassPullRequestAllowance = (
  obj?: { __typename?: any } | null,
): obj is BypassPullRequestAllowance => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isBypassPullRequestAllowance"');
  return BypassPullRequestAllowance_possibleTypes.includes(obj.__typename);
};

const BypassPullRequestAllowanceConnection_possibleTypes: string[] = [
  'BypassPullRequestAllowanceConnection',
];
export const isBypassPullRequestAllowanceConnection = (
  obj?: { __typename?: any } | null,
): obj is BypassPullRequestAllowanceConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBypassPullRequestAllowanceConnection"');
  return BypassPullRequestAllowanceConnection_possibleTypes.includes(obj.__typename);
};

const BypassPullRequestAllowanceEdge_possibleTypes: string[] = ['BypassPullRequestAllowanceEdge'];
export const isBypassPullRequestAllowanceEdge = (
  obj?: { __typename?: any } | null,
): obj is BypassPullRequestAllowanceEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isBypassPullRequestAllowanceEdge"');
  return BypassPullRequestAllowanceEdge_possibleTypes.includes(obj.__typename);
};

const CVSS_possibleTypes: string[] = ['CVSS'];
export const isCVSS = (obj?: { __typename?: any } | null): obj is CVSS => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCVSS"');
  return CVSS_possibleTypes.includes(obj.__typename);
};

const CWE_possibleTypes: string[] = ['CWE'];
export const isCWE = (obj?: { __typename?: any } | null): obj is CWE => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCWE"');
  return CWE_possibleTypes.includes(obj.__typename);
};

const CWEConnection_possibleTypes: string[] = ['CWEConnection'];
export const isCWEConnection = (obj?: { __typename?: any } | null): obj is CWEConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCWEConnection"');
  return CWEConnection_possibleTypes.includes(obj.__typename);
};

const CWEEdge_possibleTypes: string[] = ['CWEEdge'];
export const isCWEEdge = (obj?: { __typename?: any } | null): obj is CWEEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCWEEdge"');
  return CWEEdge_possibleTypes.includes(obj.__typename);
};

const CancelEnterpriseAdminInvitationPayload_possibleTypes: string[] = [
  'CancelEnterpriseAdminInvitationPayload',
];
export const isCancelEnterpriseAdminInvitationPayload = (
  obj?: { __typename?: any } | null,
): obj is CancelEnterpriseAdminInvitationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCancelEnterpriseAdminInvitationPayload"');
  return CancelEnterpriseAdminInvitationPayload_possibleTypes.includes(obj.__typename);
};

const CancelSponsorshipPayload_possibleTypes: string[] = ['CancelSponsorshipPayload'];
export const isCancelSponsorshipPayload = (
  obj?: { __typename?: any } | null,
): obj is CancelSponsorshipPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCancelSponsorshipPayload"');
  return CancelSponsorshipPayload_possibleTypes.includes(obj.__typename);
};

const ChangeUserStatusPayload_possibleTypes: string[] = ['ChangeUserStatusPayload'];
export const isChangeUserStatusPayload = (
  obj?: { __typename?: any } | null,
): obj is ChangeUserStatusPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isChangeUserStatusPayload"');
  return ChangeUserStatusPayload_possibleTypes.includes(obj.__typename);
};

const CheckAnnotation_possibleTypes: string[] = ['CheckAnnotation'];
export const isCheckAnnotation = (obj?: { __typename?: any } | null): obj is CheckAnnotation => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckAnnotation"');
  return CheckAnnotation_possibleTypes.includes(obj.__typename);
};

const CheckAnnotationConnection_possibleTypes: string[] = ['CheckAnnotationConnection'];
export const isCheckAnnotationConnection = (
  obj?: { __typename?: any } | null,
): obj is CheckAnnotationConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckAnnotationConnection"');
  return CheckAnnotationConnection_possibleTypes.includes(obj.__typename);
};

const CheckAnnotationEdge_possibleTypes: string[] = ['CheckAnnotationEdge'];
export const isCheckAnnotationEdge = (
  obj?: { __typename?: any } | null,
): obj is CheckAnnotationEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckAnnotationEdge"');
  return CheckAnnotationEdge_possibleTypes.includes(obj.__typename);
};

const CheckAnnotationPosition_possibleTypes: string[] = ['CheckAnnotationPosition'];
export const isCheckAnnotationPosition = (
  obj?: { __typename?: any } | null,
): obj is CheckAnnotationPosition => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckAnnotationPosition"');
  return CheckAnnotationPosition_possibleTypes.includes(obj.__typename);
};

const CheckAnnotationSpan_possibleTypes: string[] = ['CheckAnnotationSpan'];
export const isCheckAnnotationSpan = (
  obj?: { __typename?: any } | null,
): obj is CheckAnnotationSpan => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckAnnotationSpan"');
  return CheckAnnotationSpan_possibleTypes.includes(obj.__typename);
};

const CheckRun_possibleTypes: string[] = ['CheckRun'];
export const isCheckRun = (obj?: { __typename?: any } | null): obj is CheckRun => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckRun"');
  return CheckRun_possibleTypes.includes(obj.__typename);
};

const CheckRunConnection_possibleTypes: string[] = ['CheckRunConnection'];
export const isCheckRunConnection = (
  obj?: { __typename?: any } | null,
): obj is CheckRunConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckRunConnection"');
  return CheckRunConnection_possibleTypes.includes(obj.__typename);
};

const CheckRunEdge_possibleTypes: string[] = ['CheckRunEdge'];
export const isCheckRunEdge = (obj?: { __typename?: any } | null): obj is CheckRunEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckRunEdge"');
  return CheckRunEdge_possibleTypes.includes(obj.__typename);
};

const CheckRunStateCount_possibleTypes: string[] = ['CheckRunStateCount'];
export const isCheckRunStateCount = (
  obj?: { __typename?: any } | null,
): obj is CheckRunStateCount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckRunStateCount"');
  return CheckRunStateCount_possibleTypes.includes(obj.__typename);
};

const CheckStep_possibleTypes: string[] = ['CheckStep'];
export const isCheckStep = (obj?: { __typename?: any } | null): obj is CheckStep => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckStep"');
  return CheckStep_possibleTypes.includes(obj.__typename);
};

const CheckStepConnection_possibleTypes: string[] = ['CheckStepConnection'];
export const isCheckStepConnection = (
  obj?: { __typename?: any } | null,
): obj is CheckStepConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckStepConnection"');
  return CheckStepConnection_possibleTypes.includes(obj.__typename);
};

const CheckStepEdge_possibleTypes: string[] = ['CheckStepEdge'];
export const isCheckStepEdge = (obj?: { __typename?: any } | null): obj is CheckStepEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckStepEdge"');
  return CheckStepEdge_possibleTypes.includes(obj.__typename);
};

const CheckSuite_possibleTypes: string[] = ['CheckSuite'];
export const isCheckSuite = (obj?: { __typename?: any } | null): obj is CheckSuite => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckSuite"');
  return CheckSuite_possibleTypes.includes(obj.__typename);
};

const CheckSuiteConnection_possibleTypes: string[] = ['CheckSuiteConnection'];
export const isCheckSuiteConnection = (
  obj?: { __typename?: any } | null,
): obj is CheckSuiteConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckSuiteConnection"');
  return CheckSuiteConnection_possibleTypes.includes(obj.__typename);
};

const CheckSuiteEdge_possibleTypes: string[] = ['CheckSuiteEdge'];
export const isCheckSuiteEdge = (obj?: { __typename?: any } | null): obj is CheckSuiteEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCheckSuiteEdge"');
  return CheckSuiteEdge_possibleTypes.includes(obj.__typename);
};

const Claimable_possibleTypes: string[] = ['Mannequin', 'User'];
export const isClaimable = (obj?: { __typename?: any } | null): obj is Claimable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isClaimable"');
  return Claimable_possibleTypes.includes(obj.__typename);
};

const ClearLabelsFromLabelablePayload_possibleTypes: string[] = ['ClearLabelsFromLabelablePayload'];
export const isClearLabelsFromLabelablePayload = (
  obj?: { __typename?: any } | null,
): obj is ClearLabelsFromLabelablePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isClearLabelsFromLabelablePayload"');
  return ClearLabelsFromLabelablePayload_possibleTypes.includes(obj.__typename);
};

const ClearProjectV2ItemFieldValuePayload_possibleTypes: string[] = [
  'ClearProjectV2ItemFieldValuePayload',
];
export const isClearProjectV2ItemFieldValuePayload = (
  obj?: { __typename?: any } | null,
): obj is ClearProjectV2ItemFieldValuePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isClearProjectV2ItemFieldValuePayload"');
  return ClearProjectV2ItemFieldValuePayload_possibleTypes.includes(obj.__typename);
};

const CloneProjectPayload_possibleTypes: string[] = ['CloneProjectPayload'];
export const isCloneProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is CloneProjectPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCloneProjectPayload"');
  return CloneProjectPayload_possibleTypes.includes(obj.__typename);
};

const CloneTemplateRepositoryPayload_possibleTypes: string[] = ['CloneTemplateRepositoryPayload'];
export const isCloneTemplateRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is CloneTemplateRepositoryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCloneTemplateRepositoryPayload"');
  return CloneTemplateRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const Closable_possibleTypes: string[] = [
  'Discussion',
  'Issue',
  'Milestone',
  'Project',
  'ProjectV2',
  'PullRequest',
];
export const isClosable = (obj?: { __typename?: any } | null): obj is Closable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isClosable"');
  return Closable_possibleTypes.includes(obj.__typename);
};

const CloseDiscussionPayload_possibleTypes: string[] = ['CloseDiscussionPayload'];
export const isCloseDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is CloseDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCloseDiscussionPayload"');
  return CloseDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const CloseIssuePayload_possibleTypes: string[] = ['CloseIssuePayload'];
export const isCloseIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is CloseIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCloseIssuePayload"');
  return CloseIssuePayload_possibleTypes.includes(obj.__typename);
};

const ClosePullRequestPayload_possibleTypes: string[] = ['ClosePullRequestPayload'];
export const isClosePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is ClosePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isClosePullRequestPayload"');
  return ClosePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const ClosedEvent_possibleTypes: string[] = ['ClosedEvent'];
export const isClosedEvent = (obj?: { __typename?: any } | null): obj is ClosedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isClosedEvent"');
  return ClosedEvent_possibleTypes.includes(obj.__typename);
};

const Closer_possibleTypes: string[] = ['Commit', 'PullRequest'];
export const isCloser = (obj?: { __typename?: any } | null): obj is Closer => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCloser"');
  return Closer_possibleTypes.includes(obj.__typename);
};

const CodeOfConduct_possibleTypes: string[] = ['CodeOfConduct'];
export const isCodeOfConduct = (obj?: { __typename?: any } | null): obj is CodeOfConduct => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCodeOfConduct"');
  return CodeOfConduct_possibleTypes.includes(obj.__typename);
};

const Comment_possibleTypes: string[] = [
  'CommitComment',
  'Discussion',
  'DiscussionComment',
  'GistComment',
  'Issue',
  'IssueComment',
  'PullRequest',
  'PullRequestReview',
  'PullRequestReviewComment',
  'TeamDiscussion',
  'TeamDiscussionComment',
];
export const isComment = (obj?: { __typename?: any } | null): obj is Comment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isComment"');
  return Comment_possibleTypes.includes(obj.__typename);
};

const CommentDeletedEvent_possibleTypes: string[] = ['CommentDeletedEvent'];
export const isCommentDeletedEvent = (
  obj?: { __typename?: any } | null,
): obj is CommentDeletedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommentDeletedEvent"');
  return CommentDeletedEvent_possibleTypes.includes(obj.__typename);
};

const Commit_possibleTypes: string[] = ['Commit'];
export const isCommit = (obj?: { __typename?: any } | null): obj is Commit => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommit"');
  return Commit_possibleTypes.includes(obj.__typename);
};

const CommitAuthorEmailPatternParameters_possibleTypes: string[] = [
  'CommitAuthorEmailPatternParameters',
];
export const isCommitAuthorEmailPatternParameters = (
  obj?: { __typename?: any } | null,
): obj is CommitAuthorEmailPatternParameters => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCommitAuthorEmailPatternParameters"');
  return CommitAuthorEmailPatternParameters_possibleTypes.includes(obj.__typename);
};

const CommitComment_possibleTypes: string[] = ['CommitComment'];
export const isCommitComment = (obj?: { __typename?: any } | null): obj is CommitComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitComment"');
  return CommitComment_possibleTypes.includes(obj.__typename);
};

const CommitCommentConnection_possibleTypes: string[] = ['CommitCommentConnection'];
export const isCommitCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is CommitCommentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitCommentConnection"');
  return CommitCommentConnection_possibleTypes.includes(obj.__typename);
};

const CommitCommentEdge_possibleTypes: string[] = ['CommitCommentEdge'];
export const isCommitCommentEdge = (
  obj?: { __typename?: any } | null,
): obj is CommitCommentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitCommentEdge"');
  return CommitCommentEdge_possibleTypes.includes(obj.__typename);
};

const CommitCommentThread_possibleTypes: string[] = ['CommitCommentThread'];
export const isCommitCommentThread = (
  obj?: { __typename?: any } | null,
): obj is CommitCommentThread => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitCommentThread"');
  return CommitCommentThread_possibleTypes.includes(obj.__typename);
};

const CommitConnection_possibleTypes: string[] = ['CommitConnection'];
export const isCommitConnection = (obj?: { __typename?: any } | null): obj is CommitConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitConnection"');
  return CommitConnection_possibleTypes.includes(obj.__typename);
};

const CommitContributionsByRepository_possibleTypes: string[] = ['CommitContributionsByRepository'];
export const isCommitContributionsByRepository = (
  obj?: { __typename?: any } | null,
): obj is CommitContributionsByRepository => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCommitContributionsByRepository"');
  return CommitContributionsByRepository_possibleTypes.includes(obj.__typename);
};

const CommitEdge_possibleTypes: string[] = ['CommitEdge'];
export const isCommitEdge = (obj?: { __typename?: any } | null): obj is CommitEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitEdge"');
  return CommitEdge_possibleTypes.includes(obj.__typename);
};

const CommitHistoryConnection_possibleTypes: string[] = ['CommitHistoryConnection'];
export const isCommitHistoryConnection = (
  obj?: { __typename?: any } | null,
): obj is CommitHistoryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCommitHistoryConnection"');
  return CommitHistoryConnection_possibleTypes.includes(obj.__typename);
};

const CommitMessagePatternParameters_possibleTypes: string[] = ['CommitMessagePatternParameters'];
export const isCommitMessagePatternParameters = (
  obj?: { __typename?: any } | null,
): obj is CommitMessagePatternParameters => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCommitMessagePatternParameters"');
  return CommitMessagePatternParameters_possibleTypes.includes(obj.__typename);
};

const CommitterEmailPatternParameters_possibleTypes: string[] = ['CommitterEmailPatternParameters'];
export const isCommitterEmailPatternParameters = (
  obj?: { __typename?: any } | null,
): obj is CommitterEmailPatternParameters => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCommitterEmailPatternParameters"');
  return CommitterEmailPatternParameters_possibleTypes.includes(obj.__typename);
};

const Comparison_possibleTypes: string[] = ['Comparison'];
export const isComparison = (obj?: { __typename?: any } | null): obj is Comparison => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isComparison"');
  return Comparison_possibleTypes.includes(obj.__typename);
};

const ComparisonCommitConnection_possibleTypes: string[] = ['ComparisonCommitConnection'];
export const isComparisonCommitConnection = (
  obj?: { __typename?: any } | null,
): obj is ComparisonCommitConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isComparisonCommitConnection"');
  return ComparisonCommitConnection_possibleTypes.includes(obj.__typename);
};

const ConnectedEvent_possibleTypes: string[] = ['ConnectedEvent'];
export const isConnectedEvent = (obj?: { __typename?: any } | null): obj is ConnectedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isConnectedEvent"');
  return ConnectedEvent_possibleTypes.includes(obj.__typename);
};

const ContributingGuidelines_possibleTypes: string[] = ['ContributingGuidelines'];
export const isContributingGuidelines = (
  obj?: { __typename?: any } | null,
): obj is ContributingGuidelines => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributingGuidelines"');
  return ContributingGuidelines_possibleTypes.includes(obj.__typename);
};

const Contribution_possibleTypes: string[] = [
  'CreatedCommitContribution',
  'CreatedIssueContribution',
  'CreatedPullRequestContribution',
  'CreatedPullRequestReviewContribution',
  'CreatedRepositoryContribution',
  'JoinedGitHubContribution',
  'RestrictedContribution',
];
export const isContribution = (obj?: { __typename?: any } | null): obj is Contribution => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContribution"');
  return Contribution_possibleTypes.includes(obj.__typename);
};

const ContributionCalendar_possibleTypes: string[] = ['ContributionCalendar'];
export const isContributionCalendar = (
  obj?: { __typename?: any } | null,
): obj is ContributionCalendar => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributionCalendar"');
  return ContributionCalendar_possibleTypes.includes(obj.__typename);
};

const ContributionCalendarDay_possibleTypes: string[] = ['ContributionCalendarDay'];
export const isContributionCalendarDay = (
  obj?: { __typename?: any } | null,
): obj is ContributionCalendarDay => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributionCalendarDay"');
  return ContributionCalendarDay_possibleTypes.includes(obj.__typename);
};

const ContributionCalendarMonth_possibleTypes: string[] = ['ContributionCalendarMonth'];
export const isContributionCalendarMonth = (
  obj?: { __typename?: any } | null,
): obj is ContributionCalendarMonth => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributionCalendarMonth"');
  return ContributionCalendarMonth_possibleTypes.includes(obj.__typename);
};

const ContributionCalendarWeek_possibleTypes: string[] = ['ContributionCalendarWeek'];
export const isContributionCalendarWeek = (
  obj?: { __typename?: any } | null,
): obj is ContributionCalendarWeek => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributionCalendarWeek"');
  return ContributionCalendarWeek_possibleTypes.includes(obj.__typename);
};

const ContributionsCollection_possibleTypes: string[] = ['ContributionsCollection'];
export const isContributionsCollection = (
  obj?: { __typename?: any } | null,
): obj is ContributionsCollection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isContributionsCollection"');
  return ContributionsCollection_possibleTypes.includes(obj.__typename);
};

const ConvertProjectCardNoteToIssuePayload_possibleTypes: string[] = [
  'ConvertProjectCardNoteToIssuePayload',
];
export const isConvertProjectCardNoteToIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is ConvertProjectCardNoteToIssuePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isConvertProjectCardNoteToIssuePayload"');
  return ConvertProjectCardNoteToIssuePayload_possibleTypes.includes(obj.__typename);
};

const ConvertPullRequestToDraftPayload_possibleTypes: string[] = [
  'ConvertPullRequestToDraftPayload',
];
export const isConvertPullRequestToDraftPayload = (
  obj?: { __typename?: any } | null,
): obj is ConvertPullRequestToDraftPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isConvertPullRequestToDraftPayload"');
  return ConvertPullRequestToDraftPayload_possibleTypes.includes(obj.__typename);
};

const ConvertToDraftEvent_possibleTypes: string[] = ['ConvertToDraftEvent'];
export const isConvertToDraftEvent = (
  obj?: { __typename?: any } | null,
): obj is ConvertToDraftEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isConvertToDraftEvent"');
  return ConvertToDraftEvent_possibleTypes.includes(obj.__typename);
};

const ConvertedNoteToIssueEvent_possibleTypes: string[] = ['ConvertedNoteToIssueEvent'];
export const isConvertedNoteToIssueEvent = (
  obj?: { __typename?: any } | null,
): obj is ConvertedNoteToIssueEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isConvertedNoteToIssueEvent"');
  return ConvertedNoteToIssueEvent_possibleTypes.includes(obj.__typename);
};

const ConvertedToDiscussionEvent_possibleTypes: string[] = ['ConvertedToDiscussionEvent'];
export const isConvertedToDiscussionEvent = (
  obj?: { __typename?: any } | null,
): obj is ConvertedToDiscussionEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isConvertedToDiscussionEvent"');
  return ConvertedToDiscussionEvent_possibleTypes.includes(obj.__typename);
};

const CopyProjectV2Payload_possibleTypes: string[] = ['CopyProjectV2Payload'];
export const isCopyProjectV2Payload = (
  obj?: { __typename?: any } | null,
): obj is CopyProjectV2Payload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCopyProjectV2Payload"');
  return CopyProjectV2Payload_possibleTypes.includes(obj.__typename);
};

const CreateAttributionInvitationPayload_possibleTypes: string[] = [
  'CreateAttributionInvitationPayload',
];
export const isCreateAttributionInvitationPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateAttributionInvitationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateAttributionInvitationPayload"');
  return CreateAttributionInvitationPayload_possibleTypes.includes(obj.__typename);
};

const CreateBranchProtectionRulePayload_possibleTypes: string[] = [
  'CreateBranchProtectionRulePayload',
];
export const isCreateBranchProtectionRulePayload = (
  obj?: { __typename?: any } | null,
): obj is CreateBranchProtectionRulePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateBranchProtectionRulePayload"');
  return CreateBranchProtectionRulePayload_possibleTypes.includes(obj.__typename);
};

const CreateCheckRunPayload_possibleTypes: string[] = ['CreateCheckRunPayload'];
export const isCreateCheckRunPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateCheckRunPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateCheckRunPayload"');
  return CreateCheckRunPayload_possibleTypes.includes(obj.__typename);
};

const CreateCheckSuitePayload_possibleTypes: string[] = ['CreateCheckSuitePayload'];
export const isCreateCheckSuitePayload = (
  obj?: { __typename?: any } | null,
): obj is CreateCheckSuitePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateCheckSuitePayload"');
  return CreateCheckSuitePayload_possibleTypes.includes(obj.__typename);
};

const CreateCommitOnBranchPayload_possibleTypes: string[] = ['CreateCommitOnBranchPayload'];
export const isCreateCommitOnBranchPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateCommitOnBranchPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateCommitOnBranchPayload"');
  return CreateCommitOnBranchPayload_possibleTypes.includes(obj.__typename);
};

const CreateDiscussionPayload_possibleTypes: string[] = ['CreateDiscussionPayload'];
export const isCreateDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateDiscussionPayload"');
  return CreateDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const CreateEnterpriseOrganizationPayload_possibleTypes: string[] = [
  'CreateEnterpriseOrganizationPayload',
];
export const isCreateEnterpriseOrganizationPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateEnterpriseOrganizationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateEnterpriseOrganizationPayload"');
  return CreateEnterpriseOrganizationPayload_possibleTypes.includes(obj.__typename);
};

const CreateEnvironmentPayload_possibleTypes: string[] = ['CreateEnvironmentPayload'];
export const isCreateEnvironmentPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateEnvironmentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateEnvironmentPayload"');
  return CreateEnvironmentPayload_possibleTypes.includes(obj.__typename);
};

const CreateIpAllowListEntryPayload_possibleTypes: string[] = ['CreateIpAllowListEntryPayload'];
export const isCreateIpAllowListEntryPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateIpAllowListEntryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateIpAllowListEntryPayload"');
  return CreateIpAllowListEntryPayload_possibleTypes.includes(obj.__typename);
};

const CreateIssuePayload_possibleTypes: string[] = ['CreateIssuePayload'];
export const isCreateIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is CreateIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateIssuePayload"');
  return CreateIssuePayload_possibleTypes.includes(obj.__typename);
};

const CreateLinkedBranchPayload_possibleTypes: string[] = ['CreateLinkedBranchPayload'];
export const isCreateLinkedBranchPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateLinkedBranchPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateLinkedBranchPayload"');
  return CreateLinkedBranchPayload_possibleTypes.includes(obj.__typename);
};

const CreateMigrationSourcePayload_possibleTypes: string[] = ['CreateMigrationSourcePayload'];
export const isCreateMigrationSourcePayload = (
  obj?: { __typename?: any } | null,
): obj is CreateMigrationSourcePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateMigrationSourcePayload"');
  return CreateMigrationSourcePayload_possibleTypes.includes(obj.__typename);
};

const CreateProjectPayload_possibleTypes: string[] = ['CreateProjectPayload'];
export const isCreateProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateProjectPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateProjectPayload"');
  return CreateProjectPayload_possibleTypes.includes(obj.__typename);
};

const CreateProjectV2FieldPayload_possibleTypes: string[] = ['CreateProjectV2FieldPayload'];
export const isCreateProjectV2FieldPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateProjectV2FieldPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateProjectV2FieldPayload"');
  return CreateProjectV2FieldPayload_possibleTypes.includes(obj.__typename);
};

const CreateProjectV2Payload_possibleTypes: string[] = ['CreateProjectV2Payload'];
export const isCreateProjectV2Payload = (
  obj?: { __typename?: any } | null,
): obj is CreateProjectV2Payload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateProjectV2Payload"');
  return CreateProjectV2Payload_possibleTypes.includes(obj.__typename);
};

const CreatePullRequestPayload_possibleTypes: string[] = ['CreatePullRequestPayload'];
export const isCreatePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is CreatePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreatePullRequestPayload"');
  return CreatePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const CreateRefPayload_possibleTypes: string[] = ['CreateRefPayload'];
export const isCreateRefPayload = (obj?: { __typename?: any } | null): obj is CreateRefPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateRefPayload"');
  return CreateRefPayload_possibleTypes.includes(obj.__typename);
};

const CreateRepositoryPayload_possibleTypes: string[] = ['CreateRepositoryPayload'];
export const isCreateRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateRepositoryPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateRepositoryPayload"');
  return CreateRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const CreateRepositoryRulesetPayload_possibleTypes: string[] = ['CreateRepositoryRulesetPayload'];
export const isCreateRepositoryRulesetPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateRepositoryRulesetPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateRepositoryRulesetPayload"');
  return CreateRepositoryRulesetPayload_possibleTypes.includes(obj.__typename);
};

const CreateSponsorsListingPayload_possibleTypes: string[] = ['CreateSponsorsListingPayload'];
export const isCreateSponsorsListingPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateSponsorsListingPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateSponsorsListingPayload"');
  return CreateSponsorsListingPayload_possibleTypes.includes(obj.__typename);
};

const CreateSponsorsTierPayload_possibleTypes: string[] = ['CreateSponsorsTierPayload'];
export const isCreateSponsorsTierPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateSponsorsTierPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateSponsorsTierPayload"');
  return CreateSponsorsTierPayload_possibleTypes.includes(obj.__typename);
};

const CreateSponsorshipPayload_possibleTypes: string[] = ['CreateSponsorshipPayload'];
export const isCreateSponsorshipPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateSponsorshipPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateSponsorshipPayload"');
  return CreateSponsorshipPayload_possibleTypes.includes(obj.__typename);
};

const CreateSponsorshipsPayload_possibleTypes: string[] = ['CreateSponsorshipsPayload'];
export const isCreateSponsorshipsPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateSponsorshipsPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateSponsorshipsPayload"');
  return CreateSponsorshipsPayload_possibleTypes.includes(obj.__typename);
};

const CreateTeamDiscussionCommentPayload_possibleTypes: string[] = [
  'CreateTeamDiscussionCommentPayload',
];
export const isCreateTeamDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateTeamDiscussionCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreateTeamDiscussionCommentPayload"');
  return CreateTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const CreateTeamDiscussionPayload_possibleTypes: string[] = ['CreateTeamDiscussionPayload'];
export const isCreateTeamDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is CreateTeamDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreateTeamDiscussionPayload"');
  return CreateTeamDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const CreatedCommitContribution_possibleTypes: string[] = ['CreatedCommitContribution'];
export const isCreatedCommitContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedCommitContribution => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreatedCommitContribution"');
  return CreatedCommitContribution_possibleTypes.includes(obj.__typename);
};

const CreatedCommitContributionConnection_possibleTypes: string[] = [
  'CreatedCommitContributionConnection',
];
export const isCreatedCommitContributionConnection = (
  obj?: { __typename?: any } | null,
): obj is CreatedCommitContributionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedCommitContributionConnection"');
  return CreatedCommitContributionConnection_possibleTypes.includes(obj.__typename);
};

const CreatedCommitContributionEdge_possibleTypes: string[] = ['CreatedCommitContributionEdge'];
export const isCreatedCommitContributionEdge = (
  obj?: { __typename?: any } | null,
): obj is CreatedCommitContributionEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedCommitContributionEdge"');
  return CreatedCommitContributionEdge_possibleTypes.includes(obj.__typename);
};

const CreatedIssueContribution_possibleTypes: string[] = ['CreatedIssueContribution'];
export const isCreatedIssueContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedIssueContribution => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCreatedIssueContribution"');
  return CreatedIssueContribution_possibleTypes.includes(obj.__typename);
};

const CreatedIssueContributionConnection_possibleTypes: string[] = [
  'CreatedIssueContributionConnection',
];
export const isCreatedIssueContributionConnection = (
  obj?: { __typename?: any } | null,
): obj is CreatedIssueContributionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedIssueContributionConnection"');
  return CreatedIssueContributionConnection_possibleTypes.includes(obj.__typename);
};

const CreatedIssueContributionEdge_possibleTypes: string[] = ['CreatedIssueContributionEdge'];
export const isCreatedIssueContributionEdge = (
  obj?: { __typename?: any } | null,
): obj is CreatedIssueContributionEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedIssueContributionEdge"');
  return CreatedIssueContributionEdge_possibleTypes.includes(obj.__typename);
};

const CreatedIssueOrRestrictedContribution_possibleTypes: string[] = [
  'CreatedIssueContribution',
  'RestrictedContribution',
];
export const isCreatedIssueOrRestrictedContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedIssueOrRestrictedContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedIssueOrRestrictedContribution"');
  return CreatedIssueOrRestrictedContribution_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestContribution_possibleTypes: string[] = ['CreatedPullRequestContribution'];
export const isCreatedPullRequestContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestContribution"');
  return CreatedPullRequestContribution_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestContributionConnection_possibleTypes: string[] = [
  'CreatedPullRequestContributionConnection',
];
export const isCreatedPullRequestContributionConnection = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestContributionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestContributionConnection"');
  return CreatedPullRequestContributionConnection_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestContributionEdge_possibleTypes: string[] = [
  'CreatedPullRequestContributionEdge',
];
export const isCreatedPullRequestContributionEdge = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestContributionEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestContributionEdge"');
  return CreatedPullRequestContributionEdge_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestOrRestrictedContribution_possibleTypes: string[] = [
  'CreatedPullRequestContribution',
  'RestrictedContribution',
];
export const isCreatedPullRequestOrRestrictedContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestOrRestrictedContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestOrRestrictedContribution"');
  return CreatedPullRequestOrRestrictedContribution_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestReviewContribution_possibleTypes: string[] = [
  'CreatedPullRequestReviewContribution',
];
export const isCreatedPullRequestReviewContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestReviewContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestReviewContribution"');
  return CreatedPullRequestReviewContribution_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestReviewContributionConnection_possibleTypes: string[] = [
  'CreatedPullRequestReviewContributionConnection',
];
export const isCreatedPullRequestReviewContributionConnection = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestReviewContributionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestReviewContributionConnection"');
  return CreatedPullRequestReviewContributionConnection_possibleTypes.includes(obj.__typename);
};

const CreatedPullRequestReviewContributionEdge_possibleTypes: string[] = [
  'CreatedPullRequestReviewContributionEdge',
];
export const isCreatedPullRequestReviewContributionEdge = (
  obj?: { __typename?: any } | null,
): obj is CreatedPullRequestReviewContributionEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedPullRequestReviewContributionEdge"');
  return CreatedPullRequestReviewContributionEdge_possibleTypes.includes(obj.__typename);
};

const CreatedRepositoryContribution_possibleTypes: string[] = ['CreatedRepositoryContribution'];
export const isCreatedRepositoryContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedRepositoryContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedRepositoryContribution"');
  return CreatedRepositoryContribution_possibleTypes.includes(obj.__typename);
};

const CreatedRepositoryContributionConnection_possibleTypes: string[] = [
  'CreatedRepositoryContributionConnection',
];
export const isCreatedRepositoryContributionConnection = (
  obj?: { __typename?: any } | null,
): obj is CreatedRepositoryContributionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedRepositoryContributionConnection"');
  return CreatedRepositoryContributionConnection_possibleTypes.includes(obj.__typename);
};

const CreatedRepositoryContributionEdge_possibleTypes: string[] = [
  'CreatedRepositoryContributionEdge',
];
export const isCreatedRepositoryContributionEdge = (
  obj?: { __typename?: any } | null,
): obj is CreatedRepositoryContributionEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedRepositoryContributionEdge"');
  return CreatedRepositoryContributionEdge_possibleTypes.includes(obj.__typename);
};

const CreatedRepositoryOrRestrictedContribution_possibleTypes: string[] = [
  'CreatedRepositoryContribution',
  'RestrictedContribution',
];
export const isCreatedRepositoryOrRestrictedContribution = (
  obj?: { __typename?: any } | null,
): obj is CreatedRepositoryOrRestrictedContribution => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isCreatedRepositoryOrRestrictedContribution"');
  return CreatedRepositoryOrRestrictedContribution_possibleTypes.includes(obj.__typename);
};

const CrossReferencedEvent_possibleTypes: string[] = ['CrossReferencedEvent'];
export const isCrossReferencedEvent = (
  obj?: { __typename?: any } | null,
): obj is CrossReferencedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isCrossReferencedEvent"');
  return CrossReferencedEvent_possibleTypes.includes(obj.__typename);
};

const DeclineTopicSuggestionPayload_possibleTypes: string[] = ['DeclineTopicSuggestionPayload'];
export const isDeclineTopicSuggestionPayload = (
  obj?: { __typename?: any } | null,
): obj is DeclineTopicSuggestionPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeclineTopicSuggestionPayload"');
  return DeclineTopicSuggestionPayload_possibleTypes.includes(obj.__typename);
};

const Deletable_possibleTypes: string[] = [
  'CommitComment',
  'Discussion',
  'DiscussionComment',
  'GistComment',
  'Issue',
  'IssueComment',
  'PullRequestReview',
  'PullRequestReviewComment',
  'TeamDiscussion',
  'TeamDiscussionComment',
];
export const isDeletable = (obj?: { __typename?: any } | null): obj is Deletable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeletable"');
  return Deletable_possibleTypes.includes(obj.__typename);
};

const DeleteBranchProtectionRulePayload_possibleTypes: string[] = [
  'DeleteBranchProtectionRulePayload',
];
export const isDeleteBranchProtectionRulePayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteBranchProtectionRulePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteBranchProtectionRulePayload"');
  return DeleteBranchProtectionRulePayload_possibleTypes.includes(obj.__typename);
};

const DeleteDeploymentPayload_possibleTypes: string[] = ['DeleteDeploymentPayload'];
export const isDeleteDeploymentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteDeploymentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteDeploymentPayload"');
  return DeleteDeploymentPayload_possibleTypes.includes(obj.__typename);
};

const DeleteDiscussionCommentPayload_possibleTypes: string[] = ['DeleteDiscussionCommentPayload'];
export const isDeleteDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteDiscussionCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteDiscussionCommentPayload"');
  return DeleteDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const DeleteDiscussionPayload_possibleTypes: string[] = ['DeleteDiscussionPayload'];
export const isDeleteDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteDiscussionPayload"');
  return DeleteDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const DeleteEnvironmentPayload_possibleTypes: string[] = ['DeleteEnvironmentPayload'];
export const isDeleteEnvironmentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteEnvironmentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteEnvironmentPayload"');
  return DeleteEnvironmentPayload_possibleTypes.includes(obj.__typename);
};

const DeleteIpAllowListEntryPayload_possibleTypes: string[] = ['DeleteIpAllowListEntryPayload'];
export const isDeleteIpAllowListEntryPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteIpAllowListEntryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteIpAllowListEntryPayload"');
  return DeleteIpAllowListEntryPayload_possibleTypes.includes(obj.__typename);
};

const DeleteIssueCommentPayload_possibleTypes: string[] = ['DeleteIssueCommentPayload'];
export const isDeleteIssueCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteIssueCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteIssueCommentPayload"');
  return DeleteIssueCommentPayload_possibleTypes.includes(obj.__typename);
};

const DeleteIssuePayload_possibleTypes: string[] = ['DeleteIssuePayload'];
export const isDeleteIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteIssuePayload"');
  return DeleteIssuePayload_possibleTypes.includes(obj.__typename);
};

const DeleteLinkedBranchPayload_possibleTypes: string[] = ['DeleteLinkedBranchPayload'];
export const isDeleteLinkedBranchPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteLinkedBranchPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteLinkedBranchPayload"');
  return DeleteLinkedBranchPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectCardPayload_possibleTypes: string[] = ['DeleteProjectCardPayload'];
export const isDeleteProjectCardPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectCardPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectCardPayload"');
  return DeleteProjectCardPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectColumnPayload_possibleTypes: string[] = ['DeleteProjectColumnPayload'];
export const isDeleteProjectColumnPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectColumnPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectColumnPayload"');
  return DeleteProjectColumnPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectPayload_possibleTypes: string[] = ['DeleteProjectPayload'];
export const isDeleteProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectPayload"');
  return DeleteProjectPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectV2FieldPayload_possibleTypes: string[] = ['DeleteProjectV2FieldPayload'];
export const isDeleteProjectV2FieldPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectV2FieldPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectV2FieldPayload"');
  return DeleteProjectV2FieldPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectV2ItemPayload_possibleTypes: string[] = ['DeleteProjectV2ItemPayload'];
export const isDeleteProjectV2ItemPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectV2ItemPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectV2ItemPayload"');
  return DeleteProjectV2ItemPayload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectV2Payload_possibleTypes: string[] = ['DeleteProjectV2Payload'];
export const isDeleteProjectV2Payload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectV2Payload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteProjectV2Payload"');
  return DeleteProjectV2Payload_possibleTypes.includes(obj.__typename);
};

const DeleteProjectV2WorkflowPayload_possibleTypes: string[] = ['DeleteProjectV2WorkflowPayload'];
export const isDeleteProjectV2WorkflowPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteProjectV2WorkflowPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteProjectV2WorkflowPayload"');
  return DeleteProjectV2WorkflowPayload_possibleTypes.includes(obj.__typename);
};

const DeletePullRequestReviewCommentPayload_possibleTypes: string[] = [
  'DeletePullRequestReviewCommentPayload',
];
export const isDeletePullRequestReviewCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeletePullRequestReviewCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeletePullRequestReviewCommentPayload"');
  return DeletePullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename);
};

const DeletePullRequestReviewPayload_possibleTypes: string[] = ['DeletePullRequestReviewPayload'];
export const isDeletePullRequestReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is DeletePullRequestReviewPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeletePullRequestReviewPayload"');
  return DeletePullRequestReviewPayload_possibleTypes.includes(obj.__typename);
};

const DeleteRefPayload_possibleTypes: string[] = ['DeleteRefPayload'];
export const isDeleteRefPayload = (obj?: { __typename?: any } | null): obj is DeleteRefPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteRefPayload"');
  return DeleteRefPayload_possibleTypes.includes(obj.__typename);
};

const DeleteRepositoryRulesetPayload_possibleTypes: string[] = ['DeleteRepositoryRulesetPayload'];
export const isDeleteRepositoryRulesetPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteRepositoryRulesetPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteRepositoryRulesetPayload"');
  return DeleteRepositoryRulesetPayload_possibleTypes.includes(obj.__typename);
};

const DeleteTeamDiscussionCommentPayload_possibleTypes: string[] = [
  'DeleteTeamDiscussionCommentPayload',
];
export const isDeleteTeamDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteTeamDiscussionCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteTeamDiscussionCommentPayload"');
  return DeleteTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const DeleteTeamDiscussionPayload_possibleTypes: string[] = ['DeleteTeamDiscussionPayload'];
export const isDeleteTeamDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteTeamDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeleteTeamDiscussionPayload"');
  return DeleteTeamDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const DeleteVerifiableDomainPayload_possibleTypes: string[] = ['DeleteVerifiableDomainPayload'];
export const isDeleteVerifiableDomainPayload = (
  obj?: { __typename?: any } | null,
): obj is DeleteVerifiableDomainPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeleteVerifiableDomainPayload"');
  return DeleteVerifiableDomainPayload_possibleTypes.includes(obj.__typename);
};

const DemilestonedEvent_possibleTypes: string[] = ['DemilestonedEvent'];
export const isDemilestonedEvent = (
  obj?: { __typename?: any } | null,
): obj is DemilestonedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDemilestonedEvent"');
  return DemilestonedEvent_possibleTypes.includes(obj.__typename);
};

const DependabotUpdate_possibleTypes: string[] = ['DependabotUpdate'];
export const isDependabotUpdate = (obj?: { __typename?: any } | null): obj is DependabotUpdate => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDependabotUpdate"');
  return DependabotUpdate_possibleTypes.includes(obj.__typename);
};

const DependabotUpdateError_possibleTypes: string[] = ['DependabotUpdateError'];
export const isDependabotUpdateError = (
  obj?: { __typename?: any } | null,
): obj is DependabotUpdateError => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDependabotUpdateError"');
  return DependabotUpdateError_possibleTypes.includes(obj.__typename);
};

const DeployKey_possibleTypes: string[] = ['DeployKey'];
export const isDeployKey = (obj?: { __typename?: any } | null): obj is DeployKey => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeployKey"');
  return DeployKey_possibleTypes.includes(obj.__typename);
};

const DeployKeyConnection_possibleTypes: string[] = ['DeployKeyConnection'];
export const isDeployKeyConnection = (
  obj?: { __typename?: any } | null,
): obj is DeployKeyConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeployKeyConnection"');
  return DeployKeyConnection_possibleTypes.includes(obj.__typename);
};

const DeployKeyEdge_possibleTypes: string[] = ['DeployKeyEdge'];
export const isDeployKeyEdge = (obj?: { __typename?: any } | null): obj is DeployKeyEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeployKeyEdge"');
  return DeployKeyEdge_possibleTypes.includes(obj.__typename);
};

const DeployedEvent_possibleTypes: string[] = ['DeployedEvent'];
export const isDeployedEvent = (obj?: { __typename?: any } | null): obj is DeployedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeployedEvent"');
  return DeployedEvent_possibleTypes.includes(obj.__typename);
};

const Deployment_possibleTypes: string[] = ['Deployment'];
export const isDeployment = (obj?: { __typename?: any } | null): obj is Deployment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeployment"');
  return Deployment_possibleTypes.includes(obj.__typename);
};

const DeploymentConnection_possibleTypes: string[] = ['DeploymentConnection'];
export const isDeploymentConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentConnection"');
  return DeploymentConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentEdge_possibleTypes: string[] = ['DeploymentEdge'];
export const isDeploymentEdge = (obj?: { __typename?: any } | null): obj is DeploymentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentEdge"');
  return DeploymentEdge_possibleTypes.includes(obj.__typename);
};

const DeploymentEnvironmentChangedEvent_possibleTypes: string[] = [
  'DeploymentEnvironmentChangedEvent',
];
export const isDeploymentEnvironmentChangedEvent = (
  obj?: { __typename?: any } | null,
): obj is DeploymentEnvironmentChangedEvent => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeploymentEnvironmentChangedEvent"');
  return DeploymentEnvironmentChangedEvent_possibleTypes.includes(obj.__typename);
};

const DeploymentProtectionRule_possibleTypes: string[] = ['DeploymentProtectionRule'];
export const isDeploymentProtectionRule = (
  obj?: { __typename?: any } | null,
): obj is DeploymentProtectionRule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentProtectionRule"');
  return DeploymentProtectionRule_possibleTypes.includes(obj.__typename);
};

const DeploymentProtectionRuleConnection_possibleTypes: string[] = [
  'DeploymentProtectionRuleConnection',
];
export const isDeploymentProtectionRuleConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentProtectionRuleConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeploymentProtectionRuleConnection"');
  return DeploymentProtectionRuleConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentProtectionRuleEdge_possibleTypes: string[] = ['DeploymentProtectionRuleEdge'];
export const isDeploymentProtectionRuleEdge = (
  obj?: { __typename?: any } | null,
): obj is DeploymentProtectionRuleEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeploymentProtectionRuleEdge"');
  return DeploymentProtectionRuleEdge_possibleTypes.includes(obj.__typename);
};

const DeploymentRequest_possibleTypes: string[] = ['DeploymentRequest'];
export const isDeploymentRequest = (
  obj?: { __typename?: any } | null,
): obj is DeploymentRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentRequest"');
  return DeploymentRequest_possibleTypes.includes(obj.__typename);
};

const DeploymentRequestConnection_possibleTypes: string[] = ['DeploymentRequestConnection'];
export const isDeploymentRequestConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentRequestConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentRequestConnection"');
  return DeploymentRequestConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentRequestEdge_possibleTypes: string[] = ['DeploymentRequestEdge'];
export const isDeploymentRequestEdge = (
  obj?: { __typename?: any } | null,
): obj is DeploymentRequestEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentRequestEdge"');
  return DeploymentRequestEdge_possibleTypes.includes(obj.__typename);
};

const DeploymentReview_possibleTypes: string[] = ['DeploymentReview'];
export const isDeploymentReview = (obj?: { __typename?: any } | null): obj is DeploymentReview => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentReview"');
  return DeploymentReview_possibleTypes.includes(obj.__typename);
};

const DeploymentReviewConnection_possibleTypes: string[] = ['DeploymentReviewConnection'];
export const isDeploymentReviewConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentReviewConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentReviewConnection"');
  return DeploymentReviewConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentReviewEdge_possibleTypes: string[] = ['DeploymentReviewEdge'];
export const isDeploymentReviewEdge = (
  obj?: { __typename?: any } | null,
): obj is DeploymentReviewEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentReviewEdge"');
  return DeploymentReviewEdge_possibleTypes.includes(obj.__typename);
};

const DeploymentReviewer_possibleTypes: string[] = ['Team', 'User'];
export const isDeploymentReviewer = (
  obj?: { __typename?: any } | null,
): obj is DeploymentReviewer => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentReviewer"');
  return DeploymentReviewer_possibleTypes.includes(obj.__typename);
};

const DeploymentReviewerConnection_possibleTypes: string[] = ['DeploymentReviewerConnection'];
export const isDeploymentReviewerConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentReviewerConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDeploymentReviewerConnection"');
  return DeploymentReviewerConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentReviewerEdge_possibleTypes: string[] = ['DeploymentReviewerEdge'];
export const isDeploymentReviewerEdge = (
  obj?: { __typename?: any } | null,
): obj is DeploymentReviewerEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentReviewerEdge"');
  return DeploymentReviewerEdge_possibleTypes.includes(obj.__typename);
};

const DeploymentStatus_possibleTypes: string[] = ['DeploymentStatus'];
export const isDeploymentStatus = (obj?: { __typename?: any } | null): obj is DeploymentStatus => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentStatus"');
  return DeploymentStatus_possibleTypes.includes(obj.__typename);
};

const DeploymentStatusConnection_possibleTypes: string[] = ['DeploymentStatusConnection'];
export const isDeploymentStatusConnection = (
  obj?: { __typename?: any } | null,
): obj is DeploymentStatusConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentStatusConnection"');
  return DeploymentStatusConnection_possibleTypes.includes(obj.__typename);
};

const DeploymentStatusEdge_possibleTypes: string[] = ['DeploymentStatusEdge'];
export const isDeploymentStatusEdge = (
  obj?: { __typename?: any } | null,
): obj is DeploymentStatusEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDeploymentStatusEdge"');
  return DeploymentStatusEdge_possibleTypes.includes(obj.__typename);
};

const DequeuePullRequestPayload_possibleTypes: string[] = ['DequeuePullRequestPayload'];
export const isDequeuePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is DequeuePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDequeuePullRequestPayload"');
  return DequeuePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const DisablePullRequestAutoMergePayload_possibleTypes: string[] = [
  'DisablePullRequestAutoMergePayload',
];
export const isDisablePullRequestAutoMergePayload = (
  obj?: { __typename?: any } | null,
): obj is DisablePullRequestAutoMergePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDisablePullRequestAutoMergePayload"');
  return DisablePullRequestAutoMergePayload_possibleTypes.includes(obj.__typename);
};

const DisconnectedEvent_possibleTypes: string[] = ['DisconnectedEvent'];
export const isDisconnectedEvent = (
  obj?: { __typename?: any } | null,
): obj is DisconnectedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDisconnectedEvent"');
  return DisconnectedEvent_possibleTypes.includes(obj.__typename);
};

const Discussion_possibleTypes: string[] = ['Discussion'];
export const isDiscussion = (obj?: { __typename?: any } | null): obj is Discussion => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussion"');
  return Discussion_possibleTypes.includes(obj.__typename);
};

const DiscussionCategory_possibleTypes: string[] = ['DiscussionCategory'];
export const isDiscussionCategory = (
  obj?: { __typename?: any } | null,
): obj is DiscussionCategory => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionCategory"');
  return DiscussionCategory_possibleTypes.includes(obj.__typename);
};

const DiscussionCategoryConnection_possibleTypes: string[] = ['DiscussionCategoryConnection'];
export const isDiscussionCategoryConnection = (
  obj?: { __typename?: any } | null,
): obj is DiscussionCategoryConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDiscussionCategoryConnection"');
  return DiscussionCategoryConnection_possibleTypes.includes(obj.__typename);
};

const DiscussionCategoryEdge_possibleTypes: string[] = ['DiscussionCategoryEdge'];
export const isDiscussionCategoryEdge = (
  obj?: { __typename?: any } | null,
): obj is DiscussionCategoryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionCategoryEdge"');
  return DiscussionCategoryEdge_possibleTypes.includes(obj.__typename);
};

const DiscussionComment_possibleTypes: string[] = ['DiscussionComment'];
export const isDiscussionComment = (
  obj?: { __typename?: any } | null,
): obj is DiscussionComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionComment"');
  return DiscussionComment_possibleTypes.includes(obj.__typename);
};

const DiscussionCommentConnection_possibleTypes: string[] = ['DiscussionCommentConnection'];
export const isDiscussionCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is DiscussionCommentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionCommentConnection"');
  return DiscussionCommentConnection_possibleTypes.includes(obj.__typename);
};

const DiscussionCommentEdge_possibleTypes: string[] = ['DiscussionCommentEdge'];
export const isDiscussionCommentEdge = (
  obj?: { __typename?: any } | null,
): obj is DiscussionCommentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionCommentEdge"');
  return DiscussionCommentEdge_possibleTypes.includes(obj.__typename);
};

const DiscussionConnection_possibleTypes: string[] = ['DiscussionConnection'];
export const isDiscussionConnection = (
  obj?: { __typename?: any } | null,
): obj is DiscussionConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionConnection"');
  return DiscussionConnection_possibleTypes.includes(obj.__typename);
};

const DiscussionEdge_possibleTypes: string[] = ['DiscussionEdge'];
export const isDiscussionEdge = (obj?: { __typename?: any } | null): obj is DiscussionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionEdge"');
  return DiscussionEdge_possibleTypes.includes(obj.__typename);
};

const DiscussionPoll_possibleTypes: string[] = ['DiscussionPoll'];
export const isDiscussionPoll = (obj?: { __typename?: any } | null): obj is DiscussionPoll => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionPoll"');
  return DiscussionPoll_possibleTypes.includes(obj.__typename);
};

const DiscussionPollOption_possibleTypes: string[] = ['DiscussionPollOption'];
export const isDiscussionPollOption = (
  obj?: { __typename?: any } | null,
): obj is DiscussionPollOption => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionPollOption"');
  return DiscussionPollOption_possibleTypes.includes(obj.__typename);
};

const DiscussionPollOptionConnection_possibleTypes: string[] = ['DiscussionPollOptionConnection'];
export const isDiscussionPollOptionConnection = (
  obj?: { __typename?: any } | null,
): obj is DiscussionPollOptionConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDiscussionPollOptionConnection"');
  return DiscussionPollOptionConnection_possibleTypes.includes(obj.__typename);
};

const DiscussionPollOptionEdge_possibleTypes: string[] = ['DiscussionPollOptionEdge'];
export const isDiscussionPollOptionEdge = (
  obj?: { __typename?: any } | null,
): obj is DiscussionPollOptionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDiscussionPollOptionEdge"');
  return DiscussionPollOptionEdge_possibleTypes.includes(obj.__typename);
};

const DismissPullRequestReviewPayload_possibleTypes: string[] = ['DismissPullRequestReviewPayload'];
export const isDismissPullRequestReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is DismissPullRequestReviewPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDismissPullRequestReviewPayload"');
  return DismissPullRequestReviewPayload_possibleTypes.includes(obj.__typename);
};

const DismissRepositoryVulnerabilityAlertPayload_possibleTypes: string[] = [
  'DismissRepositoryVulnerabilityAlertPayload',
];
export const isDismissRepositoryVulnerabilityAlertPayload = (
  obj?: { __typename?: any } | null,
): obj is DismissRepositoryVulnerabilityAlertPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isDismissRepositoryVulnerabilityAlertPayload"');
  return DismissRepositoryVulnerabilityAlertPayload_possibleTypes.includes(obj.__typename);
};

const DraftIssue_possibleTypes: string[] = ['DraftIssue'];
export const isDraftIssue = (obj?: { __typename?: any } | null): obj is DraftIssue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isDraftIssue"');
  return DraftIssue_possibleTypes.includes(obj.__typename);
};

const EnablePullRequestAutoMergePayload_possibleTypes: string[] = [
  'EnablePullRequestAutoMergePayload',
];
export const isEnablePullRequestAutoMergePayload = (
  obj?: { __typename?: any } | null,
): obj is EnablePullRequestAutoMergePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnablePullRequestAutoMergePayload"');
  return EnablePullRequestAutoMergePayload_possibleTypes.includes(obj.__typename);
};

const EnqueuePullRequestPayload_possibleTypes: string[] = ['EnqueuePullRequestPayload'];
export const isEnqueuePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is EnqueuePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnqueuePullRequestPayload"');
  return EnqueuePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const Enterprise_possibleTypes: string[] = ['Enterprise'];
export const isEnterprise = (obj?: { __typename?: any } | null): obj is Enterprise => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterprise"');
  return Enterprise_possibleTypes.includes(obj.__typename);
};

const EnterpriseAdministratorConnection_possibleTypes: string[] = [
  'EnterpriseAdministratorConnection',
];
export const isEnterpriseAdministratorConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAdministratorConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseAdministratorConnection"');
  return EnterpriseAdministratorConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseAdministratorEdge_possibleTypes: string[] = ['EnterpriseAdministratorEdge'];
export const isEnterpriseAdministratorEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAdministratorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseAdministratorEdge"');
  return EnterpriseAdministratorEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseAdministratorInvitation_possibleTypes: string[] = [
  'EnterpriseAdministratorInvitation',
];
export const isEnterpriseAdministratorInvitation = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAdministratorInvitation => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseAdministratorInvitation"');
  return EnterpriseAdministratorInvitation_possibleTypes.includes(obj.__typename);
};

const EnterpriseAdministratorInvitationConnection_possibleTypes: string[] = [
  'EnterpriseAdministratorInvitationConnection',
];
export const isEnterpriseAdministratorInvitationConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAdministratorInvitationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseAdministratorInvitationConnection"');
  return EnterpriseAdministratorInvitationConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseAdministratorInvitationEdge_possibleTypes: string[] = [
  'EnterpriseAdministratorInvitationEdge',
];
export const isEnterpriseAdministratorInvitationEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAdministratorInvitationEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseAdministratorInvitationEdge"');
  return EnterpriseAdministratorInvitationEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseAuditEntryData_possibleTypes: string[] = [
  'MembersCanDeleteReposClearAuditEntry',
  'MembersCanDeleteReposDisableAuditEntry',
  'MembersCanDeleteReposEnableAuditEntry',
  'OrgInviteToBusinessAuditEntry',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'RepositoryVisibilityChangeDisableAuditEntry',
  'RepositoryVisibilityChangeEnableAuditEntry',
];
export const isEnterpriseAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseAuditEntryData => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseAuditEntryData"');
  return EnterpriseAuditEntryData_possibleTypes.includes(obj.__typename);
};

const EnterpriseBillingInfo_possibleTypes: string[] = ['EnterpriseBillingInfo'];
export const isEnterpriseBillingInfo = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseBillingInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseBillingInfo"');
  return EnterpriseBillingInfo_possibleTypes.includes(obj.__typename);
};

const EnterpriseConnection_possibleTypes: string[] = ['EnterpriseConnection'];
export const isEnterpriseConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseConnection"');
  return EnterpriseConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseEdge_possibleTypes: string[] = ['EnterpriseEdge'];
export const isEnterpriseEdge = (obj?: { __typename?: any } | null): obj is EnterpriseEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseEdge"');
  return EnterpriseEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseFailedInvitationConnection_possibleTypes: string[] = [
  'EnterpriseFailedInvitationConnection',
];
export const isEnterpriseFailedInvitationConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseFailedInvitationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseFailedInvitationConnection"');
  return EnterpriseFailedInvitationConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseFailedInvitationEdge_possibleTypes: string[] = ['EnterpriseFailedInvitationEdge'];
export const isEnterpriseFailedInvitationEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseFailedInvitationEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseFailedInvitationEdge"');
  return EnterpriseFailedInvitationEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseIdentityProvider_possibleTypes: string[] = ['EnterpriseIdentityProvider'];
export const isEnterpriseIdentityProvider = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseIdentityProvider => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseIdentityProvider"');
  return EnterpriseIdentityProvider_possibleTypes.includes(obj.__typename);
};

const EnterpriseMember_possibleTypes: string[] = ['EnterpriseUserAccount', 'User'];
export const isEnterpriseMember = (obj?: { __typename?: any } | null): obj is EnterpriseMember => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseMember"');
  return EnterpriseMember_possibleTypes.includes(obj.__typename);
};

const EnterpriseMemberConnection_possibleTypes: string[] = ['EnterpriseMemberConnection'];
export const isEnterpriseMemberConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseMemberConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseMemberConnection"');
  return EnterpriseMemberConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseMemberEdge_possibleTypes: string[] = ['EnterpriseMemberEdge'];
export const isEnterpriseMemberEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseMemberEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseMemberEdge"');
  return EnterpriseMemberEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseOrganizationMembershipConnection_possibleTypes: string[] = [
  'EnterpriseOrganizationMembershipConnection',
];
export const isEnterpriseOrganizationMembershipConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseOrganizationMembershipConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseOrganizationMembershipConnection"');
  return EnterpriseOrganizationMembershipConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseOrganizationMembershipEdge_possibleTypes: string[] = [
  'EnterpriseOrganizationMembershipEdge',
];
export const isEnterpriseOrganizationMembershipEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseOrganizationMembershipEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseOrganizationMembershipEdge"');
  return EnterpriseOrganizationMembershipEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseOutsideCollaboratorConnection_possibleTypes: string[] = [
  'EnterpriseOutsideCollaboratorConnection',
];
export const isEnterpriseOutsideCollaboratorConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseOutsideCollaboratorConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseOutsideCollaboratorConnection"');
  return EnterpriseOutsideCollaboratorConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseOutsideCollaboratorEdge_possibleTypes: string[] = [
  'EnterpriseOutsideCollaboratorEdge',
];
export const isEnterpriseOutsideCollaboratorEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseOutsideCollaboratorEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseOutsideCollaboratorEdge"');
  return EnterpriseOutsideCollaboratorEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseOwnerInfo_possibleTypes: string[] = ['EnterpriseOwnerInfo'];
export const isEnterpriseOwnerInfo = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseOwnerInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseOwnerInfo"');
  return EnterpriseOwnerInfo_possibleTypes.includes(obj.__typename);
};

const EnterprisePendingMemberInvitationConnection_possibleTypes: string[] = [
  'EnterprisePendingMemberInvitationConnection',
];
export const isEnterprisePendingMemberInvitationConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterprisePendingMemberInvitationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterprisePendingMemberInvitationConnection"');
  return EnterprisePendingMemberInvitationConnection_possibleTypes.includes(obj.__typename);
};

const EnterprisePendingMemberInvitationEdge_possibleTypes: string[] = [
  'EnterprisePendingMemberInvitationEdge',
];
export const isEnterprisePendingMemberInvitationEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterprisePendingMemberInvitationEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterprisePendingMemberInvitationEdge"');
  return EnterprisePendingMemberInvitationEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseRepositoryInfo_possibleTypes: string[] = ['EnterpriseRepositoryInfo'];
export const isEnterpriseRepositoryInfo = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseRepositoryInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseRepositoryInfo"');
  return EnterpriseRepositoryInfo_possibleTypes.includes(obj.__typename);
};

const EnterpriseRepositoryInfoConnection_possibleTypes: string[] = [
  'EnterpriseRepositoryInfoConnection',
];
export const isEnterpriseRepositoryInfoConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseRepositoryInfoConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseRepositoryInfoConnection"');
  return EnterpriseRepositoryInfoConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseRepositoryInfoEdge_possibleTypes: string[] = ['EnterpriseRepositoryInfoEdge'];
export const isEnterpriseRepositoryInfoEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseRepositoryInfoEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseRepositoryInfoEdge"');
  return EnterpriseRepositoryInfoEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerInstallation_possibleTypes: string[] = ['EnterpriseServerInstallation'];
export const isEnterpriseServerInstallation = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerInstallation => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerInstallation"');
  return EnterpriseServerInstallation_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerInstallationConnection_possibleTypes: string[] = [
  'EnterpriseServerInstallationConnection',
];
export const isEnterpriseServerInstallationConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerInstallationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerInstallationConnection"');
  return EnterpriseServerInstallationConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerInstallationEdge_possibleTypes: string[] = [
  'EnterpriseServerInstallationEdge',
];
export const isEnterpriseServerInstallationEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerInstallationEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerInstallationEdge"');
  return EnterpriseServerInstallationEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerInstallationMembershipConnection_possibleTypes: string[] = [
  'EnterpriseServerInstallationMembershipConnection',
];
export const isEnterpriseServerInstallationMembershipConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerInstallationMembershipConnection => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isEnterpriseServerInstallationMembershipConnection"',
    );
  return EnterpriseServerInstallationMembershipConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerInstallationMembershipEdge_possibleTypes: string[] = [
  'EnterpriseServerInstallationMembershipEdge',
];
export const isEnterpriseServerInstallationMembershipEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerInstallationMembershipEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerInstallationMembershipEdge"');
  return EnterpriseServerInstallationMembershipEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccount_possibleTypes: string[] = ['EnterpriseServerUserAccount'];
export const isEnterpriseServerUserAccount = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseServerUserAccount"');
  return EnterpriseServerUserAccount_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountConnection_possibleTypes: string[] = [
  'EnterpriseServerUserAccountConnection',
];
export const isEnterpriseServerUserAccountConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountConnection"');
  return EnterpriseServerUserAccountConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountEdge_possibleTypes: string[] = ['EnterpriseServerUserAccountEdge'];
export const isEnterpriseServerUserAccountEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountEdge"');
  return EnterpriseServerUserAccountEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountEmail_possibleTypes: string[] = [
  'EnterpriseServerUserAccountEmail',
];
export const isEnterpriseServerUserAccountEmail = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountEmail => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountEmail"');
  return EnterpriseServerUserAccountEmail_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountEmailConnection_possibleTypes: string[] = [
  'EnterpriseServerUserAccountEmailConnection',
];
export const isEnterpriseServerUserAccountEmailConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountEmailConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountEmailConnection"');
  return EnterpriseServerUserAccountEmailConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountEmailEdge_possibleTypes: string[] = [
  'EnterpriseServerUserAccountEmailEdge',
];
export const isEnterpriseServerUserAccountEmailEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountEmailEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountEmailEdge"');
  return EnterpriseServerUserAccountEmailEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountsUpload_possibleTypes: string[] = [
  'EnterpriseServerUserAccountsUpload',
];
export const isEnterpriseServerUserAccountsUpload = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountsUpload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountsUpload"');
  return EnterpriseServerUserAccountsUpload_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountsUploadConnection_possibleTypes: string[] = [
  'EnterpriseServerUserAccountsUploadConnection',
];
export const isEnterpriseServerUserAccountsUploadConnection = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountsUploadConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountsUploadConnection"');
  return EnterpriseServerUserAccountsUploadConnection_possibleTypes.includes(obj.__typename);
};

const EnterpriseServerUserAccountsUploadEdge_possibleTypes: string[] = [
  'EnterpriseServerUserAccountsUploadEdge',
];
export const isEnterpriseServerUserAccountsUploadEdge = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseServerUserAccountsUploadEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isEnterpriseServerUserAccountsUploadEdge"');
  return EnterpriseServerUserAccountsUploadEdge_possibleTypes.includes(obj.__typename);
};

const EnterpriseUserAccount_possibleTypes: string[] = ['EnterpriseUserAccount'];
export const isEnterpriseUserAccount = (
  obj?: { __typename?: any } | null,
): obj is EnterpriseUserAccount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnterpriseUserAccount"');
  return EnterpriseUserAccount_possibleTypes.includes(obj.__typename);
};

const Environment_possibleTypes: string[] = ['Environment'];
export const isEnvironment = (obj?: { __typename?: any } | null): obj is Environment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnvironment"');
  return Environment_possibleTypes.includes(obj.__typename);
};

const EnvironmentConnection_possibleTypes: string[] = ['EnvironmentConnection'];
export const isEnvironmentConnection = (
  obj?: { __typename?: any } | null,
): obj is EnvironmentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnvironmentConnection"');
  return EnvironmentConnection_possibleTypes.includes(obj.__typename);
};

const EnvironmentEdge_possibleTypes: string[] = ['EnvironmentEdge'];
export const isEnvironmentEdge = (obj?: { __typename?: any } | null): obj is EnvironmentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isEnvironmentEdge"');
  return EnvironmentEdge_possibleTypes.includes(obj.__typename);
};

const ExternalIdentity_possibleTypes: string[] = ['ExternalIdentity'];
export const isExternalIdentity = (obj?: { __typename?: any } | null): obj is ExternalIdentity => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isExternalIdentity"');
  return ExternalIdentity_possibleTypes.includes(obj.__typename);
};

const ExternalIdentityAttribute_possibleTypes: string[] = ['ExternalIdentityAttribute'];
export const isExternalIdentityAttribute = (
  obj?: { __typename?: any } | null,
): obj is ExternalIdentityAttribute => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isExternalIdentityAttribute"');
  return ExternalIdentityAttribute_possibleTypes.includes(obj.__typename);
};

const ExternalIdentityConnection_possibleTypes: string[] = ['ExternalIdentityConnection'];
export const isExternalIdentityConnection = (
  obj?: { __typename?: any } | null,
): obj is ExternalIdentityConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isExternalIdentityConnection"');
  return ExternalIdentityConnection_possibleTypes.includes(obj.__typename);
};

const ExternalIdentityEdge_possibleTypes: string[] = ['ExternalIdentityEdge'];
export const isExternalIdentityEdge = (
  obj?: { __typename?: any } | null,
): obj is ExternalIdentityEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isExternalIdentityEdge"');
  return ExternalIdentityEdge_possibleTypes.includes(obj.__typename);
};

const ExternalIdentitySamlAttributes_possibleTypes: string[] = ['ExternalIdentitySamlAttributes'];
export const isExternalIdentitySamlAttributes = (
  obj?: { __typename?: any } | null,
): obj is ExternalIdentitySamlAttributes => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isExternalIdentitySamlAttributes"');
  return ExternalIdentitySamlAttributes_possibleTypes.includes(obj.__typename);
};

const ExternalIdentityScimAttributes_possibleTypes: string[] = ['ExternalIdentityScimAttributes'];
export const isExternalIdentityScimAttributes = (
  obj?: { __typename?: any } | null,
): obj is ExternalIdentityScimAttributes => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isExternalIdentityScimAttributes"');
  return ExternalIdentityScimAttributes_possibleTypes.includes(obj.__typename);
};

const FollowOrganizationPayload_possibleTypes: string[] = ['FollowOrganizationPayload'];
export const isFollowOrganizationPayload = (
  obj?: { __typename?: any } | null,
): obj is FollowOrganizationPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isFollowOrganizationPayload"');
  return FollowOrganizationPayload_possibleTypes.includes(obj.__typename);
};

const FollowUserPayload_possibleTypes: string[] = ['FollowUserPayload'];
export const isFollowUserPayload = (
  obj?: { __typename?: any } | null,
): obj is FollowUserPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isFollowUserPayload"');
  return FollowUserPayload_possibleTypes.includes(obj.__typename);
};

const FollowerConnection_possibleTypes: string[] = ['FollowerConnection'];
export const isFollowerConnection = (
  obj?: { __typename?: any } | null,
): obj is FollowerConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isFollowerConnection"');
  return FollowerConnection_possibleTypes.includes(obj.__typename);
};

const FollowingConnection_possibleTypes: string[] = ['FollowingConnection'];
export const isFollowingConnection = (
  obj?: { __typename?: any } | null,
): obj is FollowingConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isFollowingConnection"');
  return FollowingConnection_possibleTypes.includes(obj.__typename);
};

const FundingLink_possibleTypes: string[] = ['FundingLink'];
export const isFundingLink = (obj?: { __typename?: any } | null): obj is FundingLink => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isFundingLink"');
  return FundingLink_possibleTypes.includes(obj.__typename);
};

const GenericHovercardContext_possibleTypes: string[] = ['GenericHovercardContext'];
export const isGenericHovercardContext = (
  obj?: { __typename?: any } | null,
): obj is GenericHovercardContext => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGenericHovercardContext"');
  return GenericHovercardContext_possibleTypes.includes(obj.__typename);
};

const Gist_possibleTypes: string[] = ['Gist'];
export const isGist = (obj?: { __typename?: any } | null): obj is Gist => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGist"');
  return Gist_possibleTypes.includes(obj.__typename);
};

const GistComment_possibleTypes: string[] = ['GistComment'];
export const isGistComment = (obj?: { __typename?: any } | null): obj is GistComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistComment"');
  return GistComment_possibleTypes.includes(obj.__typename);
};

const GistCommentConnection_possibleTypes: string[] = ['GistCommentConnection'];
export const isGistCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is GistCommentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistCommentConnection"');
  return GistCommentConnection_possibleTypes.includes(obj.__typename);
};

const GistCommentEdge_possibleTypes: string[] = ['GistCommentEdge'];
export const isGistCommentEdge = (obj?: { __typename?: any } | null): obj is GistCommentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistCommentEdge"');
  return GistCommentEdge_possibleTypes.includes(obj.__typename);
};

const GistConnection_possibleTypes: string[] = ['GistConnection'];
export const isGistConnection = (obj?: { __typename?: any } | null): obj is GistConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistConnection"');
  return GistConnection_possibleTypes.includes(obj.__typename);
};

const GistEdge_possibleTypes: string[] = ['GistEdge'];
export const isGistEdge = (obj?: { __typename?: any } | null): obj is GistEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistEdge"');
  return GistEdge_possibleTypes.includes(obj.__typename);
};

const GistFile_possibleTypes: string[] = ['GistFile'];
export const isGistFile = (obj?: { __typename?: any } | null): obj is GistFile => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGistFile"');
  return GistFile_possibleTypes.includes(obj.__typename);
};

const GitActor_possibleTypes: string[] = ['GitActor'];
export const isGitActor = (obj?: { __typename?: any } | null): obj is GitActor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitActor"');
  return GitActor_possibleTypes.includes(obj.__typename);
};

const GitActorConnection_possibleTypes: string[] = ['GitActorConnection'];
export const isGitActorConnection = (
  obj?: { __typename?: any } | null,
): obj is GitActorConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitActorConnection"');
  return GitActorConnection_possibleTypes.includes(obj.__typename);
};

const GitActorEdge_possibleTypes: string[] = ['GitActorEdge'];
export const isGitActorEdge = (obj?: { __typename?: any } | null): obj is GitActorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitActorEdge"');
  return GitActorEdge_possibleTypes.includes(obj.__typename);
};

const GitHubMetadata_possibleTypes: string[] = ['GitHubMetadata'];
export const isGitHubMetadata = (obj?: { __typename?: any } | null): obj is GitHubMetadata => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitHubMetadata"');
  return GitHubMetadata_possibleTypes.includes(obj.__typename);
};

const GitObject_possibleTypes: string[] = ['Blob', 'Commit', 'Tag', 'Tree'];
export const isGitObject = (obj?: { __typename?: any } | null): obj is GitObject => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitObject"');
  return GitObject_possibleTypes.includes(obj.__typename);
};

const GitSignature_possibleTypes: string[] = [
  'GpgSignature',
  'SmimeSignature',
  'SshSignature',
  'UnknownSignature',
];
export const isGitSignature = (obj?: { __typename?: any } | null): obj is GitSignature => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGitSignature"');
  return GitSignature_possibleTypes.includes(obj.__typename);
};

const GpgSignature_possibleTypes: string[] = ['GpgSignature'];
export const isGpgSignature = (obj?: { __typename?: any } | null): obj is GpgSignature => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGpgSignature"');
  return GpgSignature_possibleTypes.includes(obj.__typename);
};

const GrantEnterpriseOrganizationsMigratorRolePayload_possibleTypes: string[] = [
  'GrantEnterpriseOrganizationsMigratorRolePayload',
];
export const isGrantEnterpriseOrganizationsMigratorRolePayload = (
  obj?: { __typename?: any } | null,
): obj is GrantEnterpriseOrganizationsMigratorRolePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isGrantEnterpriseOrganizationsMigratorRolePayload"');
  return GrantEnterpriseOrganizationsMigratorRolePayload_possibleTypes.includes(obj.__typename);
};

const GrantMigratorRolePayload_possibleTypes: string[] = ['GrantMigratorRolePayload'];
export const isGrantMigratorRolePayload = (
  obj?: { __typename?: any } | null,
): obj is GrantMigratorRolePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isGrantMigratorRolePayload"');
  return GrantMigratorRolePayload_possibleTypes.includes(obj.__typename);
};

const HeadRefDeletedEvent_possibleTypes: string[] = ['HeadRefDeletedEvent'];
export const isHeadRefDeletedEvent = (
  obj?: { __typename?: any } | null,
): obj is HeadRefDeletedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isHeadRefDeletedEvent"');
  return HeadRefDeletedEvent_possibleTypes.includes(obj.__typename);
};

const HeadRefForcePushedEvent_possibleTypes: string[] = ['HeadRefForcePushedEvent'];
export const isHeadRefForcePushedEvent = (
  obj?: { __typename?: any } | null,
): obj is HeadRefForcePushedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isHeadRefForcePushedEvent"');
  return HeadRefForcePushedEvent_possibleTypes.includes(obj.__typename);
};

const HeadRefRestoredEvent_possibleTypes: string[] = ['HeadRefRestoredEvent'];
export const isHeadRefRestoredEvent = (
  obj?: { __typename?: any } | null,
): obj is HeadRefRestoredEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isHeadRefRestoredEvent"');
  return HeadRefRestoredEvent_possibleTypes.includes(obj.__typename);
};

const Hovercard_possibleTypes: string[] = ['Hovercard'];
export const isHovercard = (obj?: { __typename?: any } | null): obj is Hovercard => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isHovercard"');
  return Hovercard_possibleTypes.includes(obj.__typename);
};

const HovercardContext_possibleTypes: string[] = [
  'GenericHovercardContext',
  'OrganizationTeamsHovercardContext',
  'OrganizationsHovercardContext',
  'ReviewStatusHovercardContext',
  'ViewerHovercardContext',
];
export const isHovercardContext = (obj?: { __typename?: any } | null): obj is HovercardContext => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isHovercardContext"');
  return HovercardContext_possibleTypes.includes(obj.__typename);
};

const InviteEnterpriseAdminPayload_possibleTypes: string[] = ['InviteEnterpriseAdminPayload'];
export const isInviteEnterpriseAdminPayload = (
  obj?: { __typename?: any } | null,
): obj is InviteEnterpriseAdminPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isInviteEnterpriseAdminPayload"');
  return InviteEnterpriseAdminPayload_possibleTypes.includes(obj.__typename);
};

const IpAllowListEntry_possibleTypes: string[] = ['IpAllowListEntry'];
export const isIpAllowListEntry = (obj?: { __typename?: any } | null): obj is IpAllowListEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIpAllowListEntry"');
  return IpAllowListEntry_possibleTypes.includes(obj.__typename);
};

const IpAllowListEntryConnection_possibleTypes: string[] = ['IpAllowListEntryConnection'];
export const isIpAllowListEntryConnection = (
  obj?: { __typename?: any } | null,
): obj is IpAllowListEntryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIpAllowListEntryConnection"');
  return IpAllowListEntryConnection_possibleTypes.includes(obj.__typename);
};

const IpAllowListEntryEdge_possibleTypes: string[] = ['IpAllowListEntryEdge'];
export const isIpAllowListEntryEdge = (
  obj?: { __typename?: any } | null,
): obj is IpAllowListEntryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIpAllowListEntryEdge"');
  return IpAllowListEntryEdge_possibleTypes.includes(obj.__typename);
};

const IpAllowListOwner_possibleTypes: string[] = ['App', 'Enterprise', 'Organization'];
export const isIpAllowListOwner = (obj?: { __typename?: any } | null): obj is IpAllowListOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIpAllowListOwner"');
  return IpAllowListOwner_possibleTypes.includes(obj.__typename);
};

const Issue_possibleTypes: string[] = ['Issue'];
export const isIssue = (obj?: { __typename?: any } | null): obj is Issue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssue"');
  return Issue_possibleTypes.includes(obj.__typename);
};

const IssueComment_possibleTypes: string[] = ['IssueComment'];
export const isIssueComment = (obj?: { __typename?: any } | null): obj is IssueComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueComment"');
  return IssueComment_possibleTypes.includes(obj.__typename);
};

const IssueCommentConnection_possibleTypes: string[] = ['IssueCommentConnection'];
export const isIssueCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is IssueCommentConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueCommentConnection"');
  return IssueCommentConnection_possibleTypes.includes(obj.__typename);
};

const IssueCommentEdge_possibleTypes: string[] = ['IssueCommentEdge'];
export const isIssueCommentEdge = (obj?: { __typename?: any } | null): obj is IssueCommentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueCommentEdge"');
  return IssueCommentEdge_possibleTypes.includes(obj.__typename);
};

const IssueConnection_possibleTypes: string[] = ['IssueConnection'];
export const isIssueConnection = (obj?: { __typename?: any } | null): obj is IssueConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueConnection"');
  return IssueConnection_possibleTypes.includes(obj.__typename);
};

const IssueContributionsByRepository_possibleTypes: string[] = ['IssueContributionsByRepository'];
export const isIssueContributionsByRepository = (
  obj?: { __typename?: any } | null,
): obj is IssueContributionsByRepository => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isIssueContributionsByRepository"');
  return IssueContributionsByRepository_possibleTypes.includes(obj.__typename);
};

const IssueEdge_possibleTypes: string[] = ['IssueEdge'];
export const isIssueEdge = (obj?: { __typename?: any } | null): obj is IssueEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueEdge"');
  return IssueEdge_possibleTypes.includes(obj.__typename);
};

const IssueOrPullRequest_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isIssueOrPullRequest = (
  obj?: { __typename?: any } | null,
): obj is IssueOrPullRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueOrPullRequest"');
  return IssueOrPullRequest_possibleTypes.includes(obj.__typename);
};

const IssueTemplate_possibleTypes: string[] = ['IssueTemplate'];
export const isIssueTemplate = (obj?: { __typename?: any } | null): obj is IssueTemplate => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTemplate"');
  return IssueTemplate_possibleTypes.includes(obj.__typename);
};

const IssueTimelineConnection_possibleTypes: string[] = ['IssueTimelineConnection'];
export const isIssueTimelineConnection = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTimelineConnection"');
  return IssueTimelineConnection_possibleTypes.includes(obj.__typename);
};

const IssueTimelineItem_possibleTypes: string[] = [
  'AssignedEvent',
  'ClosedEvent',
  'Commit',
  'CrossReferencedEvent',
  'DemilestonedEvent',
  'IssueComment',
  'LabeledEvent',
  'LockedEvent',
  'MilestonedEvent',
  'ReferencedEvent',
  'RenamedTitleEvent',
  'ReopenedEvent',
  'SubscribedEvent',
  'TransferredEvent',
  'UnassignedEvent',
  'UnlabeledEvent',
  'UnlockedEvent',
  'UnsubscribedEvent',
  'UserBlockedEvent',
];
export const isIssueTimelineItem = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTimelineItem"');
  return IssueTimelineItem_possibleTypes.includes(obj.__typename);
};

const IssueTimelineItemEdge_possibleTypes: string[] = ['IssueTimelineItemEdge'];
export const isIssueTimelineItemEdge = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTimelineItemEdge"');
  return IssueTimelineItemEdge_possibleTypes.includes(obj.__typename);
};

const IssueTimelineItems_possibleTypes: string[] = [
  'AddedToProjectEvent',
  'AssignedEvent',
  'ClosedEvent',
  'CommentDeletedEvent',
  'ConnectedEvent',
  'ConvertedNoteToIssueEvent',
  'ConvertedToDiscussionEvent',
  'CrossReferencedEvent',
  'DemilestonedEvent',
  'DisconnectedEvent',
  'IssueComment',
  'LabeledEvent',
  'LockedEvent',
  'MarkedAsDuplicateEvent',
  'MentionedEvent',
  'MilestonedEvent',
  'MovedColumnsInProjectEvent',
  'PinnedEvent',
  'ReferencedEvent',
  'RemovedFromProjectEvent',
  'RenamedTitleEvent',
  'ReopenedEvent',
  'SubscribedEvent',
  'TransferredEvent',
  'UnassignedEvent',
  'UnlabeledEvent',
  'UnlockedEvent',
  'UnmarkedAsDuplicateEvent',
  'UnpinnedEvent',
  'UnsubscribedEvent',
  'UserBlockedEvent',
];
export const isIssueTimelineItems = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineItems => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTimelineItems"');
  return IssueTimelineItems_possibleTypes.includes(obj.__typename);
};

const IssueTimelineItemsConnection_possibleTypes: string[] = ['IssueTimelineItemsConnection'];
export const isIssueTimelineItemsConnection = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineItemsConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isIssueTimelineItemsConnection"');
  return IssueTimelineItemsConnection_possibleTypes.includes(obj.__typename);
};

const IssueTimelineItemsEdge_possibleTypes: string[] = ['IssueTimelineItemsEdge'];
export const isIssueTimelineItemsEdge = (
  obj?: { __typename?: any } | null,
): obj is IssueTimelineItemsEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTimelineItemsEdge"');
  return IssueTimelineItemsEdge_possibleTypes.includes(obj.__typename);
};

const JoinedGitHubContribution_possibleTypes: string[] = ['JoinedGitHubContribution'];
export const isJoinedGitHubContribution = (
  obj?: { __typename?: any } | null,
): obj is JoinedGitHubContribution => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isJoinedGitHubContribution"');
  return JoinedGitHubContribution_possibleTypes.includes(obj.__typename);
};

const Label_possibleTypes: string[] = ['Label'];
export const isLabel = (obj?: { __typename?: any } | null): obj is Label => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLabel"');
  return Label_possibleTypes.includes(obj.__typename);
};

const LabelConnection_possibleTypes: string[] = ['LabelConnection'];
export const isLabelConnection = (obj?: { __typename?: any } | null): obj is LabelConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLabelConnection"');
  return LabelConnection_possibleTypes.includes(obj.__typename);
};

const LabelEdge_possibleTypes: string[] = ['LabelEdge'];
export const isLabelEdge = (obj?: { __typename?: any } | null): obj is LabelEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLabelEdge"');
  return LabelEdge_possibleTypes.includes(obj.__typename);
};

const Labelable_possibleTypes: string[] = ['Discussion', 'Issue', 'PullRequest'];
export const isLabelable = (obj?: { __typename?: any } | null): obj is Labelable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLabelable"');
  return Labelable_possibleTypes.includes(obj.__typename);
};

const LabeledEvent_possibleTypes: string[] = ['LabeledEvent'];
export const isLabeledEvent = (obj?: { __typename?: any } | null): obj is LabeledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLabeledEvent"');
  return LabeledEvent_possibleTypes.includes(obj.__typename);
};

const Language_possibleTypes: string[] = ['Language'];
export const isLanguage = (obj?: { __typename?: any } | null): obj is Language => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLanguage"');
  return Language_possibleTypes.includes(obj.__typename);
};

const LanguageConnection_possibleTypes: string[] = ['LanguageConnection'];
export const isLanguageConnection = (
  obj?: { __typename?: any } | null,
): obj is LanguageConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLanguageConnection"');
  return LanguageConnection_possibleTypes.includes(obj.__typename);
};

const LanguageEdge_possibleTypes: string[] = ['LanguageEdge'];
export const isLanguageEdge = (obj?: { __typename?: any } | null): obj is LanguageEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLanguageEdge"');
  return LanguageEdge_possibleTypes.includes(obj.__typename);
};

const License_possibleTypes: string[] = ['License'];
export const isLicense = (obj?: { __typename?: any } | null): obj is License => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLicense"');
  return License_possibleTypes.includes(obj.__typename);
};

const LicenseRule_possibleTypes: string[] = ['LicenseRule'];
export const isLicenseRule = (obj?: { __typename?: any } | null): obj is LicenseRule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLicenseRule"');
  return LicenseRule_possibleTypes.includes(obj.__typename);
};

const LinkProjectV2ToRepositoryPayload_possibleTypes: string[] = [
  'LinkProjectV2ToRepositoryPayload',
];
export const isLinkProjectV2ToRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is LinkProjectV2ToRepositoryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isLinkProjectV2ToRepositoryPayload"');
  return LinkProjectV2ToRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const LinkProjectV2ToTeamPayload_possibleTypes: string[] = ['LinkProjectV2ToTeamPayload'];
export const isLinkProjectV2ToTeamPayload = (
  obj?: { __typename?: any } | null,
): obj is LinkProjectV2ToTeamPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLinkProjectV2ToTeamPayload"');
  return LinkProjectV2ToTeamPayload_possibleTypes.includes(obj.__typename);
};

const LinkRepositoryToProjectPayload_possibleTypes: string[] = ['LinkRepositoryToProjectPayload'];
export const isLinkRepositoryToProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is LinkRepositoryToProjectPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isLinkRepositoryToProjectPayload"');
  return LinkRepositoryToProjectPayload_possibleTypes.includes(obj.__typename);
};

const LinkedBranch_possibleTypes: string[] = ['LinkedBranch'];
export const isLinkedBranch = (obj?: { __typename?: any } | null): obj is LinkedBranch => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLinkedBranch"');
  return LinkedBranch_possibleTypes.includes(obj.__typename);
};

const LinkedBranchConnection_possibleTypes: string[] = ['LinkedBranchConnection'];
export const isLinkedBranchConnection = (
  obj?: { __typename?: any } | null,
): obj is LinkedBranchConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLinkedBranchConnection"');
  return LinkedBranchConnection_possibleTypes.includes(obj.__typename);
};

const LinkedBranchEdge_possibleTypes: string[] = ['LinkedBranchEdge'];
export const isLinkedBranchEdge = (obj?: { __typename?: any } | null): obj is LinkedBranchEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLinkedBranchEdge"');
  return LinkedBranchEdge_possibleTypes.includes(obj.__typename);
};

const LockLockablePayload_possibleTypes: string[] = ['LockLockablePayload'];
export const isLockLockablePayload = (
  obj?: { __typename?: any } | null,
): obj is LockLockablePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLockLockablePayload"');
  return LockLockablePayload_possibleTypes.includes(obj.__typename);
};

const Lockable_possibleTypes: string[] = ['Discussion', 'Issue', 'PullRequest'];
export const isLockable = (obj?: { __typename?: any } | null): obj is Lockable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLockable"');
  return Lockable_possibleTypes.includes(obj.__typename);
};

const LockedEvent_possibleTypes: string[] = ['LockedEvent'];
export const isLockedEvent = (obj?: { __typename?: any } | null): obj is LockedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isLockedEvent"');
  return LockedEvent_possibleTypes.includes(obj.__typename);
};

const Mannequin_possibleTypes: string[] = ['Mannequin'];
export const isMannequin = (obj?: { __typename?: any } | null): obj is Mannequin => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMannequin"');
  return Mannequin_possibleTypes.includes(obj.__typename);
};

const MannequinConnection_possibleTypes: string[] = ['MannequinConnection'];
export const isMannequinConnection = (
  obj?: { __typename?: any } | null,
): obj is MannequinConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMannequinConnection"');
  return MannequinConnection_possibleTypes.includes(obj.__typename);
};

const MannequinEdge_possibleTypes: string[] = ['MannequinEdge'];
export const isMannequinEdge = (obj?: { __typename?: any } | null): obj is MannequinEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMannequinEdge"');
  return MannequinEdge_possibleTypes.includes(obj.__typename);
};

const MarkDiscussionCommentAsAnswerPayload_possibleTypes: string[] = [
  'MarkDiscussionCommentAsAnswerPayload',
];
export const isMarkDiscussionCommentAsAnswerPayload = (
  obj?: { __typename?: any } | null,
): obj is MarkDiscussionCommentAsAnswerPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMarkDiscussionCommentAsAnswerPayload"');
  return MarkDiscussionCommentAsAnswerPayload_possibleTypes.includes(obj.__typename);
};

const MarkFileAsViewedPayload_possibleTypes: string[] = ['MarkFileAsViewedPayload'];
export const isMarkFileAsViewedPayload = (
  obj?: { __typename?: any } | null,
): obj is MarkFileAsViewedPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMarkFileAsViewedPayload"');
  return MarkFileAsViewedPayload_possibleTypes.includes(obj.__typename);
};

const MarkProjectV2AsTemplatePayload_possibleTypes: string[] = ['MarkProjectV2AsTemplatePayload'];
export const isMarkProjectV2AsTemplatePayload = (
  obj?: { __typename?: any } | null,
): obj is MarkProjectV2AsTemplatePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMarkProjectV2AsTemplatePayload"');
  return MarkProjectV2AsTemplatePayload_possibleTypes.includes(obj.__typename);
};

const MarkPullRequestReadyForReviewPayload_possibleTypes: string[] = [
  'MarkPullRequestReadyForReviewPayload',
];
export const isMarkPullRequestReadyForReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is MarkPullRequestReadyForReviewPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMarkPullRequestReadyForReviewPayload"');
  return MarkPullRequestReadyForReviewPayload_possibleTypes.includes(obj.__typename);
};

const MarkedAsDuplicateEvent_possibleTypes: string[] = ['MarkedAsDuplicateEvent'];
export const isMarkedAsDuplicateEvent = (
  obj?: { __typename?: any } | null,
): obj is MarkedAsDuplicateEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMarkedAsDuplicateEvent"');
  return MarkedAsDuplicateEvent_possibleTypes.includes(obj.__typename);
};

const MarketplaceCategory_possibleTypes: string[] = ['MarketplaceCategory'];
export const isMarketplaceCategory = (
  obj?: { __typename?: any } | null,
): obj is MarketplaceCategory => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMarketplaceCategory"');
  return MarketplaceCategory_possibleTypes.includes(obj.__typename);
};

const MarketplaceListing_possibleTypes: string[] = ['MarketplaceListing'];
export const isMarketplaceListing = (
  obj?: { __typename?: any } | null,
): obj is MarketplaceListing => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMarketplaceListing"');
  return MarketplaceListing_possibleTypes.includes(obj.__typename);
};

const MarketplaceListingConnection_possibleTypes: string[] = ['MarketplaceListingConnection'];
export const isMarketplaceListingConnection = (
  obj?: { __typename?: any } | null,
): obj is MarketplaceListingConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMarketplaceListingConnection"');
  return MarketplaceListingConnection_possibleTypes.includes(obj.__typename);
};

const MarketplaceListingEdge_possibleTypes: string[] = ['MarketplaceListingEdge'];
export const isMarketplaceListingEdge = (
  obj?: { __typename?: any } | null,
): obj is MarketplaceListingEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMarketplaceListingEdge"');
  return MarketplaceListingEdge_possibleTypes.includes(obj.__typename);
};

const MemberStatusable_possibleTypes: string[] = ['Organization', 'Team'];
export const isMemberStatusable = (obj?: { __typename?: any } | null): obj is MemberStatusable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMemberStatusable"');
  return MemberStatusable_possibleTypes.includes(obj.__typename);
};

const MembersCanDeleteReposClearAuditEntry_possibleTypes: string[] = [
  'MembersCanDeleteReposClearAuditEntry',
];
export const isMembersCanDeleteReposClearAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is MembersCanDeleteReposClearAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMembersCanDeleteReposClearAuditEntry"');
  return MembersCanDeleteReposClearAuditEntry_possibleTypes.includes(obj.__typename);
};

const MembersCanDeleteReposDisableAuditEntry_possibleTypes: string[] = [
  'MembersCanDeleteReposDisableAuditEntry',
];
export const isMembersCanDeleteReposDisableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is MembersCanDeleteReposDisableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMembersCanDeleteReposDisableAuditEntry"');
  return MembersCanDeleteReposDisableAuditEntry_possibleTypes.includes(obj.__typename);
};

const MembersCanDeleteReposEnableAuditEntry_possibleTypes: string[] = [
  'MembersCanDeleteReposEnableAuditEntry',
];
export const isMembersCanDeleteReposEnableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is MembersCanDeleteReposEnableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isMembersCanDeleteReposEnableAuditEntry"');
  return MembersCanDeleteReposEnableAuditEntry_possibleTypes.includes(obj.__typename);
};

const MentionedEvent_possibleTypes: string[] = ['MentionedEvent'];
export const isMentionedEvent = (obj?: { __typename?: any } | null): obj is MentionedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMentionedEvent"');
  return MentionedEvent_possibleTypes.includes(obj.__typename);
};

const MergeBranchPayload_possibleTypes: string[] = ['MergeBranchPayload'];
export const isMergeBranchPayload = (
  obj?: { __typename?: any } | null,
): obj is MergeBranchPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeBranchPayload"');
  return MergeBranchPayload_possibleTypes.includes(obj.__typename);
};

const MergePullRequestPayload_possibleTypes: string[] = ['MergePullRequestPayload'];
export const isMergePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is MergePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergePullRequestPayload"');
  return MergePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const MergeQueue_possibleTypes: string[] = ['MergeQueue'];
export const isMergeQueue = (obj?: { __typename?: any } | null): obj is MergeQueue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeQueue"');
  return MergeQueue_possibleTypes.includes(obj.__typename);
};

const MergeQueueConfiguration_possibleTypes: string[] = ['MergeQueueConfiguration'];
export const isMergeQueueConfiguration = (
  obj?: { __typename?: any } | null,
): obj is MergeQueueConfiguration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeQueueConfiguration"');
  return MergeQueueConfiguration_possibleTypes.includes(obj.__typename);
};

const MergeQueueEntry_possibleTypes: string[] = ['MergeQueueEntry'];
export const isMergeQueueEntry = (obj?: { __typename?: any } | null): obj is MergeQueueEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeQueueEntry"');
  return MergeQueueEntry_possibleTypes.includes(obj.__typename);
};

const MergeQueueEntryConnection_possibleTypes: string[] = ['MergeQueueEntryConnection'];
export const isMergeQueueEntryConnection = (
  obj?: { __typename?: any } | null,
): obj is MergeQueueEntryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeQueueEntryConnection"');
  return MergeQueueEntryConnection_possibleTypes.includes(obj.__typename);
};

const MergeQueueEntryEdge_possibleTypes: string[] = ['MergeQueueEntryEdge'];
export const isMergeQueueEntryEdge = (
  obj?: { __typename?: any } | null,
): obj is MergeQueueEntryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergeQueueEntryEdge"');
  return MergeQueueEntryEdge_possibleTypes.includes(obj.__typename);
};

const MergedEvent_possibleTypes: string[] = ['MergedEvent'];
export const isMergedEvent = (obj?: { __typename?: any } | null): obj is MergedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMergedEvent"');
  return MergedEvent_possibleTypes.includes(obj.__typename);
};

const Migration_possibleTypes: string[] = ['RepositoryMigration'];
export const isMigration = (obj?: { __typename?: any } | null): obj is Migration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMigration"');
  return Migration_possibleTypes.includes(obj.__typename);
};

const MigrationSource_possibleTypes: string[] = ['MigrationSource'];
export const isMigrationSource = (obj?: { __typename?: any } | null): obj is MigrationSource => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMigrationSource"');
  return MigrationSource_possibleTypes.includes(obj.__typename);
};

const Milestone_possibleTypes: string[] = ['Milestone'];
export const isMilestone = (obj?: { __typename?: any } | null): obj is Milestone => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMilestone"');
  return Milestone_possibleTypes.includes(obj.__typename);
};

const MilestoneConnection_possibleTypes: string[] = ['MilestoneConnection'];
export const isMilestoneConnection = (
  obj?: { __typename?: any } | null,
): obj is MilestoneConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMilestoneConnection"');
  return MilestoneConnection_possibleTypes.includes(obj.__typename);
};

const MilestoneEdge_possibleTypes: string[] = ['MilestoneEdge'];
export const isMilestoneEdge = (obj?: { __typename?: any } | null): obj is MilestoneEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMilestoneEdge"');
  return MilestoneEdge_possibleTypes.includes(obj.__typename);
};

const MilestoneItem_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isMilestoneItem = (obj?: { __typename?: any } | null): obj is MilestoneItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMilestoneItem"');
  return MilestoneItem_possibleTypes.includes(obj.__typename);
};

const MilestonedEvent_possibleTypes: string[] = ['MilestonedEvent'];
export const isMilestonedEvent = (obj?: { __typename?: any } | null): obj is MilestonedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMilestonedEvent"');
  return MilestonedEvent_possibleTypes.includes(obj.__typename);
};

const Minimizable_possibleTypes: string[] = [
  'CommitComment',
  'DiscussionComment',
  'GistComment',
  'IssueComment',
  'PullRequestReview',
  'PullRequestReviewComment',
];
export const isMinimizable = (obj?: { __typename?: any } | null): obj is Minimizable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMinimizable"');
  return Minimizable_possibleTypes.includes(obj.__typename);
};

const MinimizeCommentPayload_possibleTypes: string[] = ['MinimizeCommentPayload'];
export const isMinimizeCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is MinimizeCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMinimizeCommentPayload"');
  return MinimizeCommentPayload_possibleTypes.includes(obj.__typename);
};

const MoveProjectCardPayload_possibleTypes: string[] = ['MoveProjectCardPayload'];
export const isMoveProjectCardPayload = (
  obj?: { __typename?: any } | null,
): obj is MoveProjectCardPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMoveProjectCardPayload"');
  return MoveProjectCardPayload_possibleTypes.includes(obj.__typename);
};

const MoveProjectColumnPayload_possibleTypes: string[] = ['MoveProjectColumnPayload'];
export const isMoveProjectColumnPayload = (
  obj?: { __typename?: any } | null,
): obj is MoveProjectColumnPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMoveProjectColumnPayload"');
  return MoveProjectColumnPayload_possibleTypes.includes(obj.__typename);
};

const MovedColumnsInProjectEvent_possibleTypes: string[] = ['MovedColumnsInProjectEvent'];
export const isMovedColumnsInProjectEvent = (
  obj?: { __typename?: any } | null,
): obj is MovedColumnsInProjectEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMovedColumnsInProjectEvent"');
  return MovedColumnsInProjectEvent_possibleTypes.includes(obj.__typename);
};

const Mutation_possibleTypes: string[] = ['Mutation'];
export const isMutation = (obj?: { __typename?: any } | null): obj is Mutation => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isMutation"');
  return Mutation_possibleTypes.includes(obj.__typename);
};

const Node_possibleTypes: string[] = [
  'AddedToMergeQueueEvent',
  'AddedToProjectEvent',
  'App',
  'AssignedEvent',
  'AutoMergeDisabledEvent',
  'AutoMergeEnabledEvent',
  'AutoRebaseEnabledEvent',
  'AutoSquashEnabledEvent',
  'AutomaticBaseChangeFailedEvent',
  'AutomaticBaseChangeSucceededEvent',
  'BaseRefChangedEvent',
  'BaseRefDeletedEvent',
  'BaseRefForcePushedEvent',
  'Blob',
  'Bot',
  'BranchProtectionRule',
  'BypassForcePushAllowance',
  'BypassPullRequestAllowance',
  'CWE',
  'CheckRun',
  'CheckSuite',
  'ClosedEvent',
  'CodeOfConduct',
  'CommentDeletedEvent',
  'Commit',
  'CommitComment',
  'CommitCommentThread',
  'Comparison',
  'ConnectedEvent',
  'ConvertToDraftEvent',
  'ConvertedNoteToIssueEvent',
  'ConvertedToDiscussionEvent',
  'CrossReferencedEvent',
  'DemilestonedEvent',
  'DeployKey',
  'DeployedEvent',
  'Deployment',
  'DeploymentEnvironmentChangedEvent',
  'DeploymentReview',
  'DeploymentStatus',
  'DisconnectedEvent',
  'Discussion',
  'DiscussionCategory',
  'DiscussionComment',
  'DiscussionPoll',
  'DiscussionPollOption',
  'DraftIssue',
  'Enterprise',
  'EnterpriseAdministratorInvitation',
  'EnterpriseIdentityProvider',
  'EnterpriseRepositoryInfo',
  'EnterpriseServerInstallation',
  'EnterpriseServerUserAccount',
  'EnterpriseServerUserAccountEmail',
  'EnterpriseServerUserAccountsUpload',
  'EnterpriseUserAccount',
  'Environment',
  'ExternalIdentity',
  'Gist',
  'GistComment',
  'HeadRefDeletedEvent',
  'HeadRefForcePushedEvent',
  'HeadRefRestoredEvent',
  'IpAllowListEntry',
  'Issue',
  'IssueComment',
  'Label',
  'LabeledEvent',
  'Language',
  'License',
  'LinkedBranch',
  'LockedEvent',
  'Mannequin',
  'MarkedAsDuplicateEvent',
  'MarketplaceCategory',
  'MarketplaceListing',
  'MembersCanDeleteReposClearAuditEntry',
  'MembersCanDeleteReposDisableAuditEntry',
  'MembersCanDeleteReposEnableAuditEntry',
  'MentionedEvent',
  'MergeQueue',
  'MergeQueueEntry',
  'MergedEvent',
  'MigrationSource',
  'Milestone',
  'MilestonedEvent',
  'MovedColumnsInProjectEvent',
  'OIDCProvider',
  'OauthApplicationCreateAuditEntry',
  'OrgAddBillingManagerAuditEntry',
  'OrgAddMemberAuditEntry',
  'OrgBlockUserAuditEntry',
  'OrgConfigDisableCollaboratorsOnlyAuditEntry',
  'OrgConfigEnableCollaboratorsOnlyAuditEntry',
  'OrgCreateAuditEntry',
  'OrgDisableOauthAppRestrictionsAuditEntry',
  'OrgDisableSamlAuditEntry',
  'OrgDisableTwoFactorRequirementAuditEntry',
  'OrgEnableOauthAppRestrictionsAuditEntry',
  'OrgEnableSamlAuditEntry',
  'OrgEnableTwoFactorRequirementAuditEntry',
  'OrgInviteMemberAuditEntry',
  'OrgInviteToBusinessAuditEntry',
  'OrgOauthAppAccessApprovedAuditEntry',
  'OrgOauthAppAccessBlockedAuditEntry',
  'OrgOauthAppAccessDeniedAuditEntry',
  'OrgOauthAppAccessRequestedAuditEntry',
  'OrgOauthAppAccessUnblockedAuditEntry',
  'OrgRemoveBillingManagerAuditEntry',
  'OrgRemoveMemberAuditEntry',
  'OrgRemoveOutsideCollaboratorAuditEntry',
  'OrgRestoreMemberAuditEntry',
  'OrgUnblockUserAuditEntry',
  'OrgUpdateDefaultRepositoryPermissionAuditEntry',
  'OrgUpdateMemberAuditEntry',
  'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
  'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
  'Organization',
  'OrganizationIdentityProvider',
  'OrganizationInvitation',
  'OrganizationMigration',
  'Package',
  'PackageFile',
  'PackageTag',
  'PackageVersion',
  'PinnedDiscussion',
  'PinnedEvent',
  'PinnedIssue',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'Project',
  'ProjectCard',
  'ProjectColumn',
  'ProjectV2',
  'ProjectV2Field',
  'ProjectV2Item',
  'ProjectV2ItemFieldDateValue',
  'ProjectV2ItemFieldIterationValue',
  'ProjectV2ItemFieldNumberValue',
  'ProjectV2ItemFieldSingleSelectValue',
  'ProjectV2ItemFieldTextValue',
  'ProjectV2IterationField',
  'ProjectV2SingleSelectField',
  'ProjectV2View',
  'ProjectV2Workflow',
  'PublicKey',
  'PullRequest',
  'PullRequestCommit',
  'PullRequestCommitCommentThread',
  'PullRequestReview',
  'PullRequestReviewComment',
  'PullRequestReviewThread',
  'PullRequestThread',
  'Push',
  'PushAllowance',
  'Reaction',
  'ReadyForReviewEvent',
  'Ref',
  'ReferencedEvent',
  'Release',
  'ReleaseAsset',
  'RemovedFromMergeQueueEvent',
  'RemovedFromProjectEvent',
  'RenamedTitleEvent',
  'ReopenedEvent',
  'RepoAccessAuditEntry',
  'RepoAddMemberAuditEntry',
  'RepoAddTopicAuditEntry',
  'RepoArchivedAuditEntry',
  'RepoChangeMergeSettingAuditEntry',
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
  'RepoConfigDisableContributorsOnlyAuditEntry',
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
  'RepoConfigEnableContributorsOnlyAuditEntry',
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
  'RepoConfigLockAnonymousGitAccessAuditEntry',
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
  'RepoCreateAuditEntry',
  'RepoDestroyAuditEntry',
  'RepoRemoveMemberAuditEntry',
  'RepoRemoveTopicAuditEntry',
  'Repository',
  'RepositoryInvitation',
  'RepositoryMigration',
  'RepositoryRule',
  'RepositoryRuleset',
  'RepositoryRulesetBypassActor',
  'RepositoryTopic',
  'RepositoryVisibilityChangeDisableAuditEntry',
  'RepositoryVisibilityChangeEnableAuditEntry',
  'RepositoryVulnerabilityAlert',
  'ReviewDismissalAllowance',
  'ReviewDismissedEvent',
  'ReviewRequest',
  'ReviewRequestRemovedEvent',
  'ReviewRequestedEvent',
  'SavedReply',
  'SecurityAdvisory',
  'SponsorsActivity',
  'SponsorsListing',
  'SponsorsListingFeaturedItem',
  'SponsorsTier',
  'Sponsorship',
  'SponsorshipNewsletter',
  'Status',
  'StatusCheckRollup',
  'StatusContext',
  'SubscribedEvent',
  'Tag',
  'Team',
  'TeamAddMemberAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamChangeParentTeamAuditEntry',
  'TeamDiscussion',
  'TeamDiscussionComment',
  'TeamRemoveMemberAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
  'Topic',
  'TransferredEvent',
  'Tree',
  'UnassignedEvent',
  'UnlabeledEvent',
  'UnlockedEvent',
  'UnmarkedAsDuplicateEvent',
  'UnpinnedEvent',
  'UnsubscribedEvent',
  'User',
  'UserBlockedEvent',
  'UserContentEdit',
  'UserStatus',
  'VerifiableDomain',
  'Workflow',
  'WorkflowRun',
  'WorkflowRunFile',
];
export const isNode = (obj?: { __typename?: any } | null): obj is Node => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isNode"');
  return Node_possibleTypes.includes(obj.__typename);
};

const OIDCProvider_possibleTypes: string[] = ['OIDCProvider'];
export const isOIDCProvider = (obj?: { __typename?: any } | null): obj is OIDCProvider => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOIDCProvider"');
  return OIDCProvider_possibleTypes.includes(obj.__typename);
};

const OauthApplicationAuditEntryData_possibleTypes: string[] = [
  'OauthApplicationCreateAuditEntry',
  'OrgOauthAppAccessApprovedAuditEntry',
  'OrgOauthAppAccessBlockedAuditEntry',
  'OrgOauthAppAccessDeniedAuditEntry',
  'OrgOauthAppAccessRequestedAuditEntry',
  'OrgOauthAppAccessUnblockedAuditEntry',
];
export const isOauthApplicationAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is OauthApplicationAuditEntryData => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOauthApplicationAuditEntryData"');
  return OauthApplicationAuditEntryData_possibleTypes.includes(obj.__typename);
};

const OauthApplicationCreateAuditEntry_possibleTypes: string[] = [
  'OauthApplicationCreateAuditEntry',
];
export const isOauthApplicationCreateAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OauthApplicationCreateAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOauthApplicationCreateAuditEntry"');
  return OauthApplicationCreateAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgAddBillingManagerAuditEntry_possibleTypes: string[] = ['OrgAddBillingManagerAuditEntry'];
export const isOrgAddBillingManagerAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgAddBillingManagerAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgAddBillingManagerAuditEntry"');
  return OrgAddBillingManagerAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgAddMemberAuditEntry_possibleTypes: string[] = ['OrgAddMemberAuditEntry'];
export const isOrgAddMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgAddMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgAddMemberAuditEntry"');
  return OrgAddMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgBlockUserAuditEntry_possibleTypes: string[] = ['OrgBlockUserAuditEntry'];
export const isOrgBlockUserAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgBlockUserAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgBlockUserAuditEntry"');
  return OrgBlockUserAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes: string[] = [
  'OrgConfigDisableCollaboratorsOnlyAuditEntry',
];
export const isOrgConfigDisableCollaboratorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgConfigDisableCollaboratorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgConfigDisableCollaboratorsOnlyAuditEntry"');
  return OrgConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes: string[] = [
  'OrgConfigEnableCollaboratorsOnlyAuditEntry',
];
export const isOrgConfigEnableCollaboratorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgConfigEnableCollaboratorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgConfigEnableCollaboratorsOnlyAuditEntry"');
  return OrgConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgCreateAuditEntry_possibleTypes: string[] = ['OrgCreateAuditEntry'];
export const isOrgCreateAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgCreateAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgCreateAuditEntry"');
  return OrgCreateAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgDisableOauthAppRestrictionsAuditEntry_possibleTypes: string[] = [
  'OrgDisableOauthAppRestrictionsAuditEntry',
];
export const isOrgDisableOauthAppRestrictionsAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgDisableOauthAppRestrictionsAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgDisableOauthAppRestrictionsAuditEntry"');
  return OrgDisableOauthAppRestrictionsAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgDisableSamlAuditEntry_possibleTypes: string[] = ['OrgDisableSamlAuditEntry'];
export const isOrgDisableSamlAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgDisableSamlAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgDisableSamlAuditEntry"');
  return OrgDisableSamlAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgDisableTwoFactorRequirementAuditEntry_possibleTypes: string[] = [
  'OrgDisableTwoFactorRequirementAuditEntry',
];
export const isOrgDisableTwoFactorRequirementAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgDisableTwoFactorRequirementAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgDisableTwoFactorRequirementAuditEntry"');
  return OrgDisableTwoFactorRequirementAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgEnableOauthAppRestrictionsAuditEntry_possibleTypes: string[] = [
  'OrgEnableOauthAppRestrictionsAuditEntry',
];
export const isOrgEnableOauthAppRestrictionsAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgEnableOauthAppRestrictionsAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgEnableOauthAppRestrictionsAuditEntry"');
  return OrgEnableOauthAppRestrictionsAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgEnableSamlAuditEntry_possibleTypes: string[] = ['OrgEnableSamlAuditEntry'];
export const isOrgEnableSamlAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgEnableSamlAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgEnableSamlAuditEntry"');
  return OrgEnableSamlAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgEnableTwoFactorRequirementAuditEntry_possibleTypes: string[] = [
  'OrgEnableTwoFactorRequirementAuditEntry',
];
export const isOrgEnableTwoFactorRequirementAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgEnableTwoFactorRequirementAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgEnableTwoFactorRequirementAuditEntry"');
  return OrgEnableTwoFactorRequirementAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgInviteMemberAuditEntry_possibleTypes: string[] = ['OrgInviteMemberAuditEntry'];
export const isOrgInviteMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgInviteMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgInviteMemberAuditEntry"');
  return OrgInviteMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgInviteToBusinessAuditEntry_possibleTypes: string[] = ['OrgInviteToBusinessAuditEntry'];
export const isOrgInviteToBusinessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgInviteToBusinessAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgInviteToBusinessAuditEntry"');
  return OrgInviteToBusinessAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgOauthAppAccessApprovedAuditEntry_possibleTypes: string[] = [
  'OrgOauthAppAccessApprovedAuditEntry',
];
export const isOrgOauthAppAccessApprovedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgOauthAppAccessApprovedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgOauthAppAccessApprovedAuditEntry"');
  return OrgOauthAppAccessApprovedAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgOauthAppAccessBlockedAuditEntry_possibleTypes: string[] = [
  'OrgOauthAppAccessBlockedAuditEntry',
];
export const isOrgOauthAppAccessBlockedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgOauthAppAccessBlockedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgOauthAppAccessBlockedAuditEntry"');
  return OrgOauthAppAccessBlockedAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgOauthAppAccessDeniedAuditEntry_possibleTypes: string[] = [
  'OrgOauthAppAccessDeniedAuditEntry',
];
export const isOrgOauthAppAccessDeniedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgOauthAppAccessDeniedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgOauthAppAccessDeniedAuditEntry"');
  return OrgOauthAppAccessDeniedAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgOauthAppAccessRequestedAuditEntry_possibleTypes: string[] = [
  'OrgOauthAppAccessRequestedAuditEntry',
];
export const isOrgOauthAppAccessRequestedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgOauthAppAccessRequestedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgOauthAppAccessRequestedAuditEntry"');
  return OrgOauthAppAccessRequestedAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgOauthAppAccessUnblockedAuditEntry_possibleTypes: string[] = [
  'OrgOauthAppAccessUnblockedAuditEntry',
];
export const isOrgOauthAppAccessUnblockedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgOauthAppAccessUnblockedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgOauthAppAccessUnblockedAuditEntry"');
  return OrgOauthAppAccessUnblockedAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgRemoveBillingManagerAuditEntry_possibleTypes: string[] = [
  'OrgRemoveBillingManagerAuditEntry',
];
export const isOrgRemoveBillingManagerAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgRemoveBillingManagerAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgRemoveBillingManagerAuditEntry"');
  return OrgRemoveBillingManagerAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgRemoveMemberAuditEntry_possibleTypes: string[] = ['OrgRemoveMemberAuditEntry'];
export const isOrgRemoveMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgRemoveMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgRemoveMemberAuditEntry"');
  return OrgRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgRemoveOutsideCollaboratorAuditEntry_possibleTypes: string[] = [
  'OrgRemoveOutsideCollaboratorAuditEntry',
];
export const isOrgRemoveOutsideCollaboratorAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgRemoveOutsideCollaboratorAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgRemoveOutsideCollaboratorAuditEntry"');
  return OrgRemoveOutsideCollaboratorAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgRestoreMemberAuditEntry_possibleTypes: string[] = ['OrgRestoreMemberAuditEntry'];
export const isOrgRestoreMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgRestoreMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgRestoreMemberAuditEntry"');
  return OrgRestoreMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgRestoreMemberAuditEntryMembership_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipOrganizationAuditEntryData',
  'OrgRestoreMemberMembershipRepositoryAuditEntryData',
  'OrgRestoreMemberMembershipTeamAuditEntryData',
];
export const isOrgRestoreMemberAuditEntryMembership = (
  obj?: { __typename?: any } | null,
): obj is OrgRestoreMemberAuditEntryMembership => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgRestoreMemberAuditEntryMembership"');
  return OrgRestoreMemberAuditEntryMembership_possibleTypes.includes(obj.__typename);
};

const OrgRestoreMemberMembershipOrganizationAuditEntryData_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipOrganizationAuditEntryData',
];
export const isOrgRestoreMemberMembershipOrganizationAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is OrgRestoreMemberMembershipOrganizationAuditEntryData => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isOrgRestoreMemberMembershipOrganizationAuditEntryData"',
    );
  return OrgRestoreMemberMembershipOrganizationAuditEntryData_possibleTypes.includes(
    obj.__typename,
  );
};

const OrgRestoreMemberMembershipRepositoryAuditEntryData_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipRepositoryAuditEntryData',
];
export const isOrgRestoreMemberMembershipRepositoryAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is OrgRestoreMemberMembershipRepositoryAuditEntryData => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isOrgRestoreMemberMembershipRepositoryAuditEntryData"',
    );
  return OrgRestoreMemberMembershipRepositoryAuditEntryData_possibleTypes.includes(obj.__typename);
};

const OrgRestoreMemberMembershipTeamAuditEntryData_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipTeamAuditEntryData',
];
export const isOrgRestoreMemberMembershipTeamAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is OrgRestoreMemberMembershipTeamAuditEntryData => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgRestoreMemberMembershipTeamAuditEntryData"');
  return OrgRestoreMemberMembershipTeamAuditEntryData_possibleTypes.includes(obj.__typename);
};

const OrgUnblockUserAuditEntry_possibleTypes: string[] = ['OrgUnblockUserAuditEntry'];
export const isOrgUnblockUserAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgUnblockUserAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgUnblockUserAuditEntry"');
  return OrgUnblockUserAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgUpdateDefaultRepositoryPermissionAuditEntry_possibleTypes: string[] = [
  'OrgUpdateDefaultRepositoryPermissionAuditEntry',
];
export const isOrgUpdateDefaultRepositoryPermissionAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgUpdateDefaultRepositoryPermissionAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrgUpdateDefaultRepositoryPermissionAuditEntry"');
  return OrgUpdateDefaultRepositoryPermissionAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgUpdateMemberAuditEntry_possibleTypes: string[] = ['OrgUpdateMemberAuditEntry'];
export const isOrgUpdateMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgUpdateMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrgUpdateMemberAuditEntry"');
  return OrgUpdateMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrgUpdateMemberRepositoryCreationPermissionAuditEntry_possibleTypes: string[] = [
  'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
];
export const isOrgUpdateMemberRepositoryCreationPermissionAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgUpdateMemberRepositoryCreationPermissionAuditEntry => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isOrgUpdateMemberRepositoryCreationPermissionAuditEntry"',
    );
  return OrgUpdateMemberRepositoryCreationPermissionAuditEntry_possibleTypes.includes(
    obj.__typename,
  );
};

const OrgUpdateMemberRepositoryInvitationPermissionAuditEntry_possibleTypes: string[] = [
  'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
];
export const isOrgUpdateMemberRepositoryInvitationPermissionAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrgUpdateMemberRepositoryInvitationPermissionAuditEntry => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isOrgUpdateMemberRepositoryInvitationPermissionAuditEntry"',
    );
  return OrgUpdateMemberRepositoryInvitationPermissionAuditEntry_possibleTypes.includes(
    obj.__typename,
  );
};

const Organization_possibleTypes: string[] = ['Organization'];
export const isOrganization = (obj?: { __typename?: any } | null): obj is Organization => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganization"');
  return Organization_possibleTypes.includes(obj.__typename);
};

const OrganizationAuditEntry_possibleTypes: string[] = [
  'MembersCanDeleteReposClearAuditEntry',
  'MembersCanDeleteReposDisableAuditEntry',
  'MembersCanDeleteReposEnableAuditEntry',
  'OauthApplicationCreateAuditEntry',
  'OrgAddBillingManagerAuditEntry',
  'OrgAddMemberAuditEntry',
  'OrgBlockUserAuditEntry',
  'OrgConfigDisableCollaboratorsOnlyAuditEntry',
  'OrgConfigEnableCollaboratorsOnlyAuditEntry',
  'OrgCreateAuditEntry',
  'OrgDisableOauthAppRestrictionsAuditEntry',
  'OrgDisableSamlAuditEntry',
  'OrgDisableTwoFactorRequirementAuditEntry',
  'OrgEnableOauthAppRestrictionsAuditEntry',
  'OrgEnableSamlAuditEntry',
  'OrgEnableTwoFactorRequirementAuditEntry',
  'OrgInviteMemberAuditEntry',
  'OrgInviteToBusinessAuditEntry',
  'OrgOauthAppAccessApprovedAuditEntry',
  'OrgOauthAppAccessBlockedAuditEntry',
  'OrgOauthAppAccessDeniedAuditEntry',
  'OrgOauthAppAccessRequestedAuditEntry',
  'OrgOauthAppAccessUnblockedAuditEntry',
  'OrgRemoveBillingManagerAuditEntry',
  'OrgRemoveMemberAuditEntry',
  'OrgRemoveOutsideCollaboratorAuditEntry',
  'OrgRestoreMemberAuditEntry',
  'OrgUnblockUserAuditEntry',
  'OrgUpdateDefaultRepositoryPermissionAuditEntry',
  'OrgUpdateMemberAuditEntry',
  'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
  'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'RepoAccessAuditEntry',
  'RepoAddMemberAuditEntry',
  'RepoAddTopicAuditEntry',
  'RepoArchivedAuditEntry',
  'RepoChangeMergeSettingAuditEntry',
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
  'RepoConfigDisableContributorsOnlyAuditEntry',
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
  'RepoConfigEnableContributorsOnlyAuditEntry',
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
  'RepoConfigLockAnonymousGitAccessAuditEntry',
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
  'RepoCreateAuditEntry',
  'RepoDestroyAuditEntry',
  'RepoRemoveMemberAuditEntry',
  'RepoRemoveTopicAuditEntry',
  'RepositoryVisibilityChangeDisableAuditEntry',
  'RepositoryVisibilityChangeEnableAuditEntry',
  'TeamAddMemberAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamChangeParentTeamAuditEntry',
  'TeamRemoveMemberAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
];
export const isOrganizationAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is OrganizationAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationAuditEntry"');
  return OrganizationAuditEntry_possibleTypes.includes(obj.__typename);
};

const OrganizationAuditEntryConnection_possibleTypes: string[] = [
  'OrganizationAuditEntryConnection',
];
export const isOrganizationAuditEntryConnection = (
  obj?: { __typename?: any } | null,
): obj is OrganizationAuditEntryConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationAuditEntryConnection"');
  return OrganizationAuditEntryConnection_possibleTypes.includes(obj.__typename);
};

const OrganizationAuditEntryData_possibleTypes: string[] = [
  'MembersCanDeleteReposClearAuditEntry',
  'MembersCanDeleteReposDisableAuditEntry',
  'MembersCanDeleteReposEnableAuditEntry',
  'OauthApplicationCreateAuditEntry',
  'OrgAddBillingManagerAuditEntry',
  'OrgAddMemberAuditEntry',
  'OrgBlockUserAuditEntry',
  'OrgConfigDisableCollaboratorsOnlyAuditEntry',
  'OrgConfigEnableCollaboratorsOnlyAuditEntry',
  'OrgCreateAuditEntry',
  'OrgDisableOauthAppRestrictionsAuditEntry',
  'OrgDisableSamlAuditEntry',
  'OrgDisableTwoFactorRequirementAuditEntry',
  'OrgEnableOauthAppRestrictionsAuditEntry',
  'OrgEnableSamlAuditEntry',
  'OrgEnableTwoFactorRequirementAuditEntry',
  'OrgInviteMemberAuditEntry',
  'OrgInviteToBusinessAuditEntry',
  'OrgOauthAppAccessApprovedAuditEntry',
  'OrgOauthAppAccessBlockedAuditEntry',
  'OrgOauthAppAccessDeniedAuditEntry',
  'OrgOauthAppAccessRequestedAuditEntry',
  'OrgOauthAppAccessUnblockedAuditEntry',
  'OrgRemoveBillingManagerAuditEntry',
  'OrgRemoveMemberAuditEntry',
  'OrgRemoveOutsideCollaboratorAuditEntry',
  'OrgRestoreMemberAuditEntry',
  'OrgRestoreMemberMembershipOrganizationAuditEntryData',
  'OrgUnblockUserAuditEntry',
  'OrgUpdateDefaultRepositoryPermissionAuditEntry',
  'OrgUpdateMemberAuditEntry',
  'OrgUpdateMemberRepositoryCreationPermissionAuditEntry',
  'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'RepoAccessAuditEntry',
  'RepoAddMemberAuditEntry',
  'RepoAddTopicAuditEntry',
  'RepoArchivedAuditEntry',
  'RepoChangeMergeSettingAuditEntry',
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
  'RepoConfigDisableContributorsOnlyAuditEntry',
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
  'RepoConfigEnableContributorsOnlyAuditEntry',
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
  'RepoConfigLockAnonymousGitAccessAuditEntry',
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
  'RepoCreateAuditEntry',
  'RepoDestroyAuditEntry',
  'RepoRemoveMemberAuditEntry',
  'RepoRemoveTopicAuditEntry',
  'RepositoryVisibilityChangeDisableAuditEntry',
  'RepositoryVisibilityChangeEnableAuditEntry',
  'TeamAddMemberAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamChangeParentTeamAuditEntry',
  'TeamRemoveMemberAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
];
export const isOrganizationAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is OrganizationAuditEntryData => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationAuditEntryData"');
  return OrganizationAuditEntryData_possibleTypes.includes(obj.__typename);
};

const OrganizationAuditEntryEdge_possibleTypes: string[] = ['OrganizationAuditEntryEdge'];
export const isOrganizationAuditEntryEdge = (
  obj?: { __typename?: any } | null,
): obj is OrganizationAuditEntryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationAuditEntryEdge"');
  return OrganizationAuditEntryEdge_possibleTypes.includes(obj.__typename);
};

const OrganizationConnection_possibleTypes: string[] = ['OrganizationConnection'];
export const isOrganizationConnection = (
  obj?: { __typename?: any } | null,
): obj is OrganizationConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationConnection"');
  return OrganizationConnection_possibleTypes.includes(obj.__typename);
};

const OrganizationEdge_possibleTypes: string[] = ['OrganizationEdge'];
export const isOrganizationEdge = (obj?: { __typename?: any } | null): obj is OrganizationEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationEdge"');
  return OrganizationEdge_possibleTypes.includes(obj.__typename);
};

const OrganizationEnterpriseOwnerConnection_possibleTypes: string[] = [
  'OrganizationEnterpriseOwnerConnection',
];
export const isOrganizationEnterpriseOwnerConnection = (
  obj?: { __typename?: any } | null,
): obj is OrganizationEnterpriseOwnerConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationEnterpriseOwnerConnection"');
  return OrganizationEnterpriseOwnerConnection_possibleTypes.includes(obj.__typename);
};

const OrganizationEnterpriseOwnerEdge_possibleTypes: string[] = ['OrganizationEnterpriseOwnerEdge'];
export const isOrganizationEnterpriseOwnerEdge = (
  obj?: { __typename?: any } | null,
): obj is OrganizationEnterpriseOwnerEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationEnterpriseOwnerEdge"');
  return OrganizationEnterpriseOwnerEdge_possibleTypes.includes(obj.__typename);
};

const OrganizationIdentityProvider_possibleTypes: string[] = ['OrganizationIdentityProvider'];
export const isOrganizationIdentityProvider = (
  obj?: { __typename?: any } | null,
): obj is OrganizationIdentityProvider => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationIdentityProvider"');
  return OrganizationIdentityProvider_possibleTypes.includes(obj.__typename);
};

const OrganizationInvitation_possibleTypes: string[] = ['OrganizationInvitation'];
export const isOrganizationInvitation = (
  obj?: { __typename?: any } | null,
): obj is OrganizationInvitation => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInvitation"');
  return OrganizationInvitation_possibleTypes.includes(obj.__typename);
};

const OrganizationInvitationConnection_possibleTypes: string[] = [
  'OrganizationInvitationConnection',
];
export const isOrganizationInvitationConnection = (
  obj?: { __typename?: any } | null,
): obj is OrganizationInvitationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationInvitationConnection"');
  return OrganizationInvitationConnection_possibleTypes.includes(obj.__typename);
};

const OrganizationInvitationEdge_possibleTypes: string[] = ['OrganizationInvitationEdge'];
export const isOrganizationInvitationEdge = (
  obj?: { __typename?: any } | null,
): obj is OrganizationInvitationEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInvitationEdge"');
  return OrganizationInvitationEdge_possibleTypes.includes(obj.__typename);
};

const OrganizationMemberConnection_possibleTypes: string[] = ['OrganizationMemberConnection'];
export const isOrganizationMemberConnection = (
  obj?: { __typename?: any } | null,
): obj is OrganizationMemberConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationMemberConnection"');
  return OrganizationMemberConnection_possibleTypes.includes(obj.__typename);
};

const OrganizationMemberEdge_possibleTypes: string[] = ['OrganizationMemberEdge'];
export const isOrganizationMemberEdge = (
  obj?: { __typename?: any } | null,
): obj is OrganizationMemberEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationMemberEdge"');
  return OrganizationMemberEdge_possibleTypes.includes(obj.__typename);
};

const OrganizationMigration_possibleTypes: string[] = ['OrganizationMigration'];
export const isOrganizationMigration = (
  obj?: { __typename?: any } | null,
): obj is OrganizationMigration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationMigration"');
  return OrganizationMigration_possibleTypes.includes(obj.__typename);
};

const OrganizationOrUser_possibleTypes: string[] = ['Organization', 'User'];
export const isOrganizationOrUser = (
  obj?: { __typename?: any } | null,
): obj is OrganizationOrUser => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationOrUser"');
  return OrganizationOrUser_possibleTypes.includes(obj.__typename);
};

const OrganizationTeamsHovercardContext_possibleTypes: string[] = [
  'OrganizationTeamsHovercardContext',
];
export const isOrganizationTeamsHovercardContext = (
  obj?: { __typename?: any } | null,
): obj is OrganizationTeamsHovercardContext => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationTeamsHovercardContext"');
  return OrganizationTeamsHovercardContext_possibleTypes.includes(obj.__typename);
};

const OrganizationsHovercardContext_possibleTypes: string[] = ['OrganizationsHovercardContext'];
export const isOrganizationsHovercardContext = (
  obj?: { __typename?: any } | null,
): obj is OrganizationsHovercardContext => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isOrganizationsHovercardContext"');
  return OrganizationsHovercardContext_possibleTypes.includes(obj.__typename);
};

const Package_possibleTypes: string[] = ['Package'];
export const isPackage = (obj?: { __typename?: any } | null): obj is Package => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackage"');
  return Package_possibleTypes.includes(obj.__typename);
};

const PackageConnection_possibleTypes: string[] = ['PackageConnection'];
export const isPackageConnection = (
  obj?: { __typename?: any } | null,
): obj is PackageConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageConnection"');
  return PackageConnection_possibleTypes.includes(obj.__typename);
};

const PackageEdge_possibleTypes: string[] = ['PackageEdge'];
export const isPackageEdge = (obj?: { __typename?: any } | null): obj is PackageEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageEdge"');
  return PackageEdge_possibleTypes.includes(obj.__typename);
};

const PackageFile_possibleTypes: string[] = ['PackageFile'];
export const isPackageFile = (obj?: { __typename?: any } | null): obj is PackageFile => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageFile"');
  return PackageFile_possibleTypes.includes(obj.__typename);
};

const PackageFileConnection_possibleTypes: string[] = ['PackageFileConnection'];
export const isPackageFileConnection = (
  obj?: { __typename?: any } | null,
): obj is PackageFileConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageFileConnection"');
  return PackageFileConnection_possibleTypes.includes(obj.__typename);
};

const PackageFileEdge_possibleTypes: string[] = ['PackageFileEdge'];
export const isPackageFileEdge = (obj?: { __typename?: any } | null): obj is PackageFileEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageFileEdge"');
  return PackageFileEdge_possibleTypes.includes(obj.__typename);
};

const PackageOwner_possibleTypes: string[] = ['Organization', 'Repository', 'User'];
export const isPackageOwner = (obj?: { __typename?: any } | null): obj is PackageOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageOwner"');
  return PackageOwner_possibleTypes.includes(obj.__typename);
};

const PackageStatistics_possibleTypes: string[] = ['PackageStatistics'];
export const isPackageStatistics = (
  obj?: { __typename?: any } | null,
): obj is PackageStatistics => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageStatistics"');
  return PackageStatistics_possibleTypes.includes(obj.__typename);
};

const PackageTag_possibleTypes: string[] = ['PackageTag'];
export const isPackageTag = (obj?: { __typename?: any } | null): obj is PackageTag => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageTag"');
  return PackageTag_possibleTypes.includes(obj.__typename);
};

const PackageVersion_possibleTypes: string[] = ['PackageVersion'];
export const isPackageVersion = (obj?: { __typename?: any } | null): obj is PackageVersion => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageVersion"');
  return PackageVersion_possibleTypes.includes(obj.__typename);
};

const PackageVersionConnection_possibleTypes: string[] = ['PackageVersionConnection'];
export const isPackageVersionConnection = (
  obj?: { __typename?: any } | null,
): obj is PackageVersionConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageVersionConnection"');
  return PackageVersionConnection_possibleTypes.includes(obj.__typename);
};

const PackageVersionEdge_possibleTypes: string[] = ['PackageVersionEdge'];
export const isPackageVersionEdge = (
  obj?: { __typename?: any } | null,
): obj is PackageVersionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageVersionEdge"');
  return PackageVersionEdge_possibleTypes.includes(obj.__typename);
};

const PackageVersionStatistics_possibleTypes: string[] = ['PackageVersionStatistics'];
export const isPackageVersionStatistics = (
  obj?: { __typename?: any } | null,
): obj is PackageVersionStatistics => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPackageVersionStatistics"');
  return PackageVersionStatistics_possibleTypes.includes(obj.__typename);
};

const PageInfo_possibleTypes: string[] = ['PageInfo'];
export const isPageInfo = (obj?: { __typename?: any } | null): obj is PageInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPageInfo"');
  return PageInfo_possibleTypes.includes(obj.__typename);
};

const PermissionGranter_possibleTypes: string[] = ['Organization', 'Repository', 'Team'];
export const isPermissionGranter = (
  obj?: { __typename?: any } | null,
): obj is PermissionGranter => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPermissionGranter"');
  return PermissionGranter_possibleTypes.includes(obj.__typename);
};

const PermissionSource_possibleTypes: string[] = ['PermissionSource'];
export const isPermissionSource = (obj?: { __typename?: any } | null): obj is PermissionSource => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPermissionSource"');
  return PermissionSource_possibleTypes.includes(obj.__typename);
};

const PinIssuePayload_possibleTypes: string[] = ['PinIssuePayload'];
export const isPinIssuePayload = (obj?: { __typename?: any } | null): obj is PinIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinIssuePayload"');
  return PinIssuePayload_possibleTypes.includes(obj.__typename);
};

const PinnableItem_possibleTypes: string[] = ['Gist', 'Repository'];
export const isPinnableItem = (obj?: { __typename?: any } | null): obj is PinnableItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnableItem"');
  return PinnableItem_possibleTypes.includes(obj.__typename);
};

const PinnableItemConnection_possibleTypes: string[] = ['PinnableItemConnection'];
export const isPinnableItemConnection = (
  obj?: { __typename?: any } | null,
): obj is PinnableItemConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnableItemConnection"');
  return PinnableItemConnection_possibleTypes.includes(obj.__typename);
};

const PinnableItemEdge_possibleTypes: string[] = ['PinnableItemEdge'];
export const isPinnableItemEdge = (obj?: { __typename?: any } | null): obj is PinnableItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnableItemEdge"');
  return PinnableItemEdge_possibleTypes.includes(obj.__typename);
};

const PinnedDiscussion_possibleTypes: string[] = ['PinnedDiscussion'];
export const isPinnedDiscussion = (obj?: { __typename?: any } | null): obj is PinnedDiscussion => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedDiscussion"');
  return PinnedDiscussion_possibleTypes.includes(obj.__typename);
};

const PinnedDiscussionConnection_possibleTypes: string[] = ['PinnedDiscussionConnection'];
export const isPinnedDiscussionConnection = (
  obj?: { __typename?: any } | null,
): obj is PinnedDiscussionConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedDiscussionConnection"');
  return PinnedDiscussionConnection_possibleTypes.includes(obj.__typename);
};

const PinnedDiscussionEdge_possibleTypes: string[] = ['PinnedDiscussionEdge'];
export const isPinnedDiscussionEdge = (
  obj?: { __typename?: any } | null,
): obj is PinnedDiscussionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedDiscussionEdge"');
  return PinnedDiscussionEdge_possibleTypes.includes(obj.__typename);
};

const PinnedEvent_possibleTypes: string[] = ['PinnedEvent'];
export const isPinnedEvent = (obj?: { __typename?: any } | null): obj is PinnedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedEvent"');
  return PinnedEvent_possibleTypes.includes(obj.__typename);
};

const PinnedIssue_possibleTypes: string[] = ['PinnedIssue'];
export const isPinnedIssue = (obj?: { __typename?: any } | null): obj is PinnedIssue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedIssue"');
  return PinnedIssue_possibleTypes.includes(obj.__typename);
};

const PinnedIssueConnection_possibleTypes: string[] = ['PinnedIssueConnection'];
export const isPinnedIssueConnection = (
  obj?: { __typename?: any } | null,
): obj is PinnedIssueConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedIssueConnection"');
  return PinnedIssueConnection_possibleTypes.includes(obj.__typename);
};

const PinnedIssueEdge_possibleTypes: string[] = ['PinnedIssueEdge'];
export const isPinnedIssueEdge = (obj?: { __typename?: any } | null): obj is PinnedIssueEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPinnedIssueEdge"');
  return PinnedIssueEdge_possibleTypes.includes(obj.__typename);
};

const PrivateRepositoryForkingDisableAuditEntry_possibleTypes: string[] = [
  'PrivateRepositoryForkingDisableAuditEntry',
];
export const isPrivateRepositoryForkingDisableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is PrivateRepositoryForkingDisableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPrivateRepositoryForkingDisableAuditEntry"');
  return PrivateRepositoryForkingDisableAuditEntry_possibleTypes.includes(obj.__typename);
};

const PrivateRepositoryForkingEnableAuditEntry_possibleTypes: string[] = [
  'PrivateRepositoryForkingEnableAuditEntry',
];
export const isPrivateRepositoryForkingEnableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is PrivateRepositoryForkingEnableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPrivateRepositoryForkingEnableAuditEntry"');
  return PrivateRepositoryForkingEnableAuditEntry_possibleTypes.includes(obj.__typename);
};

const ProfileItemShowcase_possibleTypes: string[] = ['ProfileItemShowcase'];
export const isProfileItemShowcase = (
  obj?: { __typename?: any } | null,
): obj is ProfileItemShowcase => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProfileItemShowcase"');
  return ProfileItemShowcase_possibleTypes.includes(obj.__typename);
};

const ProfileOwner_possibleTypes: string[] = ['Organization', 'User'];
export const isProfileOwner = (obj?: { __typename?: any } | null): obj is ProfileOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProfileOwner"');
  return ProfileOwner_possibleTypes.includes(obj.__typename);
};

const Project_possibleTypes: string[] = ['Project'];
export const isProject = (obj?: { __typename?: any } | null): obj is Project => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProject"');
  return Project_possibleTypes.includes(obj.__typename);
};

const ProjectCard_possibleTypes: string[] = ['ProjectCard'];
export const isProjectCard = (obj?: { __typename?: any } | null): obj is ProjectCard => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectCard"');
  return ProjectCard_possibleTypes.includes(obj.__typename);
};

const ProjectCardConnection_possibleTypes: string[] = ['ProjectCardConnection'];
export const isProjectCardConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectCardConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectCardConnection"');
  return ProjectCardConnection_possibleTypes.includes(obj.__typename);
};

const ProjectCardEdge_possibleTypes: string[] = ['ProjectCardEdge'];
export const isProjectCardEdge = (obj?: { __typename?: any } | null): obj is ProjectCardEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectCardEdge"');
  return ProjectCardEdge_possibleTypes.includes(obj.__typename);
};

const ProjectCardItem_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isProjectCardItem = (obj?: { __typename?: any } | null): obj is ProjectCardItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectCardItem"');
  return ProjectCardItem_possibleTypes.includes(obj.__typename);
};

const ProjectColumn_possibleTypes: string[] = ['ProjectColumn'];
export const isProjectColumn = (obj?: { __typename?: any } | null): obj is ProjectColumn => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectColumn"');
  return ProjectColumn_possibleTypes.includes(obj.__typename);
};

const ProjectColumnConnection_possibleTypes: string[] = ['ProjectColumnConnection'];
export const isProjectColumnConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectColumnConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectColumnConnection"');
  return ProjectColumnConnection_possibleTypes.includes(obj.__typename);
};

const ProjectColumnEdge_possibleTypes: string[] = ['ProjectColumnEdge'];
export const isProjectColumnEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectColumnEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectColumnEdge"');
  return ProjectColumnEdge_possibleTypes.includes(obj.__typename);
};

const ProjectConnection_possibleTypes: string[] = ['ProjectConnection'];
export const isProjectConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectConnection"');
  return ProjectConnection_possibleTypes.includes(obj.__typename);
};

const ProjectEdge_possibleTypes: string[] = ['ProjectEdge'];
export const isProjectEdge = (obj?: { __typename?: any } | null): obj is ProjectEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectEdge"');
  return ProjectEdge_possibleTypes.includes(obj.__typename);
};

const ProjectOwner_possibleTypes: string[] = ['Organization', 'Repository', 'User'];
export const isProjectOwner = (obj?: { __typename?: any } | null): obj is ProjectOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectOwner"');
  return ProjectOwner_possibleTypes.includes(obj.__typename);
};

const ProjectProgress_possibleTypes: string[] = ['ProjectProgress'];
export const isProjectProgress = (obj?: { __typename?: any } | null): obj is ProjectProgress => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectProgress"');
  return ProjectProgress_possibleTypes.includes(obj.__typename);
};

const ProjectV2_possibleTypes: string[] = ['ProjectV2'];
export const isProjectV2 = (obj?: { __typename?: any } | null): obj is ProjectV2 => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2"');
  return ProjectV2_possibleTypes.includes(obj.__typename);
};

const ProjectV2Actor_possibleTypes: string[] = ['Team', 'User'];
export const isProjectV2Actor = (obj?: { __typename?: any } | null): obj is ProjectV2Actor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Actor"');
  return ProjectV2Actor_possibleTypes.includes(obj.__typename);
};

const ProjectV2ActorConnection_possibleTypes: string[] = ['ProjectV2ActorConnection'];
export const isProjectV2ActorConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ActorConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ActorConnection"');
  return ProjectV2ActorConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2ActorEdge_possibleTypes: string[] = ['ProjectV2ActorEdge'];
export const isProjectV2ActorEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ActorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ActorEdge"');
  return ProjectV2ActorEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2Connection_possibleTypes: string[] = ['ProjectV2Connection'];
export const isProjectV2Connection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2Connection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Connection"');
  return ProjectV2Connection_possibleTypes.includes(obj.__typename);
};

const ProjectV2Edge_possibleTypes: string[] = ['ProjectV2Edge'];
export const isProjectV2Edge = (obj?: { __typename?: any } | null): obj is ProjectV2Edge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Edge"');
  return ProjectV2Edge_possibleTypes.includes(obj.__typename);
};

const ProjectV2Field_possibleTypes: string[] = ['ProjectV2Field'];
export const isProjectV2Field = (obj?: { __typename?: any } | null): obj is ProjectV2Field => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Field"');
  return ProjectV2Field_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldCommon_possibleTypes: string[] = [
  'ProjectV2Field',
  'ProjectV2IterationField',
  'ProjectV2SingleSelectField',
];
export const isProjectV2FieldCommon = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldCommon => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2FieldCommon"');
  return ProjectV2FieldCommon_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldConfiguration_possibleTypes: string[] = [
  'ProjectV2Field',
  'ProjectV2IterationField',
  'ProjectV2SingleSelectField',
];
export const isProjectV2FieldConfiguration = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldConfiguration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2FieldConfiguration"');
  return ProjectV2FieldConfiguration_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldConfigurationConnection_possibleTypes: string[] = [
  'ProjectV2FieldConfigurationConnection',
];
export const isProjectV2FieldConfigurationConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldConfigurationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2FieldConfigurationConnection"');
  return ProjectV2FieldConfigurationConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldConfigurationEdge_possibleTypes: string[] = ['ProjectV2FieldConfigurationEdge'];
export const isProjectV2FieldConfigurationEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldConfigurationEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2FieldConfigurationEdge"');
  return ProjectV2FieldConfigurationEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldConnection_possibleTypes: string[] = ['ProjectV2FieldConnection'];
export const isProjectV2FieldConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2FieldConnection"');
  return ProjectV2FieldConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2FieldEdge_possibleTypes: string[] = ['ProjectV2FieldEdge'];
export const isProjectV2FieldEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2FieldEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2FieldEdge"');
  return ProjectV2FieldEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2Item_possibleTypes: string[] = ['ProjectV2Item'];
export const isProjectV2Item = (obj?: { __typename?: any } | null): obj is ProjectV2Item => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Item"');
  return ProjectV2Item_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemConnection_possibleTypes: string[] = ['ProjectV2ItemConnection'];
export const isProjectV2ItemConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemConnection"');
  return ProjectV2ItemConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemContent_possibleTypes: string[] = ['DraftIssue', 'Issue', 'PullRequest'];
export const isProjectV2ItemContent = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemContent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemContent"');
  return ProjectV2ItemContent_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemEdge_possibleTypes: string[] = ['ProjectV2ItemEdge'];
export const isProjectV2ItemEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemEdge"');
  return ProjectV2ItemEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldDateValue_possibleTypes: string[] = ['ProjectV2ItemFieldDateValue'];
export const isProjectV2ItemFieldDateValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldDateValue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemFieldDateValue"');
  return ProjectV2ItemFieldDateValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldIterationValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldIterationValue',
];
export const isProjectV2ItemFieldIterationValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldIterationValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldIterationValue"');
  return ProjectV2ItemFieldIterationValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldLabelValue_possibleTypes: string[] = ['ProjectV2ItemFieldLabelValue'];
export const isProjectV2ItemFieldLabelValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldLabelValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldLabelValue"');
  return ProjectV2ItemFieldLabelValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldMilestoneValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldMilestoneValue',
];
export const isProjectV2ItemFieldMilestoneValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldMilestoneValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldMilestoneValue"');
  return ProjectV2ItemFieldMilestoneValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldNumberValue_possibleTypes: string[] = ['ProjectV2ItemFieldNumberValue'];
export const isProjectV2ItemFieldNumberValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldNumberValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldNumberValue"');
  return ProjectV2ItemFieldNumberValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldPullRequestValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldPullRequestValue',
];
export const isProjectV2ItemFieldPullRequestValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldPullRequestValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldPullRequestValue"');
  return ProjectV2ItemFieldPullRequestValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldRepositoryValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldRepositoryValue',
];
export const isProjectV2ItemFieldRepositoryValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldRepositoryValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldRepositoryValue"');
  return ProjectV2ItemFieldRepositoryValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldReviewerValue_possibleTypes: string[] = ['ProjectV2ItemFieldReviewerValue'];
export const isProjectV2ItemFieldReviewerValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldReviewerValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldReviewerValue"');
  return ProjectV2ItemFieldReviewerValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldSingleSelectValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldSingleSelectValue',
];
export const isProjectV2ItemFieldSingleSelectValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldSingleSelectValue => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldSingleSelectValue"');
  return ProjectV2ItemFieldSingleSelectValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldTextValue_possibleTypes: string[] = ['ProjectV2ItemFieldTextValue'];
export const isProjectV2ItemFieldTextValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldTextValue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemFieldTextValue"');
  return ProjectV2ItemFieldTextValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldUserValue_possibleTypes: string[] = ['ProjectV2ItemFieldUserValue'];
export const isProjectV2ItemFieldUserValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldUserValue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemFieldUserValue"');
  return ProjectV2ItemFieldUserValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldValue_possibleTypes: string[] = [
  'ProjectV2ItemFieldDateValue',
  'ProjectV2ItemFieldIterationValue',
  'ProjectV2ItemFieldLabelValue',
  'ProjectV2ItemFieldMilestoneValue',
  'ProjectV2ItemFieldNumberValue',
  'ProjectV2ItemFieldPullRequestValue',
  'ProjectV2ItemFieldRepositoryValue',
  'ProjectV2ItemFieldReviewerValue',
  'ProjectV2ItemFieldSingleSelectValue',
  'ProjectV2ItemFieldTextValue',
  'ProjectV2ItemFieldUserValue',
];
export const isProjectV2ItemFieldValue = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldValue => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemFieldValue"');
  return ProjectV2ItemFieldValue_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldValueCommon_possibleTypes: string[] = [
  'ProjectV2ItemFieldDateValue',
  'ProjectV2ItemFieldIterationValue',
  'ProjectV2ItemFieldNumberValue',
  'ProjectV2ItemFieldSingleSelectValue',
  'ProjectV2ItemFieldTextValue',
];
export const isProjectV2ItemFieldValueCommon = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldValueCommon => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldValueCommon"');
  return ProjectV2ItemFieldValueCommon_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldValueConnection_possibleTypes: string[] = [
  'ProjectV2ItemFieldValueConnection',
];
export const isProjectV2ItemFieldValueConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldValueConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2ItemFieldValueConnection"');
  return ProjectV2ItemFieldValueConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2ItemFieldValueEdge_possibleTypes: string[] = ['ProjectV2ItemFieldValueEdge'];
export const isProjectV2ItemFieldValueEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ItemFieldValueEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ItemFieldValueEdge"');
  return ProjectV2ItemFieldValueEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2IterationField_possibleTypes: string[] = ['ProjectV2IterationField'];
export const isProjectV2IterationField = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2IterationField => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2IterationField"');
  return ProjectV2IterationField_possibleTypes.includes(obj.__typename);
};

const ProjectV2IterationFieldConfiguration_possibleTypes: string[] = [
  'ProjectV2IterationFieldConfiguration',
];
export const isProjectV2IterationFieldConfiguration = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2IterationFieldConfiguration => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2IterationFieldConfiguration"');
  return ProjectV2IterationFieldConfiguration_possibleTypes.includes(obj.__typename);
};

const ProjectV2IterationFieldIteration_possibleTypes: string[] = [
  'ProjectV2IterationFieldIteration',
];
export const isProjectV2IterationFieldIteration = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2IterationFieldIteration => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2IterationFieldIteration"');
  return ProjectV2IterationFieldIteration_possibleTypes.includes(obj.__typename);
};

const ProjectV2Owner_possibleTypes: string[] = ['Issue', 'Organization', 'PullRequest', 'User'];
export const isProjectV2Owner = (obj?: { __typename?: any } | null): obj is ProjectV2Owner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Owner"');
  return ProjectV2Owner_possibleTypes.includes(obj.__typename);
};

const ProjectV2Recent_possibleTypes: string[] = ['Organization', 'Repository', 'User'];
export const isProjectV2Recent = (obj?: { __typename?: any } | null): obj is ProjectV2Recent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Recent"');
  return ProjectV2Recent_possibleTypes.includes(obj.__typename);
};

const ProjectV2SingleSelectField_possibleTypes: string[] = ['ProjectV2SingleSelectField'];
export const isProjectV2SingleSelectField = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SingleSelectField => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SingleSelectField"');
  return ProjectV2SingleSelectField_possibleTypes.includes(obj.__typename);
};

const ProjectV2SingleSelectFieldOption_possibleTypes: string[] = [
  'ProjectV2SingleSelectFieldOption',
];
export const isProjectV2SingleSelectFieldOption = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SingleSelectFieldOption => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2SingleSelectFieldOption"');
  return ProjectV2SingleSelectFieldOption_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortBy_possibleTypes: string[] = ['ProjectV2SortBy'];
export const isProjectV2SortBy = (obj?: { __typename?: any } | null): obj is ProjectV2SortBy => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SortBy"');
  return ProjectV2SortBy_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortByConnection_possibleTypes: string[] = ['ProjectV2SortByConnection'];
export const isProjectV2SortByConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SortByConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SortByConnection"');
  return ProjectV2SortByConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortByEdge_possibleTypes: string[] = ['ProjectV2SortByEdge'];
export const isProjectV2SortByEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SortByEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SortByEdge"');
  return ProjectV2SortByEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortByField_possibleTypes: string[] = ['ProjectV2SortByField'];
export const isProjectV2SortByField = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SortByField => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SortByField"');
  return ProjectV2SortByField_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortByFieldConnection_possibleTypes: string[] = ['ProjectV2SortByFieldConnection'];
export const isProjectV2SortByFieldConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SortByFieldConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isProjectV2SortByFieldConnection"');
  return ProjectV2SortByFieldConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2SortByFieldEdge_possibleTypes: string[] = ['ProjectV2SortByFieldEdge'];
export const isProjectV2SortByFieldEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2SortByFieldEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2SortByFieldEdge"');
  return ProjectV2SortByFieldEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2View_possibleTypes: string[] = ['ProjectV2View'];
export const isProjectV2View = (obj?: { __typename?: any } | null): obj is ProjectV2View => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2View"');
  return ProjectV2View_possibleTypes.includes(obj.__typename);
};

const ProjectV2ViewConnection_possibleTypes: string[] = ['ProjectV2ViewConnection'];
export const isProjectV2ViewConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ViewConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ViewConnection"');
  return ProjectV2ViewConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2ViewEdge_possibleTypes: string[] = ['ProjectV2ViewEdge'];
export const isProjectV2ViewEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2ViewEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2ViewEdge"');
  return ProjectV2ViewEdge_possibleTypes.includes(obj.__typename);
};

const ProjectV2Workflow_possibleTypes: string[] = ['ProjectV2Workflow'];
export const isProjectV2Workflow = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2Workflow => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2Workflow"');
  return ProjectV2Workflow_possibleTypes.includes(obj.__typename);
};

const ProjectV2WorkflowConnection_possibleTypes: string[] = ['ProjectV2WorkflowConnection'];
export const isProjectV2WorkflowConnection = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2WorkflowConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2WorkflowConnection"');
  return ProjectV2WorkflowConnection_possibleTypes.includes(obj.__typename);
};

const ProjectV2WorkflowEdge_possibleTypes: string[] = ['ProjectV2WorkflowEdge'];
export const isProjectV2WorkflowEdge = (
  obj?: { __typename?: any } | null,
): obj is ProjectV2WorkflowEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isProjectV2WorkflowEdge"');
  return ProjectV2WorkflowEdge_possibleTypes.includes(obj.__typename);
};

const PublicKey_possibleTypes: string[] = ['PublicKey'];
export const isPublicKey = (obj?: { __typename?: any } | null): obj is PublicKey => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPublicKey"');
  return PublicKey_possibleTypes.includes(obj.__typename);
};

const PublicKeyConnection_possibleTypes: string[] = ['PublicKeyConnection'];
export const isPublicKeyConnection = (
  obj?: { __typename?: any } | null,
): obj is PublicKeyConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPublicKeyConnection"');
  return PublicKeyConnection_possibleTypes.includes(obj.__typename);
};

const PublicKeyEdge_possibleTypes: string[] = ['PublicKeyEdge'];
export const isPublicKeyEdge = (obj?: { __typename?: any } | null): obj is PublicKeyEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPublicKeyEdge"');
  return PublicKeyEdge_possibleTypes.includes(obj.__typename);
};

const PublishSponsorsTierPayload_possibleTypes: string[] = ['PublishSponsorsTierPayload'];
export const isPublishSponsorsTierPayload = (
  obj?: { __typename?: any } | null,
): obj is PublishSponsorsTierPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPublishSponsorsTierPayload"');
  return PublishSponsorsTierPayload_possibleTypes.includes(obj.__typename);
};

const PullRequest_possibleTypes: string[] = ['PullRequest'];
export const isPullRequest = (obj?: { __typename?: any } | null): obj is PullRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequest"');
  return PullRequest_possibleTypes.includes(obj.__typename);
};

const PullRequestChangedFile_possibleTypes: string[] = ['PullRequestChangedFile'];
export const isPullRequestChangedFile = (
  obj?: { __typename?: any } | null,
): obj is PullRequestChangedFile => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestChangedFile"');
  return PullRequestChangedFile_possibleTypes.includes(obj.__typename);
};

const PullRequestChangedFileConnection_possibleTypes: string[] = [
  'PullRequestChangedFileConnection',
];
export const isPullRequestChangedFileConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestChangedFileConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestChangedFileConnection"');
  return PullRequestChangedFileConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestChangedFileEdge_possibleTypes: string[] = ['PullRequestChangedFileEdge'];
export const isPullRequestChangedFileEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestChangedFileEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestChangedFileEdge"');
  return PullRequestChangedFileEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestCommit_possibleTypes: string[] = ['PullRequestCommit'];
export const isPullRequestCommit = (
  obj?: { __typename?: any } | null,
): obj is PullRequestCommit => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestCommit"');
  return PullRequestCommit_possibleTypes.includes(obj.__typename);
};

const PullRequestCommitCommentThread_possibleTypes: string[] = ['PullRequestCommitCommentThread'];
export const isPullRequestCommitCommentThread = (
  obj?: { __typename?: any } | null,
): obj is PullRequestCommitCommentThread => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestCommitCommentThread"');
  return PullRequestCommitCommentThread_possibleTypes.includes(obj.__typename);
};

const PullRequestCommitConnection_possibleTypes: string[] = ['PullRequestCommitConnection'];
export const isPullRequestCommitConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestCommitConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestCommitConnection"');
  return PullRequestCommitConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestCommitEdge_possibleTypes: string[] = ['PullRequestCommitEdge'];
export const isPullRequestCommitEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestCommitEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestCommitEdge"');
  return PullRequestCommitEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestConnection_possibleTypes: string[] = ['PullRequestConnection'];
export const isPullRequestConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestConnection"');
  return PullRequestConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestContributionsByRepository_possibleTypes: string[] = [
  'PullRequestContributionsByRepository',
];
export const isPullRequestContributionsByRepository = (
  obj?: { __typename?: any } | null,
): obj is PullRequestContributionsByRepository => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestContributionsByRepository"');
  return PullRequestContributionsByRepository_possibleTypes.includes(obj.__typename);
};

const PullRequestEdge_possibleTypes: string[] = ['PullRequestEdge'];
export const isPullRequestEdge = (obj?: { __typename?: any } | null): obj is PullRequestEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestEdge"');
  return PullRequestEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestParameters_possibleTypes: string[] = ['PullRequestParameters'];
export const isPullRequestParameters = (
  obj?: { __typename?: any } | null,
): obj is PullRequestParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestParameters"');
  return PullRequestParameters_possibleTypes.includes(obj.__typename);
};

const PullRequestReview_possibleTypes: string[] = ['PullRequestReview'];
export const isPullRequestReview = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReview => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReview"');
  return PullRequestReview_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewComment_possibleTypes: string[] = ['PullRequestReviewComment'];
export const isPullRequestReviewComment = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReviewComment"');
  return PullRequestReviewComment_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewCommentConnection_possibleTypes: string[] = [
  'PullRequestReviewCommentConnection',
];
export const isPullRequestReviewCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewCommentConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestReviewCommentConnection"');
  return PullRequestReviewCommentConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewCommentEdge_possibleTypes: string[] = ['PullRequestReviewCommentEdge'];
export const isPullRequestReviewCommentEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewCommentEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestReviewCommentEdge"');
  return PullRequestReviewCommentEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewConnection_possibleTypes: string[] = ['PullRequestReviewConnection'];
export const isPullRequestReviewConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReviewConnection"');
  return PullRequestReviewConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewContributionsByRepository_possibleTypes: string[] = [
  'PullRequestReviewContributionsByRepository',
];
export const isPullRequestReviewContributionsByRepository = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewContributionsByRepository => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestReviewContributionsByRepository"');
  return PullRequestReviewContributionsByRepository_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewEdge_possibleTypes: string[] = ['PullRequestReviewEdge'];
export const isPullRequestReviewEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReviewEdge"');
  return PullRequestReviewEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewThread_possibleTypes: string[] = ['PullRequestReviewThread'];
export const isPullRequestReviewThread = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewThread => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReviewThread"');
  return PullRequestReviewThread_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewThreadConnection_possibleTypes: string[] = [
  'PullRequestReviewThreadConnection',
];
export const isPullRequestReviewThreadConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewThreadConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestReviewThreadConnection"');
  return PullRequestReviewThreadConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestReviewThreadEdge_possibleTypes: string[] = ['PullRequestReviewThreadEdge'];
export const isPullRequestReviewThreadEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestReviewThreadEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestReviewThreadEdge"');
  return PullRequestReviewThreadEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestRevisionMarker_possibleTypes: string[] = ['PullRequestRevisionMarker'];
export const isPullRequestRevisionMarker = (
  obj?: { __typename?: any } | null,
): obj is PullRequestRevisionMarker => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestRevisionMarker"');
  return PullRequestRevisionMarker_possibleTypes.includes(obj.__typename);
};

const PullRequestTemplate_possibleTypes: string[] = ['PullRequestTemplate'];
export const isPullRequestTemplate = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTemplate => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestTemplate"');
  return PullRequestTemplate_possibleTypes.includes(obj.__typename);
};

const PullRequestThread_possibleTypes: string[] = ['PullRequestThread'];
export const isPullRequestThread = (
  obj?: { __typename?: any } | null,
): obj is PullRequestThread => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestThread"');
  return PullRequestThread_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineConnection_possibleTypes: string[] = ['PullRequestTimelineConnection'];
export const isPullRequestTimelineConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestTimelineConnection"');
  return PullRequestTimelineConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineItem_possibleTypes: string[] = [
  'AssignedEvent',
  'BaseRefDeletedEvent',
  'BaseRefForcePushedEvent',
  'ClosedEvent',
  'Commit',
  'CommitCommentThread',
  'CrossReferencedEvent',
  'DemilestonedEvent',
  'DeployedEvent',
  'DeploymentEnvironmentChangedEvent',
  'HeadRefDeletedEvent',
  'HeadRefForcePushedEvent',
  'HeadRefRestoredEvent',
  'IssueComment',
  'LabeledEvent',
  'LockedEvent',
  'MergedEvent',
  'MilestonedEvent',
  'PullRequestReview',
  'PullRequestReviewComment',
  'PullRequestReviewThread',
  'ReferencedEvent',
  'RenamedTitleEvent',
  'ReopenedEvent',
  'ReviewDismissedEvent',
  'ReviewRequestRemovedEvent',
  'ReviewRequestedEvent',
  'SubscribedEvent',
  'UnassignedEvent',
  'UnlabeledEvent',
  'UnlockedEvent',
  'UnsubscribedEvent',
  'UserBlockedEvent',
];
export const isPullRequestTimelineItem = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestTimelineItem"');
  return PullRequestTimelineItem_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineItemEdge_possibleTypes: string[] = ['PullRequestTimelineItemEdge'];
export const isPullRequestTimelineItemEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestTimelineItemEdge"');
  return PullRequestTimelineItemEdge_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineItems_possibleTypes: string[] = [
  'AddedToMergeQueueEvent',
  'AddedToProjectEvent',
  'AssignedEvent',
  'AutoMergeDisabledEvent',
  'AutoMergeEnabledEvent',
  'AutoRebaseEnabledEvent',
  'AutoSquashEnabledEvent',
  'AutomaticBaseChangeFailedEvent',
  'AutomaticBaseChangeSucceededEvent',
  'BaseRefChangedEvent',
  'BaseRefDeletedEvent',
  'BaseRefForcePushedEvent',
  'ClosedEvent',
  'CommentDeletedEvent',
  'ConnectedEvent',
  'ConvertToDraftEvent',
  'ConvertedNoteToIssueEvent',
  'ConvertedToDiscussionEvent',
  'CrossReferencedEvent',
  'DemilestonedEvent',
  'DeployedEvent',
  'DeploymentEnvironmentChangedEvent',
  'DisconnectedEvent',
  'HeadRefDeletedEvent',
  'HeadRefForcePushedEvent',
  'HeadRefRestoredEvent',
  'IssueComment',
  'LabeledEvent',
  'LockedEvent',
  'MarkedAsDuplicateEvent',
  'MentionedEvent',
  'MergedEvent',
  'MilestonedEvent',
  'MovedColumnsInProjectEvent',
  'PinnedEvent',
  'PullRequestCommit',
  'PullRequestCommitCommentThread',
  'PullRequestReview',
  'PullRequestReviewThread',
  'PullRequestRevisionMarker',
  'ReadyForReviewEvent',
  'ReferencedEvent',
  'RemovedFromMergeQueueEvent',
  'RemovedFromProjectEvent',
  'RenamedTitleEvent',
  'ReopenedEvent',
  'ReviewDismissedEvent',
  'ReviewRequestRemovedEvent',
  'ReviewRequestedEvent',
  'SubscribedEvent',
  'TransferredEvent',
  'UnassignedEvent',
  'UnlabeledEvent',
  'UnlockedEvent',
  'UnmarkedAsDuplicateEvent',
  'UnpinnedEvent',
  'UnsubscribedEvent',
  'UserBlockedEvent',
];
export const isPullRequestTimelineItems = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineItems => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestTimelineItems"');
  return PullRequestTimelineItems_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineItemsConnection_possibleTypes: string[] = [
  'PullRequestTimelineItemsConnection',
];
export const isPullRequestTimelineItemsConnection = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineItemsConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestTimelineItemsConnection"');
  return PullRequestTimelineItemsConnection_possibleTypes.includes(obj.__typename);
};

const PullRequestTimelineItemsEdge_possibleTypes: string[] = ['PullRequestTimelineItemsEdge'];
export const isPullRequestTimelineItemsEdge = (
  obj?: { __typename?: any } | null,
): obj is PullRequestTimelineItemsEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isPullRequestTimelineItemsEdge"');
  return PullRequestTimelineItemsEdge_possibleTypes.includes(obj.__typename);
};

const Push_possibleTypes: string[] = ['Push'];
export const isPush = (obj?: { __typename?: any } | null): obj is Push => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPush"');
  return Push_possibleTypes.includes(obj.__typename);
};

const PushAllowance_possibleTypes: string[] = ['PushAllowance'];
export const isPushAllowance = (obj?: { __typename?: any } | null): obj is PushAllowance => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPushAllowance"');
  return PushAllowance_possibleTypes.includes(obj.__typename);
};

const PushAllowanceActor_possibleTypes: string[] = ['App', 'Team', 'User'];
export const isPushAllowanceActor = (
  obj?: { __typename?: any } | null,
): obj is PushAllowanceActor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPushAllowanceActor"');
  return PushAllowanceActor_possibleTypes.includes(obj.__typename);
};

const PushAllowanceConnection_possibleTypes: string[] = ['PushAllowanceConnection'];
export const isPushAllowanceConnection = (
  obj?: { __typename?: any } | null,
): obj is PushAllowanceConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPushAllowanceConnection"');
  return PushAllowanceConnection_possibleTypes.includes(obj.__typename);
};

const PushAllowanceEdge_possibleTypes: string[] = ['PushAllowanceEdge'];
export const isPushAllowanceEdge = (
  obj?: { __typename?: any } | null,
): obj is PushAllowanceEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isPushAllowanceEdge"');
  return PushAllowanceEdge_possibleTypes.includes(obj.__typename);
};

const Query_possibleTypes: string[] = ['Query'];
export const isQuery = (obj?: { __typename?: any } | null): obj is Query => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isQuery"');
  return Query_possibleTypes.includes(obj.__typename);
};

const RateLimit_possibleTypes: string[] = ['RateLimit'];
export const isRateLimit = (obj?: { __typename?: any } | null): obj is RateLimit => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRateLimit"');
  return RateLimit_possibleTypes.includes(obj.__typename);
};

const Reactable_possibleTypes: string[] = [
  'CommitComment',
  'Discussion',
  'DiscussionComment',
  'Issue',
  'IssueComment',
  'PullRequest',
  'PullRequestReview',
  'PullRequestReviewComment',
  'Release',
  'TeamDiscussion',
  'TeamDiscussionComment',
];
export const isReactable = (obj?: { __typename?: any } | null): obj is Reactable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactable"');
  return Reactable_possibleTypes.includes(obj.__typename);
};

const ReactingUserConnection_possibleTypes: string[] = ['ReactingUserConnection'];
export const isReactingUserConnection = (
  obj?: { __typename?: any } | null,
): obj is ReactingUserConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactingUserConnection"');
  return ReactingUserConnection_possibleTypes.includes(obj.__typename);
};

const ReactingUserEdge_possibleTypes: string[] = ['ReactingUserEdge'];
export const isReactingUserEdge = (obj?: { __typename?: any } | null): obj is ReactingUserEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactingUserEdge"');
  return ReactingUserEdge_possibleTypes.includes(obj.__typename);
};

const Reaction_possibleTypes: string[] = ['Reaction'];
export const isReaction = (obj?: { __typename?: any } | null): obj is Reaction => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReaction"');
  return Reaction_possibleTypes.includes(obj.__typename);
};

const ReactionConnection_possibleTypes: string[] = ['ReactionConnection'];
export const isReactionConnection = (
  obj?: { __typename?: any } | null,
): obj is ReactionConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactionConnection"');
  return ReactionConnection_possibleTypes.includes(obj.__typename);
};

const ReactionEdge_possibleTypes: string[] = ['ReactionEdge'];
export const isReactionEdge = (obj?: { __typename?: any } | null): obj is ReactionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactionEdge"');
  return ReactionEdge_possibleTypes.includes(obj.__typename);
};

const ReactionGroup_possibleTypes: string[] = ['ReactionGroup'];
export const isReactionGroup = (obj?: { __typename?: any } | null): obj is ReactionGroup => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactionGroup"');
  return ReactionGroup_possibleTypes.includes(obj.__typename);
};

const Reactor_possibleTypes: string[] = ['Bot', 'Mannequin', 'Organization', 'User'];
export const isReactor = (obj?: { __typename?: any } | null): obj is Reactor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactor"');
  return Reactor_possibleTypes.includes(obj.__typename);
};

const ReactorConnection_possibleTypes: string[] = ['ReactorConnection'];
export const isReactorConnection = (
  obj?: { __typename?: any } | null,
): obj is ReactorConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactorConnection"');
  return ReactorConnection_possibleTypes.includes(obj.__typename);
};

const ReactorEdge_possibleTypes: string[] = ['ReactorEdge'];
export const isReactorEdge = (obj?: { __typename?: any } | null): obj is ReactorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReactorEdge"');
  return ReactorEdge_possibleTypes.includes(obj.__typename);
};

const ReadyForReviewEvent_possibleTypes: string[] = ['ReadyForReviewEvent'];
export const isReadyForReviewEvent = (
  obj?: { __typename?: any } | null,
): obj is ReadyForReviewEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReadyForReviewEvent"');
  return ReadyForReviewEvent_possibleTypes.includes(obj.__typename);
};

const Ref_possibleTypes: string[] = ['Ref'];
export const isRef = (obj?: { __typename?: any } | null): obj is Ref => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRef"');
  return Ref_possibleTypes.includes(obj.__typename);
};

const RefConnection_possibleTypes: string[] = ['RefConnection'];
export const isRefConnection = (obj?: { __typename?: any } | null): obj is RefConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRefConnection"');
  return RefConnection_possibleTypes.includes(obj.__typename);
};

const RefEdge_possibleTypes: string[] = ['RefEdge'];
export const isRefEdge = (obj?: { __typename?: any } | null): obj is RefEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRefEdge"');
  return RefEdge_possibleTypes.includes(obj.__typename);
};

const RefNameConditionTarget_possibleTypes: string[] = ['RefNameConditionTarget'];
export const isRefNameConditionTarget = (
  obj?: { __typename?: any } | null,
): obj is RefNameConditionTarget => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRefNameConditionTarget"');
  return RefNameConditionTarget_possibleTypes.includes(obj.__typename);
};

const RefUpdateRule_possibleTypes: string[] = ['RefUpdateRule'];
export const isRefUpdateRule = (obj?: { __typename?: any } | null): obj is RefUpdateRule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRefUpdateRule"');
  return RefUpdateRule_possibleTypes.includes(obj.__typename);
};

const ReferencedEvent_possibleTypes: string[] = ['ReferencedEvent'];
export const isReferencedEvent = (obj?: { __typename?: any } | null): obj is ReferencedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReferencedEvent"');
  return ReferencedEvent_possibleTypes.includes(obj.__typename);
};

const ReferencedSubject_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isReferencedSubject = (
  obj?: { __typename?: any } | null,
): obj is ReferencedSubject => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReferencedSubject"');
  return ReferencedSubject_possibleTypes.includes(obj.__typename);
};

const RegenerateEnterpriseIdentityProviderRecoveryCodesPayload_possibleTypes: string[] = [
  'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload',
];
export const isRegenerateEnterpriseIdentityProviderRecoveryCodesPayload = (
  obj?: { __typename?: any } | null,
): obj is RegenerateEnterpriseIdentityProviderRecoveryCodesPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isRegenerateEnterpriseIdentityProviderRecoveryCodesPayload"',
    );
  return RegenerateEnterpriseIdentityProviderRecoveryCodesPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const RegenerateVerifiableDomainTokenPayload_possibleTypes: string[] = [
  'RegenerateVerifiableDomainTokenPayload',
];
export const isRegenerateVerifiableDomainTokenPayload = (
  obj?: { __typename?: any } | null,
): obj is RegenerateVerifiableDomainTokenPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRegenerateVerifiableDomainTokenPayload"');
  return RegenerateVerifiableDomainTokenPayload_possibleTypes.includes(obj.__typename);
};

const RejectDeploymentsPayload_possibleTypes: string[] = ['RejectDeploymentsPayload'];
export const isRejectDeploymentsPayload = (
  obj?: { __typename?: any } | null,
): obj is RejectDeploymentsPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRejectDeploymentsPayload"');
  return RejectDeploymentsPayload_possibleTypes.includes(obj.__typename);
};

const Release_possibleTypes: string[] = ['Release'];
export const isRelease = (obj?: { __typename?: any } | null): obj is Release => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRelease"');
  return Release_possibleTypes.includes(obj.__typename);
};

const ReleaseAsset_possibleTypes: string[] = ['ReleaseAsset'];
export const isReleaseAsset = (obj?: { __typename?: any } | null): obj is ReleaseAsset => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReleaseAsset"');
  return ReleaseAsset_possibleTypes.includes(obj.__typename);
};

const ReleaseAssetConnection_possibleTypes: string[] = ['ReleaseAssetConnection'];
export const isReleaseAssetConnection = (
  obj?: { __typename?: any } | null,
): obj is ReleaseAssetConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReleaseAssetConnection"');
  return ReleaseAssetConnection_possibleTypes.includes(obj.__typename);
};

const ReleaseAssetEdge_possibleTypes: string[] = ['ReleaseAssetEdge'];
export const isReleaseAssetEdge = (obj?: { __typename?: any } | null): obj is ReleaseAssetEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReleaseAssetEdge"');
  return ReleaseAssetEdge_possibleTypes.includes(obj.__typename);
};

const ReleaseConnection_possibleTypes: string[] = ['ReleaseConnection'];
export const isReleaseConnection = (
  obj?: { __typename?: any } | null,
): obj is ReleaseConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReleaseConnection"');
  return ReleaseConnection_possibleTypes.includes(obj.__typename);
};

const ReleaseEdge_possibleTypes: string[] = ['ReleaseEdge'];
export const isReleaseEdge = (obj?: { __typename?: any } | null): obj is ReleaseEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReleaseEdge"');
  return ReleaseEdge_possibleTypes.includes(obj.__typename);
};

const RemoveAssigneesFromAssignablePayload_possibleTypes: string[] = [
  'RemoveAssigneesFromAssignablePayload',
];
export const isRemoveAssigneesFromAssignablePayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveAssigneesFromAssignablePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveAssigneesFromAssignablePayload"');
  return RemoveAssigneesFromAssignablePayload_possibleTypes.includes(obj.__typename);
};

const RemoveEnterpriseAdminPayload_possibleTypes: string[] = ['RemoveEnterpriseAdminPayload'];
export const isRemoveEnterpriseAdminPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveEnterpriseAdminPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveEnterpriseAdminPayload"');
  return RemoveEnterpriseAdminPayload_possibleTypes.includes(obj.__typename);
};

const RemoveEnterpriseIdentityProviderPayload_possibleTypes: string[] = [
  'RemoveEnterpriseIdentityProviderPayload',
];
export const isRemoveEnterpriseIdentityProviderPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveEnterpriseIdentityProviderPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveEnterpriseIdentityProviderPayload"');
  return RemoveEnterpriseIdentityProviderPayload_possibleTypes.includes(obj.__typename);
};

const RemoveEnterpriseMemberPayload_possibleTypes: string[] = ['RemoveEnterpriseMemberPayload'];
export const isRemoveEnterpriseMemberPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveEnterpriseMemberPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveEnterpriseMemberPayload"');
  return RemoveEnterpriseMemberPayload_possibleTypes.includes(obj.__typename);
};

const RemoveEnterpriseOrganizationPayload_possibleTypes: string[] = [
  'RemoveEnterpriseOrganizationPayload',
];
export const isRemoveEnterpriseOrganizationPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveEnterpriseOrganizationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveEnterpriseOrganizationPayload"');
  return RemoveEnterpriseOrganizationPayload_possibleTypes.includes(obj.__typename);
};

const RemoveEnterpriseSupportEntitlementPayload_possibleTypes: string[] = [
  'RemoveEnterpriseSupportEntitlementPayload',
];
export const isRemoveEnterpriseSupportEntitlementPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveEnterpriseSupportEntitlementPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveEnterpriseSupportEntitlementPayload"');
  return RemoveEnterpriseSupportEntitlementPayload_possibleTypes.includes(obj.__typename);
};

const RemoveLabelsFromLabelablePayload_possibleTypes: string[] = [
  'RemoveLabelsFromLabelablePayload',
];
export const isRemoveLabelsFromLabelablePayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveLabelsFromLabelablePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveLabelsFromLabelablePayload"');
  return RemoveLabelsFromLabelablePayload_possibleTypes.includes(obj.__typename);
};

const RemoveOutsideCollaboratorPayload_possibleTypes: string[] = [
  'RemoveOutsideCollaboratorPayload',
];
export const isRemoveOutsideCollaboratorPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveOutsideCollaboratorPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRemoveOutsideCollaboratorPayload"');
  return RemoveOutsideCollaboratorPayload_possibleTypes.includes(obj.__typename);
};

const RemoveReactionPayload_possibleTypes: string[] = ['RemoveReactionPayload'];
export const isRemoveReactionPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveReactionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRemoveReactionPayload"');
  return RemoveReactionPayload_possibleTypes.includes(obj.__typename);
};

const RemoveStarPayload_possibleTypes: string[] = ['RemoveStarPayload'];
export const isRemoveStarPayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveStarPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRemoveStarPayload"');
  return RemoveStarPayload_possibleTypes.includes(obj.__typename);
};

const RemoveUpvotePayload_possibleTypes: string[] = ['RemoveUpvotePayload'];
export const isRemoveUpvotePayload = (
  obj?: { __typename?: any } | null,
): obj is RemoveUpvotePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRemoveUpvotePayload"');
  return RemoveUpvotePayload_possibleTypes.includes(obj.__typename);
};

const RemovedFromMergeQueueEvent_possibleTypes: string[] = ['RemovedFromMergeQueueEvent'];
export const isRemovedFromMergeQueueEvent = (
  obj?: { __typename?: any } | null,
): obj is RemovedFromMergeQueueEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRemovedFromMergeQueueEvent"');
  return RemovedFromMergeQueueEvent_possibleTypes.includes(obj.__typename);
};

const RemovedFromProjectEvent_possibleTypes: string[] = ['RemovedFromProjectEvent'];
export const isRemovedFromProjectEvent = (
  obj?: { __typename?: any } | null,
): obj is RemovedFromProjectEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRemovedFromProjectEvent"');
  return RemovedFromProjectEvent_possibleTypes.includes(obj.__typename);
};

const RenamedTitleEvent_possibleTypes: string[] = ['RenamedTitleEvent'];
export const isRenamedTitleEvent = (
  obj?: { __typename?: any } | null,
): obj is RenamedTitleEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRenamedTitleEvent"');
  return RenamedTitleEvent_possibleTypes.includes(obj.__typename);
};

const RenamedTitleSubject_possibleTypes: string[] = ['Issue', 'PullRequest'];
export const isRenamedTitleSubject = (
  obj?: { __typename?: any } | null,
): obj is RenamedTitleSubject => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRenamedTitleSubject"');
  return RenamedTitleSubject_possibleTypes.includes(obj.__typename);
};

const ReopenDiscussionPayload_possibleTypes: string[] = ['ReopenDiscussionPayload'];
export const isReopenDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is ReopenDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReopenDiscussionPayload"');
  return ReopenDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const ReopenIssuePayload_possibleTypes: string[] = ['ReopenIssuePayload'];
export const isReopenIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is ReopenIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReopenIssuePayload"');
  return ReopenIssuePayload_possibleTypes.includes(obj.__typename);
};

const ReopenPullRequestPayload_possibleTypes: string[] = ['ReopenPullRequestPayload'];
export const isReopenPullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is ReopenPullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReopenPullRequestPayload"');
  return ReopenPullRequestPayload_possibleTypes.includes(obj.__typename);
};

const ReopenedEvent_possibleTypes: string[] = ['ReopenedEvent'];
export const isReopenedEvent = (obj?: { __typename?: any } | null): obj is ReopenedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReopenedEvent"');
  return ReopenedEvent_possibleTypes.includes(obj.__typename);
};

const RepoAccessAuditEntry_possibleTypes: string[] = ['RepoAccessAuditEntry'];
export const isRepoAccessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoAccessAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoAccessAuditEntry"');
  return RepoAccessAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoAddMemberAuditEntry_possibleTypes: string[] = ['RepoAddMemberAuditEntry'];
export const isRepoAddMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoAddMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoAddMemberAuditEntry"');
  return RepoAddMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoAddTopicAuditEntry_possibleTypes: string[] = ['RepoAddTopicAuditEntry'];
export const isRepoAddTopicAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoAddTopicAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoAddTopicAuditEntry"');
  return RepoAddTopicAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoArchivedAuditEntry_possibleTypes: string[] = ['RepoArchivedAuditEntry'];
export const isRepoArchivedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoArchivedAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoArchivedAuditEntry"');
  return RepoArchivedAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoChangeMergeSettingAuditEntry_possibleTypes: string[] = [
  'RepoChangeMergeSettingAuditEntry',
];
export const isRepoChangeMergeSettingAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoChangeMergeSettingAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoChangeMergeSettingAuditEntry"');
  return RepoChangeMergeSettingAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigDisableAnonymousGitAccessAuditEntry_possibleTypes: string[] = [
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
];
export const isRepoConfigDisableAnonymousGitAccessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigDisableAnonymousGitAccessAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigDisableAnonymousGitAccessAuditEntry"');
  return RepoConfigDisableAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes: string[] = [
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
];
export const isRepoConfigDisableCollaboratorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigDisableCollaboratorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigDisableCollaboratorsOnlyAuditEntry"');
  return RepoConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigDisableContributorsOnlyAuditEntry_possibleTypes: string[] = [
  'RepoConfigDisableContributorsOnlyAuditEntry',
];
export const isRepoConfigDisableContributorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigDisableContributorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigDisableContributorsOnlyAuditEntry"');
  return RepoConfigDisableContributorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigDisableSockpuppetDisallowedAuditEntry_possibleTypes: string[] = [
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
];
export const isRepoConfigDisableSockpuppetDisallowedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigDisableSockpuppetDisallowedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigDisableSockpuppetDisallowedAuditEntry"');
  return RepoConfigDisableSockpuppetDisallowedAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigEnableAnonymousGitAccessAuditEntry_possibleTypes: string[] = [
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
];
export const isRepoConfigEnableAnonymousGitAccessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigEnableAnonymousGitAccessAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigEnableAnonymousGitAccessAuditEntry"');
  return RepoConfigEnableAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes: string[] = [
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
];
export const isRepoConfigEnableCollaboratorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigEnableCollaboratorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigEnableCollaboratorsOnlyAuditEntry"');
  return RepoConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigEnableContributorsOnlyAuditEntry_possibleTypes: string[] = [
  'RepoConfigEnableContributorsOnlyAuditEntry',
];
export const isRepoConfigEnableContributorsOnlyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigEnableContributorsOnlyAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigEnableContributorsOnlyAuditEntry"');
  return RepoConfigEnableContributorsOnlyAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigEnableSockpuppetDisallowedAuditEntry_possibleTypes: string[] = [
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
];
export const isRepoConfigEnableSockpuppetDisallowedAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigEnableSockpuppetDisallowedAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigEnableSockpuppetDisallowedAuditEntry"');
  return RepoConfigEnableSockpuppetDisallowedAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigLockAnonymousGitAccessAuditEntry_possibleTypes: string[] = [
  'RepoConfigLockAnonymousGitAccessAuditEntry',
];
export const isRepoConfigLockAnonymousGitAccessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigLockAnonymousGitAccessAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigLockAnonymousGitAccessAuditEntry"');
  return RepoConfigLockAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoConfigUnlockAnonymousGitAccessAuditEntry_possibleTypes: string[] = [
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
];
export const isRepoConfigUnlockAnonymousGitAccessAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoConfigUnlockAnonymousGitAccessAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepoConfigUnlockAnonymousGitAccessAuditEntry"');
  return RepoConfigUnlockAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoCreateAuditEntry_possibleTypes: string[] = ['RepoCreateAuditEntry'];
export const isRepoCreateAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoCreateAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoCreateAuditEntry"');
  return RepoCreateAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoDestroyAuditEntry_possibleTypes: string[] = ['RepoDestroyAuditEntry'];
export const isRepoDestroyAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoDestroyAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoDestroyAuditEntry"');
  return RepoDestroyAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoRemoveMemberAuditEntry_possibleTypes: string[] = ['RepoRemoveMemberAuditEntry'];
export const isRepoRemoveMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoRemoveMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoRemoveMemberAuditEntry"');
  return RepoRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepoRemoveTopicAuditEntry_possibleTypes: string[] = ['RepoRemoveTopicAuditEntry'];
export const isRepoRemoveTopicAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepoRemoveTopicAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepoRemoveTopicAuditEntry"');
  return RepoRemoveTopicAuditEntry_possibleTypes.includes(obj.__typename);
};

const Repository_possibleTypes: string[] = ['Repository'];
export const isRepository = (obj?: { __typename?: any } | null): obj is Repository => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepository"');
  return Repository_possibleTypes.includes(obj.__typename);
};

const RepositoryAuditEntryData_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipRepositoryAuditEntryData',
  'PrivateRepositoryForkingDisableAuditEntry',
  'PrivateRepositoryForkingEnableAuditEntry',
  'RepoAccessAuditEntry',
  'RepoAddMemberAuditEntry',
  'RepoAddTopicAuditEntry',
  'RepoArchivedAuditEntry',
  'RepoChangeMergeSettingAuditEntry',
  'RepoConfigDisableAnonymousGitAccessAuditEntry',
  'RepoConfigDisableCollaboratorsOnlyAuditEntry',
  'RepoConfigDisableContributorsOnlyAuditEntry',
  'RepoConfigDisableSockpuppetDisallowedAuditEntry',
  'RepoConfigEnableAnonymousGitAccessAuditEntry',
  'RepoConfigEnableCollaboratorsOnlyAuditEntry',
  'RepoConfigEnableContributorsOnlyAuditEntry',
  'RepoConfigEnableSockpuppetDisallowedAuditEntry',
  'RepoConfigLockAnonymousGitAccessAuditEntry',
  'RepoConfigUnlockAnonymousGitAccessAuditEntry',
  'RepoCreateAuditEntry',
  'RepoDestroyAuditEntry',
  'RepoRemoveMemberAuditEntry',
  'RepoRemoveTopicAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
];
export const isRepositoryAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is RepositoryAuditEntryData => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryAuditEntryData"');
  return RepositoryAuditEntryData_possibleTypes.includes(obj.__typename);
};

const RepositoryCodeowners_possibleTypes: string[] = ['RepositoryCodeowners'];
export const isRepositoryCodeowners = (
  obj?: { __typename?: any } | null,
): obj is RepositoryCodeowners => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryCodeowners"');
  return RepositoryCodeowners_possibleTypes.includes(obj.__typename);
};

const RepositoryCodeownersError_possibleTypes: string[] = ['RepositoryCodeownersError'];
export const isRepositoryCodeownersError = (
  obj?: { __typename?: any } | null,
): obj is RepositoryCodeownersError => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryCodeownersError"');
  return RepositoryCodeownersError_possibleTypes.includes(obj.__typename);
};

const RepositoryCollaboratorConnection_possibleTypes: string[] = [
  'RepositoryCollaboratorConnection',
];
export const isRepositoryCollaboratorConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryCollaboratorConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryCollaboratorConnection"');
  return RepositoryCollaboratorConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryCollaboratorEdge_possibleTypes: string[] = ['RepositoryCollaboratorEdge'];
export const isRepositoryCollaboratorEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryCollaboratorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryCollaboratorEdge"');
  return RepositoryCollaboratorEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryConnection_possibleTypes: string[] = ['RepositoryConnection'];
export const isRepositoryConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryConnection"');
  return RepositoryConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryContactLink_possibleTypes: string[] = ['RepositoryContactLink'];
export const isRepositoryContactLink = (
  obj?: { __typename?: any } | null,
): obj is RepositoryContactLink => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryContactLink"');
  return RepositoryContactLink_possibleTypes.includes(obj.__typename);
};

const RepositoryDiscussionAuthor_possibleTypes: string[] = ['Organization', 'User'];
export const isRepositoryDiscussionAuthor = (
  obj?: { __typename?: any } | null,
): obj is RepositoryDiscussionAuthor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryDiscussionAuthor"');
  return RepositoryDiscussionAuthor_possibleTypes.includes(obj.__typename);
};

const RepositoryDiscussionCommentAuthor_possibleTypes: string[] = ['Organization', 'User'];
export const isRepositoryDiscussionCommentAuthor = (
  obj?: { __typename?: any } | null,
): obj is RepositoryDiscussionCommentAuthor => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryDiscussionCommentAuthor"');
  return RepositoryDiscussionCommentAuthor_possibleTypes.includes(obj.__typename);
};

const RepositoryEdge_possibleTypes: string[] = ['RepositoryEdge'];
export const isRepositoryEdge = (obj?: { __typename?: any } | null): obj is RepositoryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryEdge"');
  return RepositoryEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryIdConditionTarget_possibleTypes: string[] = ['RepositoryIdConditionTarget'];
export const isRepositoryIdConditionTarget = (
  obj?: { __typename?: any } | null,
): obj is RepositoryIdConditionTarget => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryIdConditionTarget"');
  return RepositoryIdConditionTarget_possibleTypes.includes(obj.__typename);
};

const RepositoryInfo_possibleTypes: string[] = ['Repository'];
export const isRepositoryInfo = (obj?: { __typename?: any } | null): obj is RepositoryInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryInfo"');
  return RepositoryInfo_possibleTypes.includes(obj.__typename);
};

const RepositoryInteractionAbility_possibleTypes: string[] = ['RepositoryInteractionAbility'];
export const isRepositoryInteractionAbility = (
  obj?: { __typename?: any } | null,
): obj is RepositoryInteractionAbility => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryInteractionAbility"');
  return RepositoryInteractionAbility_possibleTypes.includes(obj.__typename);
};

const RepositoryInvitation_possibleTypes: string[] = ['RepositoryInvitation'];
export const isRepositoryInvitation = (
  obj?: { __typename?: any } | null,
): obj is RepositoryInvitation => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryInvitation"');
  return RepositoryInvitation_possibleTypes.includes(obj.__typename);
};

const RepositoryInvitationConnection_possibleTypes: string[] = ['RepositoryInvitationConnection'];
export const isRepositoryInvitationConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryInvitationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryInvitationConnection"');
  return RepositoryInvitationConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryInvitationEdge_possibleTypes: string[] = ['RepositoryInvitationEdge'];
export const isRepositoryInvitationEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryInvitationEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryInvitationEdge"');
  return RepositoryInvitationEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryMigration_possibleTypes: string[] = ['RepositoryMigration'];
export const isRepositoryMigration = (
  obj?: { __typename?: any } | null,
): obj is RepositoryMigration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryMigration"');
  return RepositoryMigration_possibleTypes.includes(obj.__typename);
};

const RepositoryMigrationConnection_possibleTypes: string[] = ['RepositoryMigrationConnection'];
export const isRepositoryMigrationConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryMigrationConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryMigrationConnection"');
  return RepositoryMigrationConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryMigrationEdge_possibleTypes: string[] = ['RepositoryMigrationEdge'];
export const isRepositoryMigrationEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryMigrationEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryMigrationEdge"');
  return RepositoryMigrationEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryNameConditionTarget_possibleTypes: string[] = ['RepositoryNameConditionTarget'];
export const isRepositoryNameConditionTarget = (
  obj?: { __typename?: any } | null,
): obj is RepositoryNameConditionTarget => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryNameConditionTarget"');
  return RepositoryNameConditionTarget_possibleTypes.includes(obj.__typename);
};

const RepositoryNode_possibleTypes: string[] = [
  'CommitComment',
  'CommitCommentThread',
  'DependabotUpdate',
  'Discussion',
  'DiscussionCategory',
  'Issue',
  'IssueComment',
  'PinnedDiscussion',
  'PullRequest',
  'PullRequestCommitCommentThread',
  'PullRequestReview',
  'PullRequestReviewComment',
  'RepositoryVulnerabilityAlert',
];
export const isRepositoryNode = (obj?: { __typename?: any } | null): obj is RepositoryNode => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryNode"');
  return RepositoryNode_possibleTypes.includes(obj.__typename);
};

const RepositoryOwner_possibleTypes: string[] = ['Organization', 'User'];
export const isRepositoryOwner = (obj?: { __typename?: any } | null): obj is RepositoryOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryOwner"');
  return RepositoryOwner_possibleTypes.includes(obj.__typename);
};

const RepositoryRule_possibleTypes: string[] = ['RepositoryRule'];
export const isRepositoryRule = (obj?: { __typename?: any } | null): obj is RepositoryRule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRule"');
  return RepositoryRule_possibleTypes.includes(obj.__typename);
};

const RepositoryRuleConditions_possibleTypes: string[] = ['RepositoryRuleConditions'];
export const isRepositoryRuleConditions = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRuleConditions => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRuleConditions"');
  return RepositoryRuleConditions_possibleTypes.includes(obj.__typename);
};

const RepositoryRuleConnection_possibleTypes: string[] = ['RepositoryRuleConnection'];
export const isRepositoryRuleConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRuleConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRuleConnection"');
  return RepositoryRuleConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryRuleEdge_possibleTypes: string[] = ['RepositoryRuleEdge'];
export const isRepositoryRuleEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRuleEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRuleEdge"');
  return RepositoryRuleEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryRuleset_possibleTypes: string[] = ['RepositoryRuleset'];
export const isRepositoryRuleset = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRuleset => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRuleset"');
  return RepositoryRuleset_possibleTypes.includes(obj.__typename);
};

const RepositoryRulesetBypassActor_possibleTypes: string[] = ['RepositoryRulesetBypassActor'];
export const isRepositoryRulesetBypassActor = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRulesetBypassActor => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryRulesetBypassActor"');
  return RepositoryRulesetBypassActor_possibleTypes.includes(obj.__typename);
};

const RepositoryRulesetBypassActorConnection_possibleTypes: string[] = [
  'RepositoryRulesetBypassActorConnection',
];
export const isRepositoryRulesetBypassActorConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRulesetBypassActorConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryRulesetBypassActorConnection"');
  return RepositoryRulesetBypassActorConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryRulesetBypassActorEdge_possibleTypes: string[] = [
  'RepositoryRulesetBypassActorEdge',
];
export const isRepositoryRulesetBypassActorEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRulesetBypassActorEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryRulesetBypassActorEdge"');
  return RepositoryRulesetBypassActorEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryRulesetConnection_possibleTypes: string[] = ['RepositoryRulesetConnection'];
export const isRepositoryRulesetConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRulesetConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRulesetConnection"');
  return RepositoryRulesetConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryRulesetEdge_possibleTypes: string[] = ['RepositoryRulesetEdge'];
export const isRepositoryRulesetEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryRulesetEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryRulesetEdge"');
  return RepositoryRulesetEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryTopic_possibleTypes: string[] = ['RepositoryTopic'];
export const isRepositoryTopic = (obj?: { __typename?: any } | null): obj is RepositoryTopic => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryTopic"');
  return RepositoryTopic_possibleTypes.includes(obj.__typename);
};

const RepositoryTopicConnection_possibleTypes: string[] = ['RepositoryTopicConnection'];
export const isRepositoryTopicConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryTopicConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryTopicConnection"');
  return RepositoryTopicConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryTopicEdge_possibleTypes: string[] = ['RepositoryTopicEdge'];
export const isRepositoryTopicEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryTopicEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRepositoryTopicEdge"');
  return RepositoryTopicEdge_possibleTypes.includes(obj.__typename);
};

const RepositoryVisibilityChangeDisableAuditEntry_possibleTypes: string[] = [
  'RepositoryVisibilityChangeDisableAuditEntry',
];
export const isRepositoryVisibilityChangeDisableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepositoryVisibilityChangeDisableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryVisibilityChangeDisableAuditEntry"');
  return RepositoryVisibilityChangeDisableAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepositoryVisibilityChangeEnableAuditEntry_possibleTypes: string[] = [
  'RepositoryVisibilityChangeEnableAuditEntry',
];
export const isRepositoryVisibilityChangeEnableAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is RepositoryVisibilityChangeEnableAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryVisibilityChangeEnableAuditEntry"');
  return RepositoryVisibilityChangeEnableAuditEntry_possibleTypes.includes(obj.__typename);
};

const RepositoryVulnerabilityAlert_possibleTypes: string[] = ['RepositoryVulnerabilityAlert'];
export const isRepositoryVulnerabilityAlert = (
  obj?: { __typename?: any } | null,
): obj is RepositoryVulnerabilityAlert => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryVulnerabilityAlert"');
  return RepositoryVulnerabilityAlert_possibleTypes.includes(obj.__typename);
};

const RepositoryVulnerabilityAlertConnection_possibleTypes: string[] = [
  'RepositoryVulnerabilityAlertConnection',
];
export const isRepositoryVulnerabilityAlertConnection = (
  obj?: { __typename?: any } | null,
): obj is RepositoryVulnerabilityAlertConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryVulnerabilityAlertConnection"');
  return RepositoryVulnerabilityAlertConnection_possibleTypes.includes(obj.__typename);
};

const RepositoryVulnerabilityAlertEdge_possibleTypes: string[] = [
  'RepositoryVulnerabilityAlertEdge',
];
export const isRepositoryVulnerabilityAlertEdge = (
  obj?: { __typename?: any } | null,
): obj is RepositoryVulnerabilityAlertEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRepositoryVulnerabilityAlertEdge"');
  return RepositoryVulnerabilityAlertEdge_possibleTypes.includes(obj.__typename);
};

const RequestReviewsPayload_possibleTypes: string[] = ['RequestReviewsPayload'];
export const isRequestReviewsPayload = (
  obj?: { __typename?: any } | null,
): obj is RequestReviewsPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRequestReviewsPayload"');
  return RequestReviewsPayload_possibleTypes.includes(obj.__typename);
};

const RequestedReviewer_possibleTypes: string[] = ['Bot', 'Mannequin', 'Team', 'User'];
export const isRequestedReviewer = (
  obj?: { __typename?: any } | null,
): obj is RequestedReviewer => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRequestedReviewer"');
  return RequestedReviewer_possibleTypes.includes(obj.__typename);
};

const RequestedReviewerConnection_possibleTypes: string[] = ['RequestedReviewerConnection'];
export const isRequestedReviewerConnection = (
  obj?: { __typename?: any } | null,
): obj is RequestedReviewerConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRequestedReviewerConnection"');
  return RequestedReviewerConnection_possibleTypes.includes(obj.__typename);
};

const RequestedReviewerEdge_possibleTypes: string[] = ['RequestedReviewerEdge'];
export const isRequestedReviewerEdge = (
  obj?: { __typename?: any } | null,
): obj is RequestedReviewerEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRequestedReviewerEdge"');
  return RequestedReviewerEdge_possibleTypes.includes(obj.__typename);
};

const RequirableByPullRequest_possibleTypes: string[] = ['CheckRun', 'StatusContext'];
export const isRequirableByPullRequest = (
  obj?: { __typename?: any } | null,
): obj is RequirableByPullRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRequirableByPullRequest"');
  return RequirableByPullRequest_possibleTypes.includes(obj.__typename);
};

const RequiredDeploymentsParameters_possibleTypes: string[] = ['RequiredDeploymentsParameters'];
export const isRequiredDeploymentsParameters = (
  obj?: { __typename?: any } | null,
): obj is RequiredDeploymentsParameters => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRequiredDeploymentsParameters"');
  return RequiredDeploymentsParameters_possibleTypes.includes(obj.__typename);
};

const RequiredStatusCheckDescription_possibleTypes: string[] = ['RequiredStatusCheckDescription'];
export const isRequiredStatusCheckDescription = (
  obj?: { __typename?: any } | null,
): obj is RequiredStatusCheckDescription => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRequiredStatusCheckDescription"');
  return RequiredStatusCheckDescription_possibleTypes.includes(obj.__typename);
};

const RequiredStatusChecksParameters_possibleTypes: string[] = ['RequiredStatusChecksParameters'];
export const isRequiredStatusChecksParameters = (
  obj?: { __typename?: any } | null,
): obj is RequiredStatusChecksParameters => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isRequiredStatusChecksParameters"');
  return RequiredStatusChecksParameters_possibleTypes.includes(obj.__typename);
};

const RerequestCheckSuitePayload_possibleTypes: string[] = ['RerequestCheckSuitePayload'];
export const isRerequestCheckSuitePayload = (
  obj?: { __typename?: any } | null,
): obj is RerequestCheckSuitePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRerequestCheckSuitePayload"');
  return RerequestCheckSuitePayload_possibleTypes.includes(obj.__typename);
};

const ResolveReviewThreadPayload_possibleTypes: string[] = ['ResolveReviewThreadPayload'];
export const isResolveReviewThreadPayload = (
  obj?: { __typename?: any } | null,
): obj is ResolveReviewThreadPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isResolveReviewThreadPayload"');
  return ResolveReviewThreadPayload_possibleTypes.includes(obj.__typename);
};

const RestrictedContribution_possibleTypes: string[] = ['RestrictedContribution'];
export const isRestrictedContribution = (
  obj?: { __typename?: any } | null,
): obj is RestrictedContribution => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRestrictedContribution"');
  return RestrictedContribution_possibleTypes.includes(obj.__typename);
};

const RetireSponsorsTierPayload_possibleTypes: string[] = ['RetireSponsorsTierPayload'];
export const isRetireSponsorsTierPayload = (
  obj?: { __typename?: any } | null,
): obj is RetireSponsorsTierPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRetireSponsorsTierPayload"');
  return RetireSponsorsTierPayload_possibleTypes.includes(obj.__typename);
};

const RevertPullRequestPayload_possibleTypes: string[] = ['RevertPullRequestPayload'];
export const isRevertPullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is RevertPullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRevertPullRequestPayload"');
  return RevertPullRequestPayload_possibleTypes.includes(obj.__typename);
};

const ReviewDismissalAllowance_possibleTypes: string[] = ['ReviewDismissalAllowance'];
export const isReviewDismissalAllowance = (
  obj?: { __typename?: any } | null,
): obj is ReviewDismissalAllowance => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewDismissalAllowance"');
  return ReviewDismissalAllowance_possibleTypes.includes(obj.__typename);
};

const ReviewDismissalAllowanceActor_possibleTypes: string[] = ['App', 'Team', 'User'];
export const isReviewDismissalAllowanceActor = (
  obj?: { __typename?: any } | null,
): obj is ReviewDismissalAllowanceActor => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isReviewDismissalAllowanceActor"');
  return ReviewDismissalAllowanceActor_possibleTypes.includes(obj.__typename);
};

const ReviewDismissalAllowanceConnection_possibleTypes: string[] = [
  'ReviewDismissalAllowanceConnection',
];
export const isReviewDismissalAllowanceConnection = (
  obj?: { __typename?: any } | null,
): obj is ReviewDismissalAllowanceConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isReviewDismissalAllowanceConnection"');
  return ReviewDismissalAllowanceConnection_possibleTypes.includes(obj.__typename);
};

const ReviewDismissalAllowanceEdge_possibleTypes: string[] = ['ReviewDismissalAllowanceEdge'];
export const isReviewDismissalAllowanceEdge = (
  obj?: { __typename?: any } | null,
): obj is ReviewDismissalAllowanceEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isReviewDismissalAllowanceEdge"');
  return ReviewDismissalAllowanceEdge_possibleTypes.includes(obj.__typename);
};

const ReviewDismissedEvent_possibleTypes: string[] = ['ReviewDismissedEvent'];
export const isReviewDismissedEvent = (
  obj?: { __typename?: any } | null,
): obj is ReviewDismissedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewDismissedEvent"');
  return ReviewDismissedEvent_possibleTypes.includes(obj.__typename);
};

const ReviewRequest_possibleTypes: string[] = ['ReviewRequest'];
export const isReviewRequest = (obj?: { __typename?: any } | null): obj is ReviewRequest => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewRequest"');
  return ReviewRequest_possibleTypes.includes(obj.__typename);
};

const ReviewRequestConnection_possibleTypes: string[] = ['ReviewRequestConnection'];
export const isReviewRequestConnection = (
  obj?: { __typename?: any } | null,
): obj is ReviewRequestConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewRequestConnection"');
  return ReviewRequestConnection_possibleTypes.includes(obj.__typename);
};

const ReviewRequestEdge_possibleTypes: string[] = ['ReviewRequestEdge'];
export const isReviewRequestEdge = (
  obj?: { __typename?: any } | null,
): obj is ReviewRequestEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewRequestEdge"');
  return ReviewRequestEdge_possibleTypes.includes(obj.__typename);
};

const ReviewRequestRemovedEvent_possibleTypes: string[] = ['ReviewRequestRemovedEvent'];
export const isReviewRequestRemovedEvent = (
  obj?: { __typename?: any } | null,
): obj is ReviewRequestRemovedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewRequestRemovedEvent"');
  return ReviewRequestRemovedEvent_possibleTypes.includes(obj.__typename);
};

const ReviewRequestedEvent_possibleTypes: string[] = ['ReviewRequestedEvent'];
export const isReviewRequestedEvent = (
  obj?: { __typename?: any } | null,
): obj is ReviewRequestedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isReviewRequestedEvent"');
  return ReviewRequestedEvent_possibleTypes.includes(obj.__typename);
};

const ReviewStatusHovercardContext_possibleTypes: string[] = ['ReviewStatusHovercardContext'];
export const isReviewStatusHovercardContext = (
  obj?: { __typename?: any } | null,
): obj is ReviewStatusHovercardContext => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isReviewStatusHovercardContext"');
  return ReviewStatusHovercardContext_possibleTypes.includes(obj.__typename);
};

const RevokeEnterpriseOrganizationsMigratorRolePayload_possibleTypes: string[] = [
  'RevokeEnterpriseOrganizationsMigratorRolePayload',
];
export const isRevokeEnterpriseOrganizationsMigratorRolePayload = (
  obj?: { __typename?: any } | null,
): obj is RevokeEnterpriseOrganizationsMigratorRolePayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isRevokeEnterpriseOrganizationsMigratorRolePayload"',
    );
  return RevokeEnterpriseOrganizationsMigratorRolePayload_possibleTypes.includes(obj.__typename);
};

const RevokeMigratorRolePayload_possibleTypes: string[] = ['RevokeMigratorRolePayload'];
export const isRevokeMigratorRolePayload = (
  obj?: { __typename?: any } | null,
): obj is RevokeMigratorRolePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRevokeMigratorRolePayload"');
  return RevokeMigratorRolePayload_possibleTypes.includes(obj.__typename);
};

const RuleParameters_possibleTypes: string[] = [
  'BranchNamePatternParameters',
  'CommitAuthorEmailPatternParameters',
  'CommitMessagePatternParameters',
  'CommitterEmailPatternParameters',
  'PullRequestParameters',
  'RequiredDeploymentsParameters',
  'RequiredStatusChecksParameters',
  'TagNamePatternParameters',
  'UpdateParameters',
  'WorkflowsParameters',
];
export const isRuleParameters = (obj?: { __typename?: any } | null): obj is RuleParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRuleParameters"');
  return RuleParameters_possibleTypes.includes(obj.__typename);
};

const RuleSource_possibleTypes: string[] = ['Organization', 'Repository'];
export const isRuleSource = (obj?: { __typename?: any } | null): obj is RuleSource => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isRuleSource"');
  return RuleSource_possibleTypes.includes(obj.__typename);
};

const SavedReply_possibleTypes: string[] = ['SavedReply'];
export const isSavedReply = (obj?: { __typename?: any } | null): obj is SavedReply => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSavedReply"');
  return SavedReply_possibleTypes.includes(obj.__typename);
};

const SavedReplyConnection_possibleTypes: string[] = ['SavedReplyConnection'];
export const isSavedReplyConnection = (
  obj?: { __typename?: any } | null,
): obj is SavedReplyConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSavedReplyConnection"');
  return SavedReplyConnection_possibleTypes.includes(obj.__typename);
};

const SavedReplyEdge_possibleTypes: string[] = ['SavedReplyEdge'];
export const isSavedReplyEdge = (obj?: { __typename?: any } | null): obj is SavedReplyEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSavedReplyEdge"');
  return SavedReplyEdge_possibleTypes.includes(obj.__typename);
};

const SearchResultItem_possibleTypes: string[] = [
  'App',
  'Discussion',
  'Issue',
  'MarketplaceListing',
  'Organization',
  'PullRequest',
  'Repository',
  'User',
];
export const isSearchResultItem = (obj?: { __typename?: any } | null): obj is SearchResultItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSearchResultItem"');
  return SearchResultItem_possibleTypes.includes(obj.__typename);
};

const SearchResultItemConnection_possibleTypes: string[] = ['SearchResultItemConnection'];
export const isSearchResultItemConnection = (
  obj?: { __typename?: any } | null,
): obj is SearchResultItemConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSearchResultItemConnection"');
  return SearchResultItemConnection_possibleTypes.includes(obj.__typename);
};

const SearchResultItemEdge_possibleTypes: string[] = ['SearchResultItemEdge'];
export const isSearchResultItemEdge = (
  obj?: { __typename?: any } | null,
): obj is SearchResultItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSearchResultItemEdge"');
  return SearchResultItemEdge_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisory_possibleTypes: string[] = ['SecurityAdvisory'];
export const isSecurityAdvisory = (obj?: { __typename?: any } | null): obj is SecurityAdvisory => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisory"');
  return SecurityAdvisory_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryConnection_possibleTypes: string[] = ['SecurityAdvisoryConnection'];
export const isSecurityAdvisoryConnection = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisoryConnection"');
  return SecurityAdvisoryConnection_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryEdge_possibleTypes: string[] = ['SecurityAdvisoryEdge'];
export const isSecurityAdvisoryEdge = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisoryEdge"');
  return SecurityAdvisoryEdge_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryIdentifier_possibleTypes: string[] = ['SecurityAdvisoryIdentifier'];
export const isSecurityAdvisoryIdentifier = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryIdentifier => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisoryIdentifier"');
  return SecurityAdvisoryIdentifier_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryPackage_possibleTypes: string[] = ['SecurityAdvisoryPackage'];
export const isSecurityAdvisoryPackage = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryPackage => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisoryPackage"');
  return SecurityAdvisoryPackage_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryPackageVersion_possibleTypes: string[] = ['SecurityAdvisoryPackageVersion'];
export const isSecurityAdvisoryPackageVersion = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryPackageVersion => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSecurityAdvisoryPackageVersion"');
  return SecurityAdvisoryPackageVersion_possibleTypes.includes(obj.__typename);
};

const SecurityAdvisoryReference_possibleTypes: string[] = ['SecurityAdvisoryReference'];
export const isSecurityAdvisoryReference = (
  obj?: { __typename?: any } | null,
): obj is SecurityAdvisoryReference => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityAdvisoryReference"');
  return SecurityAdvisoryReference_possibleTypes.includes(obj.__typename);
};

const SecurityVulnerability_possibleTypes: string[] = ['SecurityVulnerability'];
export const isSecurityVulnerability = (
  obj?: { __typename?: any } | null,
): obj is SecurityVulnerability => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityVulnerability"');
  return SecurityVulnerability_possibleTypes.includes(obj.__typename);
};

const SecurityVulnerabilityConnection_possibleTypes: string[] = ['SecurityVulnerabilityConnection'];
export const isSecurityVulnerabilityConnection = (
  obj?: { __typename?: any } | null,
): obj is SecurityVulnerabilityConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSecurityVulnerabilityConnection"');
  return SecurityVulnerabilityConnection_possibleTypes.includes(obj.__typename);
};

const SecurityVulnerabilityEdge_possibleTypes: string[] = ['SecurityVulnerabilityEdge'];
export const isSecurityVulnerabilityEdge = (
  obj?: { __typename?: any } | null,
): obj is SecurityVulnerabilityEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSecurityVulnerabilityEdge"');
  return SecurityVulnerabilityEdge_possibleTypes.includes(obj.__typename);
};

const SetEnterpriseIdentityProviderPayload_possibleTypes: string[] = [
  'SetEnterpriseIdentityProviderPayload',
];
export const isSetEnterpriseIdentityProviderPayload = (
  obj?: { __typename?: any } | null,
): obj is SetEnterpriseIdentityProviderPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSetEnterpriseIdentityProviderPayload"');
  return SetEnterpriseIdentityProviderPayload_possibleTypes.includes(obj.__typename);
};

const SetOrganizationInteractionLimitPayload_possibleTypes: string[] = [
  'SetOrganizationInteractionLimitPayload',
];
export const isSetOrganizationInteractionLimitPayload = (
  obj?: { __typename?: any } | null,
): obj is SetOrganizationInteractionLimitPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSetOrganizationInteractionLimitPayload"');
  return SetOrganizationInteractionLimitPayload_possibleTypes.includes(obj.__typename);
};

const SetRepositoryInteractionLimitPayload_possibleTypes: string[] = [
  'SetRepositoryInteractionLimitPayload',
];
export const isSetRepositoryInteractionLimitPayload = (
  obj?: { __typename?: any } | null,
): obj is SetRepositoryInteractionLimitPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSetRepositoryInteractionLimitPayload"');
  return SetRepositoryInteractionLimitPayload_possibleTypes.includes(obj.__typename);
};

const SetUserInteractionLimitPayload_possibleTypes: string[] = ['SetUserInteractionLimitPayload'];
export const isSetUserInteractionLimitPayload = (
  obj?: { __typename?: any } | null,
): obj is SetUserInteractionLimitPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSetUserInteractionLimitPayload"');
  return SetUserInteractionLimitPayload_possibleTypes.includes(obj.__typename);
};

const SmimeSignature_possibleTypes: string[] = ['SmimeSignature'];
export const isSmimeSignature = (obj?: { __typename?: any } | null): obj is SmimeSignature => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSmimeSignature"');
  return SmimeSignature_possibleTypes.includes(obj.__typename);
};

const SocialAccount_possibleTypes: string[] = ['SocialAccount'];
export const isSocialAccount = (obj?: { __typename?: any } | null): obj is SocialAccount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSocialAccount"');
  return SocialAccount_possibleTypes.includes(obj.__typename);
};

const SocialAccountConnection_possibleTypes: string[] = ['SocialAccountConnection'];
export const isSocialAccountConnection = (
  obj?: { __typename?: any } | null,
): obj is SocialAccountConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSocialAccountConnection"');
  return SocialAccountConnection_possibleTypes.includes(obj.__typename);
};

const SocialAccountEdge_possibleTypes: string[] = ['SocialAccountEdge'];
export const isSocialAccountEdge = (
  obj?: { __typename?: any } | null,
): obj is SocialAccountEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSocialAccountEdge"');
  return SocialAccountEdge_possibleTypes.includes(obj.__typename);
};

const Sponsor_possibleTypes: string[] = ['Organization', 'User'];
export const isSponsor = (obj?: { __typename?: any } | null): obj is Sponsor => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsor"');
  return Sponsor_possibleTypes.includes(obj.__typename);
};

const SponsorConnection_possibleTypes: string[] = ['SponsorConnection'];
export const isSponsorConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorConnection"');
  return SponsorConnection_possibleTypes.includes(obj.__typename);
};

const SponsorEdge_possibleTypes: string[] = ['SponsorEdge'];
export const isSponsorEdge = (obj?: { __typename?: any } | null): obj is SponsorEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorEdge"');
  return SponsorEdge_possibleTypes.includes(obj.__typename);
};

const Sponsorable_possibleTypes: string[] = ['Organization', 'User'];
export const isSponsorable = (obj?: { __typename?: any } | null): obj is Sponsorable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorable"');
  return Sponsorable_possibleTypes.includes(obj.__typename);
};

const SponsorableItem_possibleTypes: string[] = ['Organization', 'User'];
export const isSponsorableItem = (obj?: { __typename?: any } | null): obj is SponsorableItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorableItem"');
  return SponsorableItem_possibleTypes.includes(obj.__typename);
};

const SponsorableItemConnection_possibleTypes: string[] = ['SponsorableItemConnection'];
export const isSponsorableItemConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorableItemConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorableItemConnection"');
  return SponsorableItemConnection_possibleTypes.includes(obj.__typename);
};

const SponsorableItemEdge_possibleTypes: string[] = ['SponsorableItemEdge'];
export const isSponsorableItemEdge = (
  obj?: { __typename?: any } | null,
): obj is SponsorableItemEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorableItemEdge"');
  return SponsorableItemEdge_possibleTypes.includes(obj.__typename);
};

const SponsorsActivity_possibleTypes: string[] = ['SponsorsActivity'];
export const isSponsorsActivity = (obj?: { __typename?: any } | null): obj is SponsorsActivity => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsActivity"');
  return SponsorsActivity_possibleTypes.includes(obj.__typename);
};

const SponsorsActivityConnection_possibleTypes: string[] = ['SponsorsActivityConnection'];
export const isSponsorsActivityConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorsActivityConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsActivityConnection"');
  return SponsorsActivityConnection_possibleTypes.includes(obj.__typename);
};

const SponsorsActivityEdge_possibleTypes: string[] = ['SponsorsActivityEdge'];
export const isSponsorsActivityEdge = (
  obj?: { __typename?: any } | null,
): obj is SponsorsActivityEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsActivityEdge"');
  return SponsorsActivityEdge_possibleTypes.includes(obj.__typename);
};

const SponsorsGoal_possibleTypes: string[] = ['SponsorsGoal'];
export const isSponsorsGoal = (obj?: { __typename?: any } | null): obj is SponsorsGoal => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsGoal"');
  return SponsorsGoal_possibleTypes.includes(obj.__typename);
};

const SponsorsListing_possibleTypes: string[] = ['SponsorsListing'];
export const isSponsorsListing = (obj?: { __typename?: any } | null): obj is SponsorsListing => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsListing"');
  return SponsorsListing_possibleTypes.includes(obj.__typename);
};

const SponsorsListingFeatureableItem_possibleTypes: string[] = ['Repository', 'User'];
export const isSponsorsListingFeatureableItem = (
  obj?: { __typename?: any } | null,
): obj is SponsorsListingFeatureableItem => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSponsorsListingFeatureableItem"');
  return SponsorsListingFeatureableItem_possibleTypes.includes(obj.__typename);
};

const SponsorsListingFeaturedItem_possibleTypes: string[] = ['SponsorsListingFeaturedItem'];
export const isSponsorsListingFeaturedItem = (
  obj?: { __typename?: any } | null,
): obj is SponsorsListingFeaturedItem => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsListingFeaturedItem"');
  return SponsorsListingFeaturedItem_possibleTypes.includes(obj.__typename);
};

const SponsorsTier_possibleTypes: string[] = ['SponsorsTier'];
export const isSponsorsTier = (obj?: { __typename?: any } | null): obj is SponsorsTier => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsTier"');
  return SponsorsTier_possibleTypes.includes(obj.__typename);
};

const SponsorsTierAdminInfo_possibleTypes: string[] = ['SponsorsTierAdminInfo'];
export const isSponsorsTierAdminInfo = (
  obj?: { __typename?: any } | null,
): obj is SponsorsTierAdminInfo => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsTierAdminInfo"');
  return SponsorsTierAdminInfo_possibleTypes.includes(obj.__typename);
};

const SponsorsTierConnection_possibleTypes: string[] = ['SponsorsTierConnection'];
export const isSponsorsTierConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorsTierConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsTierConnection"');
  return SponsorsTierConnection_possibleTypes.includes(obj.__typename);
};

const SponsorsTierEdge_possibleTypes: string[] = ['SponsorsTierEdge'];
export const isSponsorsTierEdge = (obj?: { __typename?: any } | null): obj is SponsorsTierEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorsTierEdge"');
  return SponsorsTierEdge_possibleTypes.includes(obj.__typename);
};

const Sponsorship_possibleTypes: string[] = ['Sponsorship'];
export const isSponsorship = (obj?: { __typename?: any } | null): obj is Sponsorship => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorship"');
  return Sponsorship_possibleTypes.includes(obj.__typename);
};

const SponsorshipConnection_possibleTypes: string[] = ['SponsorshipConnection'];
export const isSponsorshipConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorshipConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorshipConnection"');
  return SponsorshipConnection_possibleTypes.includes(obj.__typename);
};

const SponsorshipEdge_possibleTypes: string[] = ['SponsorshipEdge'];
export const isSponsorshipEdge = (obj?: { __typename?: any } | null): obj is SponsorshipEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorshipEdge"');
  return SponsorshipEdge_possibleTypes.includes(obj.__typename);
};

const SponsorshipNewsletter_possibleTypes: string[] = ['SponsorshipNewsletter'];
export const isSponsorshipNewsletter = (
  obj?: { __typename?: any } | null,
): obj is SponsorshipNewsletter => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorshipNewsletter"');
  return SponsorshipNewsletter_possibleTypes.includes(obj.__typename);
};

const SponsorshipNewsletterConnection_possibleTypes: string[] = ['SponsorshipNewsletterConnection'];
export const isSponsorshipNewsletterConnection = (
  obj?: { __typename?: any } | null,
): obj is SponsorshipNewsletterConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSponsorshipNewsletterConnection"');
  return SponsorshipNewsletterConnection_possibleTypes.includes(obj.__typename);
};

const SponsorshipNewsletterEdge_possibleTypes: string[] = ['SponsorshipNewsletterEdge'];
export const isSponsorshipNewsletterEdge = (
  obj?: { __typename?: any } | null,
): obj is SponsorshipNewsletterEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSponsorshipNewsletterEdge"');
  return SponsorshipNewsletterEdge_possibleTypes.includes(obj.__typename);
};

const SshSignature_possibleTypes: string[] = ['SshSignature'];
export const isSshSignature = (obj?: { __typename?: any } | null): obj is SshSignature => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSshSignature"');
  return SshSignature_possibleTypes.includes(obj.__typename);
};

const StargazerConnection_possibleTypes: string[] = ['StargazerConnection'];
export const isStargazerConnection = (
  obj?: { __typename?: any } | null,
): obj is StargazerConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStargazerConnection"');
  return StargazerConnection_possibleTypes.includes(obj.__typename);
};

const StargazerEdge_possibleTypes: string[] = ['StargazerEdge'];
export const isStargazerEdge = (obj?: { __typename?: any } | null): obj is StargazerEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStargazerEdge"');
  return StargazerEdge_possibleTypes.includes(obj.__typename);
};

const Starrable_possibleTypes: string[] = ['Gist', 'Repository', 'Topic'];
export const isStarrable = (obj?: { __typename?: any } | null): obj is Starrable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStarrable"');
  return Starrable_possibleTypes.includes(obj.__typename);
};

const StarredRepositoryConnection_possibleTypes: string[] = ['StarredRepositoryConnection'];
export const isStarredRepositoryConnection = (
  obj?: { __typename?: any } | null,
): obj is StarredRepositoryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStarredRepositoryConnection"');
  return StarredRepositoryConnection_possibleTypes.includes(obj.__typename);
};

const StarredRepositoryEdge_possibleTypes: string[] = ['StarredRepositoryEdge'];
export const isStarredRepositoryEdge = (
  obj?: { __typename?: any } | null,
): obj is StarredRepositoryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStarredRepositoryEdge"');
  return StarredRepositoryEdge_possibleTypes.includes(obj.__typename);
};

const StartOrganizationMigrationPayload_possibleTypes: string[] = [
  'StartOrganizationMigrationPayload',
];
export const isStartOrganizationMigrationPayload = (
  obj?: { __typename?: any } | null,
): obj is StartOrganizationMigrationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isStartOrganizationMigrationPayload"');
  return StartOrganizationMigrationPayload_possibleTypes.includes(obj.__typename);
};

const StartRepositoryMigrationPayload_possibleTypes: string[] = ['StartRepositoryMigrationPayload'];
export const isStartRepositoryMigrationPayload = (
  obj?: { __typename?: any } | null,
): obj is StartRepositoryMigrationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isStartRepositoryMigrationPayload"');
  return StartRepositoryMigrationPayload_possibleTypes.includes(obj.__typename);
};

const Status_possibleTypes: string[] = ['Status'];
export const isStatus = (obj?: { __typename?: any } | null): obj is Status => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatus"');
  return Status_possibleTypes.includes(obj.__typename);
};

const StatusCheckConfiguration_possibleTypes: string[] = ['StatusCheckConfiguration'];
export const isStatusCheckConfiguration = (
  obj?: { __typename?: any } | null,
): obj is StatusCheckConfiguration => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatusCheckConfiguration"');
  return StatusCheckConfiguration_possibleTypes.includes(obj.__typename);
};

const StatusCheckRollup_possibleTypes: string[] = ['StatusCheckRollup'];
export const isStatusCheckRollup = (
  obj?: { __typename?: any } | null,
): obj is StatusCheckRollup => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatusCheckRollup"');
  return StatusCheckRollup_possibleTypes.includes(obj.__typename);
};

const StatusCheckRollupContext_possibleTypes: string[] = ['CheckRun', 'StatusContext'];
export const isStatusCheckRollupContext = (
  obj?: { __typename?: any } | null,
): obj is StatusCheckRollupContext => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatusCheckRollupContext"');
  return StatusCheckRollupContext_possibleTypes.includes(obj.__typename);
};

const StatusCheckRollupContextConnection_possibleTypes: string[] = [
  'StatusCheckRollupContextConnection',
];
export const isStatusCheckRollupContextConnection = (
  obj?: { __typename?: any } | null,
): obj is StatusCheckRollupContextConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isStatusCheckRollupContextConnection"');
  return StatusCheckRollupContextConnection_possibleTypes.includes(obj.__typename);
};

const StatusCheckRollupContextEdge_possibleTypes: string[] = ['StatusCheckRollupContextEdge'];
export const isStatusCheckRollupContextEdge = (
  obj?: { __typename?: any } | null,
): obj is StatusCheckRollupContextEdge => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isStatusCheckRollupContextEdge"');
  return StatusCheckRollupContextEdge_possibleTypes.includes(obj.__typename);
};

const StatusContext_possibleTypes: string[] = ['StatusContext'];
export const isStatusContext = (obj?: { __typename?: any } | null): obj is StatusContext => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatusContext"');
  return StatusContext_possibleTypes.includes(obj.__typename);
};

const StatusContextStateCount_possibleTypes: string[] = ['StatusContextStateCount'];
export const isStatusContextStateCount = (
  obj?: { __typename?: any } | null,
): obj is StatusContextStateCount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStatusContextStateCount"');
  return StatusContextStateCount_possibleTypes.includes(obj.__typename);
};

const StripeConnectAccount_possibleTypes: string[] = ['StripeConnectAccount'];
export const isStripeConnectAccount = (
  obj?: { __typename?: any } | null,
): obj is StripeConnectAccount => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isStripeConnectAccount"');
  return StripeConnectAccount_possibleTypes.includes(obj.__typename);
};

const SubmitPullRequestReviewPayload_possibleTypes: string[] = ['SubmitPullRequestReviewPayload'];
export const isSubmitPullRequestReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is SubmitPullRequestReviewPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isSubmitPullRequestReviewPayload"');
  return SubmitPullRequestReviewPayload_possibleTypes.includes(obj.__typename);
};

const Submodule_possibleTypes: string[] = ['Submodule'];
export const isSubmodule = (obj?: { __typename?: any } | null): obj is Submodule => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubmodule"');
  return Submodule_possibleTypes.includes(obj.__typename);
};

const SubmoduleConnection_possibleTypes: string[] = ['SubmoduleConnection'];
export const isSubmoduleConnection = (
  obj?: { __typename?: any } | null,
): obj is SubmoduleConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubmoduleConnection"');
  return SubmoduleConnection_possibleTypes.includes(obj.__typename);
};

const SubmoduleEdge_possibleTypes: string[] = ['SubmoduleEdge'];
export const isSubmoduleEdge = (obj?: { __typename?: any } | null): obj is SubmoduleEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubmoduleEdge"');
  return SubmoduleEdge_possibleTypes.includes(obj.__typename);
};

const Subscribable_possibleTypes: string[] = [
  'Commit',
  'Discussion',
  'Issue',
  'PullRequest',
  'Repository',
  'Team',
  'TeamDiscussion',
];
export const isSubscribable = (obj?: { __typename?: any } | null): obj is Subscribable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubscribable"');
  return Subscribable_possibleTypes.includes(obj.__typename);
};

const SubscribableThread_possibleTypes: string[] = ['Issue'];
export const isSubscribableThread = (
  obj?: { __typename?: any } | null,
): obj is SubscribableThread => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubscribableThread"');
  return SubscribableThread_possibleTypes.includes(obj.__typename);
};

const SubscribedEvent_possibleTypes: string[] = ['SubscribedEvent'];
export const isSubscribedEvent = (obj?: { __typename?: any } | null): obj is SubscribedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSubscribedEvent"');
  return SubscribedEvent_possibleTypes.includes(obj.__typename);
};

const SuggestedReviewer_possibleTypes: string[] = ['SuggestedReviewer'];
export const isSuggestedReviewer = (
  obj?: { __typename?: any } | null,
): obj is SuggestedReviewer => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isSuggestedReviewer"');
  return SuggestedReviewer_possibleTypes.includes(obj.__typename);
};

const Tag_possibleTypes: string[] = ['Tag'];
export const isTag = (obj?: { __typename?: any } | null): obj is Tag => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTag"');
  return Tag_possibleTypes.includes(obj.__typename);
};

const TagNamePatternParameters_possibleTypes: string[] = ['TagNamePatternParameters'];
export const isTagNamePatternParameters = (
  obj?: { __typename?: any } | null,
): obj is TagNamePatternParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTagNamePatternParameters"');
  return TagNamePatternParameters_possibleTypes.includes(obj.__typename);
};

const Team_possibleTypes: string[] = ['Team'];
export const isTeam = (obj?: { __typename?: any } | null): obj is Team => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeam"');
  return Team_possibleTypes.includes(obj.__typename);
};

const TeamAddMemberAuditEntry_possibleTypes: string[] = ['TeamAddMemberAuditEntry'];
export const isTeamAddMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is TeamAddMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamAddMemberAuditEntry"');
  return TeamAddMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const TeamAddRepositoryAuditEntry_possibleTypes: string[] = ['TeamAddRepositoryAuditEntry'];
export const isTeamAddRepositoryAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is TeamAddRepositoryAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamAddRepositoryAuditEntry"');
  return TeamAddRepositoryAuditEntry_possibleTypes.includes(obj.__typename);
};

const TeamAuditEntryData_possibleTypes: string[] = [
  'OrgRestoreMemberMembershipTeamAuditEntryData',
  'TeamAddMemberAuditEntry',
  'TeamAddRepositoryAuditEntry',
  'TeamChangeParentTeamAuditEntry',
  'TeamRemoveMemberAuditEntry',
  'TeamRemoveRepositoryAuditEntry',
];
export const isTeamAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is TeamAuditEntryData => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamAuditEntryData"');
  return TeamAuditEntryData_possibleTypes.includes(obj.__typename);
};

const TeamChangeParentTeamAuditEntry_possibleTypes: string[] = ['TeamChangeParentTeamAuditEntry'];
export const isTeamChangeParentTeamAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is TeamChangeParentTeamAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isTeamChangeParentTeamAuditEntry"');
  return TeamChangeParentTeamAuditEntry_possibleTypes.includes(obj.__typename);
};

const TeamConnection_possibleTypes: string[] = ['TeamConnection'];
export const isTeamConnection = (obj?: { __typename?: any } | null): obj is TeamConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamConnection"');
  return TeamConnection_possibleTypes.includes(obj.__typename);
};

const TeamDiscussion_possibleTypes: string[] = ['TeamDiscussion'];
export const isTeamDiscussion = (obj?: { __typename?: any } | null): obj is TeamDiscussion => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamDiscussion"');
  return TeamDiscussion_possibleTypes.includes(obj.__typename);
};

const TeamDiscussionComment_possibleTypes: string[] = ['TeamDiscussionComment'];
export const isTeamDiscussionComment = (
  obj?: { __typename?: any } | null,
): obj is TeamDiscussionComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamDiscussionComment"');
  return TeamDiscussionComment_possibleTypes.includes(obj.__typename);
};

const TeamDiscussionCommentConnection_possibleTypes: string[] = ['TeamDiscussionCommentConnection'];
export const isTeamDiscussionCommentConnection = (
  obj?: { __typename?: any } | null,
): obj is TeamDiscussionCommentConnection => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isTeamDiscussionCommentConnection"');
  return TeamDiscussionCommentConnection_possibleTypes.includes(obj.__typename);
};

const TeamDiscussionCommentEdge_possibleTypes: string[] = ['TeamDiscussionCommentEdge'];
export const isTeamDiscussionCommentEdge = (
  obj?: { __typename?: any } | null,
): obj is TeamDiscussionCommentEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamDiscussionCommentEdge"');
  return TeamDiscussionCommentEdge_possibleTypes.includes(obj.__typename);
};

const TeamDiscussionConnection_possibleTypes: string[] = ['TeamDiscussionConnection'];
export const isTeamDiscussionConnection = (
  obj?: { __typename?: any } | null,
): obj is TeamDiscussionConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamDiscussionConnection"');
  return TeamDiscussionConnection_possibleTypes.includes(obj.__typename);
};

const TeamDiscussionEdge_possibleTypes: string[] = ['TeamDiscussionEdge'];
export const isTeamDiscussionEdge = (
  obj?: { __typename?: any } | null,
): obj is TeamDiscussionEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamDiscussionEdge"');
  return TeamDiscussionEdge_possibleTypes.includes(obj.__typename);
};

const TeamEdge_possibleTypes: string[] = ['TeamEdge'];
export const isTeamEdge = (obj?: { __typename?: any } | null): obj is TeamEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamEdge"');
  return TeamEdge_possibleTypes.includes(obj.__typename);
};

const TeamMemberConnection_possibleTypes: string[] = ['TeamMemberConnection'];
export const isTeamMemberConnection = (
  obj?: { __typename?: any } | null,
): obj is TeamMemberConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMemberConnection"');
  return TeamMemberConnection_possibleTypes.includes(obj.__typename);
};

const TeamMemberEdge_possibleTypes: string[] = ['TeamMemberEdge'];
export const isTeamMemberEdge = (obj?: { __typename?: any } | null): obj is TeamMemberEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMemberEdge"');
  return TeamMemberEdge_possibleTypes.includes(obj.__typename);
};

const TeamRemoveMemberAuditEntry_possibleTypes: string[] = ['TeamRemoveMemberAuditEntry'];
export const isTeamRemoveMemberAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is TeamRemoveMemberAuditEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamRemoveMemberAuditEntry"');
  return TeamRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename);
};

const TeamRemoveRepositoryAuditEntry_possibleTypes: string[] = ['TeamRemoveRepositoryAuditEntry'];
export const isTeamRemoveRepositoryAuditEntry = (
  obj?: { __typename?: any } | null,
): obj is TeamRemoveRepositoryAuditEntry => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isTeamRemoveRepositoryAuditEntry"');
  return TeamRemoveRepositoryAuditEntry_possibleTypes.includes(obj.__typename);
};

const TeamRepositoryConnection_possibleTypes: string[] = ['TeamRepositoryConnection'];
export const isTeamRepositoryConnection = (
  obj?: { __typename?: any } | null,
): obj is TeamRepositoryConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamRepositoryConnection"');
  return TeamRepositoryConnection_possibleTypes.includes(obj.__typename);
};

const TeamRepositoryEdge_possibleTypes: string[] = ['TeamRepositoryEdge'];
export const isTeamRepositoryEdge = (
  obj?: { __typename?: any } | null,
): obj is TeamRepositoryEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTeamRepositoryEdge"');
  return TeamRepositoryEdge_possibleTypes.includes(obj.__typename);
};

const TextMatch_possibleTypes: string[] = ['TextMatch'];
export const isTextMatch = (obj?: { __typename?: any } | null): obj is TextMatch => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTextMatch"');
  return TextMatch_possibleTypes.includes(obj.__typename);
};

const TextMatchHighlight_possibleTypes: string[] = ['TextMatchHighlight'];
export const isTextMatchHighlight = (
  obj?: { __typename?: any } | null,
): obj is TextMatchHighlight => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTextMatchHighlight"');
  return TextMatchHighlight_possibleTypes.includes(obj.__typename);
};

const Topic_possibleTypes: string[] = ['Topic'];
export const isTopic = (obj?: { __typename?: any } | null): obj is Topic => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTopic"');
  return Topic_possibleTypes.includes(obj.__typename);
};

const TopicAuditEntryData_possibleTypes: string[] = [
  'RepoAddTopicAuditEntry',
  'RepoRemoveTopicAuditEntry',
];
export const isTopicAuditEntryData = (
  obj?: { __typename?: any } | null,
): obj is TopicAuditEntryData => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTopicAuditEntryData"');
  return TopicAuditEntryData_possibleTypes.includes(obj.__typename);
};

const TransferEnterpriseOrganizationPayload_possibleTypes: string[] = [
  'TransferEnterpriseOrganizationPayload',
];
export const isTransferEnterpriseOrganizationPayload = (
  obj?: { __typename?: any } | null,
): obj is TransferEnterpriseOrganizationPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isTransferEnterpriseOrganizationPayload"');
  return TransferEnterpriseOrganizationPayload_possibleTypes.includes(obj.__typename);
};

const TransferIssuePayload_possibleTypes: string[] = ['TransferIssuePayload'];
export const isTransferIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is TransferIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTransferIssuePayload"');
  return TransferIssuePayload_possibleTypes.includes(obj.__typename);
};

const TransferredEvent_possibleTypes: string[] = ['TransferredEvent'];
export const isTransferredEvent = (obj?: { __typename?: any } | null): obj is TransferredEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTransferredEvent"');
  return TransferredEvent_possibleTypes.includes(obj.__typename);
};

const Tree_possibleTypes: string[] = ['Tree'];
export const isTree = (obj?: { __typename?: any } | null): obj is Tree => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTree"');
  return Tree_possibleTypes.includes(obj.__typename);
};

const TreeEntry_possibleTypes: string[] = ['TreeEntry'];
export const isTreeEntry = (obj?: { __typename?: any } | null): obj is TreeEntry => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isTreeEntry"');
  return TreeEntry_possibleTypes.includes(obj.__typename);
};

const UnarchiveProjectV2ItemPayload_possibleTypes: string[] = ['UnarchiveProjectV2ItemPayload'];
export const isUnarchiveProjectV2ItemPayload = (
  obj?: { __typename?: any } | null,
): obj is UnarchiveProjectV2ItemPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnarchiveProjectV2ItemPayload"');
  return UnarchiveProjectV2ItemPayload_possibleTypes.includes(obj.__typename);
};

const UnarchiveRepositoryPayload_possibleTypes: string[] = ['UnarchiveRepositoryPayload'];
export const isUnarchiveRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is UnarchiveRepositoryPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnarchiveRepositoryPayload"');
  return UnarchiveRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const UnassignedEvent_possibleTypes: string[] = ['UnassignedEvent'];
export const isUnassignedEvent = (obj?: { __typename?: any } | null): obj is UnassignedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnassignedEvent"');
  return UnassignedEvent_possibleTypes.includes(obj.__typename);
};

const UnfollowOrganizationPayload_possibleTypes: string[] = ['UnfollowOrganizationPayload'];
export const isUnfollowOrganizationPayload = (
  obj?: { __typename?: any } | null,
): obj is UnfollowOrganizationPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnfollowOrganizationPayload"');
  return UnfollowOrganizationPayload_possibleTypes.includes(obj.__typename);
};

const UnfollowUserPayload_possibleTypes: string[] = ['UnfollowUserPayload'];
export const isUnfollowUserPayload = (
  obj?: { __typename?: any } | null,
): obj is UnfollowUserPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnfollowUserPayload"');
  return UnfollowUserPayload_possibleTypes.includes(obj.__typename);
};

const UniformResourceLocatable_possibleTypes: string[] = [
  'Bot',
  'CheckRun',
  'ClosedEvent',
  'Commit',
  'ConvertToDraftEvent',
  'CrossReferencedEvent',
  'Gist',
  'Issue',
  'Mannequin',
  'MergedEvent',
  'Milestone',
  'Organization',
  'PullRequest',
  'PullRequestCommit',
  'ReadyForReviewEvent',
  'Release',
  'Repository',
  'RepositoryTopic',
  'ReviewDismissedEvent',
  'TeamDiscussion',
  'TeamDiscussionComment',
  'User',
  'Workflow',
  'WorkflowRun',
  'WorkflowRunFile',
];
export const isUniformResourceLocatable = (
  obj?: { __typename?: any } | null,
): obj is UniformResourceLocatable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUniformResourceLocatable"');
  return UniformResourceLocatable_possibleTypes.includes(obj.__typename);
};

const UnknownSignature_possibleTypes: string[] = ['UnknownSignature'];
export const isUnknownSignature = (obj?: { __typename?: any } | null): obj is UnknownSignature => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnknownSignature"');
  return UnknownSignature_possibleTypes.includes(obj.__typename);
};

const UnlabeledEvent_possibleTypes: string[] = ['UnlabeledEvent'];
export const isUnlabeledEvent = (obj?: { __typename?: any } | null): obj is UnlabeledEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnlabeledEvent"');
  return UnlabeledEvent_possibleTypes.includes(obj.__typename);
};

const UnlinkProjectV2FromRepositoryPayload_possibleTypes: string[] = [
  'UnlinkProjectV2FromRepositoryPayload',
];
export const isUnlinkProjectV2FromRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is UnlinkProjectV2FromRepositoryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnlinkProjectV2FromRepositoryPayload"');
  return UnlinkProjectV2FromRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const UnlinkProjectV2FromTeamPayload_possibleTypes: string[] = ['UnlinkProjectV2FromTeamPayload'];
export const isUnlinkProjectV2FromTeamPayload = (
  obj?: { __typename?: any } | null,
): obj is UnlinkProjectV2FromTeamPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnlinkProjectV2FromTeamPayload"');
  return UnlinkProjectV2FromTeamPayload_possibleTypes.includes(obj.__typename);
};

const UnlinkRepositoryFromProjectPayload_possibleTypes: string[] = [
  'UnlinkRepositoryFromProjectPayload',
];
export const isUnlinkRepositoryFromProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is UnlinkRepositoryFromProjectPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnlinkRepositoryFromProjectPayload"');
  return UnlinkRepositoryFromProjectPayload_possibleTypes.includes(obj.__typename);
};

const UnlockLockablePayload_possibleTypes: string[] = ['UnlockLockablePayload'];
export const isUnlockLockablePayload = (
  obj?: { __typename?: any } | null,
): obj is UnlockLockablePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnlockLockablePayload"');
  return UnlockLockablePayload_possibleTypes.includes(obj.__typename);
};

const UnlockedEvent_possibleTypes: string[] = ['UnlockedEvent'];
export const isUnlockedEvent = (obj?: { __typename?: any } | null): obj is UnlockedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnlockedEvent"');
  return UnlockedEvent_possibleTypes.includes(obj.__typename);
};

const UnmarkDiscussionCommentAsAnswerPayload_possibleTypes: string[] = [
  'UnmarkDiscussionCommentAsAnswerPayload',
];
export const isUnmarkDiscussionCommentAsAnswerPayload = (
  obj?: { __typename?: any } | null,
): obj is UnmarkDiscussionCommentAsAnswerPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnmarkDiscussionCommentAsAnswerPayload"');
  return UnmarkDiscussionCommentAsAnswerPayload_possibleTypes.includes(obj.__typename);
};

const UnmarkFileAsViewedPayload_possibleTypes: string[] = ['UnmarkFileAsViewedPayload'];
export const isUnmarkFileAsViewedPayload = (
  obj?: { __typename?: any } | null,
): obj is UnmarkFileAsViewedPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnmarkFileAsViewedPayload"');
  return UnmarkFileAsViewedPayload_possibleTypes.includes(obj.__typename);
};

const UnmarkIssueAsDuplicatePayload_possibleTypes: string[] = ['UnmarkIssueAsDuplicatePayload'];
export const isUnmarkIssueAsDuplicatePayload = (
  obj?: { __typename?: any } | null,
): obj is UnmarkIssueAsDuplicatePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnmarkIssueAsDuplicatePayload"');
  return UnmarkIssueAsDuplicatePayload_possibleTypes.includes(obj.__typename);
};

const UnmarkProjectV2AsTemplatePayload_possibleTypes: string[] = [
  'UnmarkProjectV2AsTemplatePayload',
];
export const isUnmarkProjectV2AsTemplatePayload = (
  obj?: { __typename?: any } | null,
): obj is UnmarkProjectV2AsTemplatePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnmarkProjectV2AsTemplatePayload"');
  return UnmarkProjectV2AsTemplatePayload_possibleTypes.includes(obj.__typename);
};

const UnmarkedAsDuplicateEvent_possibleTypes: string[] = ['UnmarkedAsDuplicateEvent'];
export const isUnmarkedAsDuplicateEvent = (
  obj?: { __typename?: any } | null,
): obj is UnmarkedAsDuplicateEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnmarkedAsDuplicateEvent"');
  return UnmarkedAsDuplicateEvent_possibleTypes.includes(obj.__typename);
};

const UnminimizeCommentPayload_possibleTypes: string[] = ['UnminimizeCommentPayload'];
export const isUnminimizeCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is UnminimizeCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnminimizeCommentPayload"');
  return UnminimizeCommentPayload_possibleTypes.includes(obj.__typename);
};

const UnpinIssuePayload_possibleTypes: string[] = ['UnpinIssuePayload'];
export const isUnpinIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is UnpinIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnpinIssuePayload"');
  return UnpinIssuePayload_possibleTypes.includes(obj.__typename);
};

const UnpinnedEvent_possibleTypes: string[] = ['UnpinnedEvent'];
export const isUnpinnedEvent = (obj?: { __typename?: any } | null): obj is UnpinnedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnpinnedEvent"');
  return UnpinnedEvent_possibleTypes.includes(obj.__typename);
};

const UnresolveReviewThreadPayload_possibleTypes: string[] = ['UnresolveReviewThreadPayload'];
export const isUnresolveReviewThreadPayload = (
  obj?: { __typename?: any } | null,
): obj is UnresolveReviewThreadPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUnresolveReviewThreadPayload"');
  return UnresolveReviewThreadPayload_possibleTypes.includes(obj.__typename);
};

const UnsubscribedEvent_possibleTypes: string[] = ['UnsubscribedEvent'];
export const isUnsubscribedEvent = (
  obj?: { __typename?: any } | null,
): obj is UnsubscribedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUnsubscribedEvent"');
  return UnsubscribedEvent_possibleTypes.includes(obj.__typename);
};

const Updatable_possibleTypes: string[] = [
  'CommitComment',
  'Discussion',
  'DiscussionComment',
  'GistComment',
  'Issue',
  'IssueComment',
  'Project',
  'ProjectV2',
  'PullRequest',
  'PullRequestReview',
  'PullRequestReviewComment',
  'TeamDiscussion',
  'TeamDiscussionComment',
];
export const isUpdatable = (obj?: { __typename?: any } | null): obj is Updatable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdatable"');
  return Updatable_possibleTypes.includes(obj.__typename);
};

const UpdatableComment_possibleTypes: string[] = [
  'CommitComment',
  'DiscussionComment',
  'GistComment',
  'Issue',
  'IssueComment',
  'PullRequest',
  'PullRequestReview',
  'PullRequestReviewComment',
  'TeamDiscussion',
  'TeamDiscussionComment',
];
export const isUpdatableComment = (obj?: { __typename?: any } | null): obj is UpdatableComment => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdatableComment"');
  return UpdatableComment_possibleTypes.includes(obj.__typename);
};

const UpdateBranchProtectionRulePayload_possibleTypes: string[] = [
  'UpdateBranchProtectionRulePayload',
];
export const isUpdateBranchProtectionRulePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateBranchProtectionRulePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateBranchProtectionRulePayload"');
  return UpdateBranchProtectionRulePayload_possibleTypes.includes(obj.__typename);
};

const UpdateCheckRunPayload_possibleTypes: string[] = ['UpdateCheckRunPayload'];
export const isUpdateCheckRunPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateCheckRunPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateCheckRunPayload"');
  return UpdateCheckRunPayload_possibleTypes.includes(obj.__typename);
};

const UpdateCheckSuitePreferencesPayload_possibleTypes: string[] = [
  'UpdateCheckSuitePreferencesPayload',
];
export const isUpdateCheckSuitePreferencesPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateCheckSuitePreferencesPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateCheckSuitePreferencesPayload"');
  return UpdateCheckSuitePreferencesPayload_possibleTypes.includes(obj.__typename);
};

const UpdateDiscussionCommentPayload_possibleTypes: string[] = ['UpdateDiscussionCommentPayload'];
export const isUpdateDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateDiscussionCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateDiscussionCommentPayload"');
  return UpdateDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const UpdateDiscussionPayload_possibleTypes: string[] = ['UpdateDiscussionPayload'];
export const isUpdateDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateDiscussionPayload"');
  return UpdateDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseAdministratorRolePayload_possibleTypes: string[] = [
  'UpdateEnterpriseAdministratorRolePayload',
];
export const isUpdateEnterpriseAdministratorRolePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseAdministratorRolePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateEnterpriseAdministratorRolePayload"');
  return UpdateEnterpriseAdministratorRolePayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload',
];
export const isUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"',
    );
  return UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseDefaultRepositoryPermissionSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload',
];
export const isUpdateEnterpriseDefaultRepositoryPermissionSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseDefaultRepositoryPermissionSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseDefaultRepositoryPermissionSettingPayload"',
    );
  return UpdateEnterpriseDefaultRepositoryPermissionSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload',
];
export const isUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"',
    );
  return UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload',
];
export const isUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"',
    );
  return UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanDeleteIssuesSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload',
];
export const isUpdateEnterpriseMembersCanDeleteIssuesSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanDeleteIssuesSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanDeleteIssuesSettingPayload"',
    );
  return UpdateEnterpriseMembersCanDeleteIssuesSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload',
];
export const isUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"',
    );
  return UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload',
];
export const isUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"',
    );
  return UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanMakePurchasesSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanMakePurchasesSettingPayload',
];
export const isUpdateEnterpriseMembersCanMakePurchasesSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanMakePurchasesSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanMakePurchasesSettingPayload"',
    );
  return UpdateEnterpriseMembersCanMakePurchasesSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload',
];
export const isUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"',
    );
  return UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload',
];
export const isUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"',
    );
  return UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnterpriseOrganizationProjectsSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseOrganizationProjectsSettingPayload',
];
export const isUpdateEnterpriseOrganizationProjectsSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseOrganizationProjectsSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseOrganizationProjectsSettingPayload"',
    );
  return UpdateEnterpriseOrganizationProjectsSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseOwnerOrganizationRolePayload_possibleTypes: string[] = [
  'UpdateEnterpriseOwnerOrganizationRolePayload',
];
export const isUpdateEnterpriseOwnerOrganizationRolePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseOwnerOrganizationRolePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateEnterpriseOwnerOrganizationRolePayload"');
  return UpdateEnterpriseOwnerOrganizationRolePayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseProfilePayload_possibleTypes: string[] = ['UpdateEnterpriseProfilePayload'];
export const isUpdateEnterpriseProfilePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseProfilePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateEnterpriseProfilePayload"');
  return UpdateEnterpriseProfilePayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseRepositoryProjectsSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseRepositoryProjectsSettingPayload',
];
export const isUpdateEnterpriseRepositoryProjectsSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseRepositoryProjectsSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseRepositoryProjectsSettingPayload"',
    );
  return UpdateEnterpriseRepositoryProjectsSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseTeamDiscussionsSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseTeamDiscussionsSettingPayload',
];
export const isUpdateEnterpriseTeamDiscussionsSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseTeamDiscussionsSettingPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateEnterpriseTeamDiscussionsSettingPayload"');
  return UpdateEnterpriseTeamDiscussionsSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload_possibleTypes: string[] = [
  'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload',
];
export const isUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"',
    );
  return UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateEnvironmentPayload_possibleTypes: string[] = ['UpdateEnvironmentPayload'];
export const isUpdateEnvironmentPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateEnvironmentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateEnvironmentPayload"');
  return UpdateEnvironmentPayload_possibleTypes.includes(obj.__typename);
};

const UpdateIpAllowListEnabledSettingPayload_possibleTypes: string[] = [
  'UpdateIpAllowListEnabledSettingPayload',
];
export const isUpdateIpAllowListEnabledSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateIpAllowListEnabledSettingPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateIpAllowListEnabledSettingPayload"');
  return UpdateIpAllowListEnabledSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateIpAllowListEntryPayload_possibleTypes: string[] = ['UpdateIpAllowListEntryPayload'];
export const isUpdateIpAllowListEntryPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateIpAllowListEntryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateIpAllowListEntryPayload"');
  return UpdateIpAllowListEntryPayload_possibleTypes.includes(obj.__typename);
};

const UpdateIpAllowListForInstalledAppsEnabledSettingPayload_possibleTypes: string[] = [
  'UpdateIpAllowListForInstalledAppsEnabledSettingPayload',
];
export const isUpdateIpAllowListForInstalledAppsEnabledSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateIpAllowListForInstalledAppsEnabledSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateIpAllowListForInstalledAppsEnabledSettingPayload"',
    );
  return UpdateIpAllowListForInstalledAppsEnabledSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateIssueCommentPayload_possibleTypes: string[] = ['UpdateIssueCommentPayload'];
export const isUpdateIssueCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateIssueCommentPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateIssueCommentPayload"');
  return UpdateIssueCommentPayload_possibleTypes.includes(obj.__typename);
};

const UpdateIssuePayload_possibleTypes: string[] = ['UpdateIssuePayload'];
export const isUpdateIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateIssuePayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateIssuePayload"');
  return UpdateIssuePayload_possibleTypes.includes(obj.__typename);
};

const UpdateNotificationRestrictionSettingPayload_possibleTypes: string[] = [
  'UpdateNotificationRestrictionSettingPayload',
];
export const isUpdateNotificationRestrictionSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateNotificationRestrictionSettingPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateNotificationRestrictionSettingPayload"');
  return UpdateNotificationRestrictionSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload_possibleTypes: string[] = [
  'UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload',
];
export const isUpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"',
    );
  return UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload_possibleTypes.includes(
    obj.__typename,
  );
};

const UpdateOrganizationWebCommitSignoffSettingPayload_possibleTypes: string[] = [
  'UpdateOrganizationWebCommitSignoffSettingPayload',
];
export const isUpdateOrganizationWebCommitSignoffSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateOrganizationWebCommitSignoffSettingPayload => {
  if (!obj?.__typename)
    throw new Error(
      '__typename is missing in "isUpdateOrganizationWebCommitSignoffSettingPayload"',
    );
  return UpdateOrganizationWebCommitSignoffSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateParameters_possibleTypes: string[] = ['UpdateParameters'];
export const isUpdateParameters = (obj?: { __typename?: any } | null): obj is UpdateParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateParameters"');
  return UpdateParameters_possibleTypes.includes(obj.__typename);
};

const UpdateProjectCardPayload_possibleTypes: string[] = ['UpdateProjectCardPayload'];
export const isUpdateProjectCardPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectCardPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateProjectCardPayload"');
  return UpdateProjectCardPayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectColumnPayload_possibleTypes: string[] = ['UpdateProjectColumnPayload'];
export const isUpdateProjectColumnPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectColumnPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateProjectColumnPayload"');
  return UpdateProjectColumnPayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectPayload_possibleTypes: string[] = ['UpdateProjectPayload'];
export const isUpdateProjectPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateProjectPayload"');
  return UpdateProjectPayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectV2CollaboratorsPayload_possibleTypes: string[] = [
  'UpdateProjectV2CollaboratorsPayload',
];
export const isUpdateProjectV2CollaboratorsPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectV2CollaboratorsPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateProjectV2CollaboratorsPayload"');
  return UpdateProjectV2CollaboratorsPayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectV2DraftIssuePayload_possibleTypes: string[] = [
  'UpdateProjectV2DraftIssuePayload',
];
export const isUpdateProjectV2DraftIssuePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectV2DraftIssuePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateProjectV2DraftIssuePayload"');
  return UpdateProjectV2DraftIssuePayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectV2ItemFieldValuePayload_possibleTypes: string[] = [
  'UpdateProjectV2ItemFieldValuePayload',
];
export const isUpdateProjectV2ItemFieldValuePayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectV2ItemFieldValuePayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateProjectV2ItemFieldValuePayload"');
  return UpdateProjectV2ItemFieldValuePayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectV2ItemPositionPayload_possibleTypes: string[] = [
  'UpdateProjectV2ItemPositionPayload',
];
export const isUpdateProjectV2ItemPositionPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectV2ItemPositionPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateProjectV2ItemPositionPayload"');
  return UpdateProjectV2ItemPositionPayload_possibleTypes.includes(obj.__typename);
};

const UpdateProjectV2Payload_possibleTypes: string[] = ['UpdateProjectV2Payload'];
export const isUpdateProjectV2Payload = (
  obj?: { __typename?: any } | null,
): obj is UpdateProjectV2Payload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateProjectV2Payload"');
  return UpdateProjectV2Payload_possibleTypes.includes(obj.__typename);
};

const UpdatePullRequestBranchPayload_possibleTypes: string[] = ['UpdatePullRequestBranchPayload'];
export const isUpdatePullRequestBranchPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdatePullRequestBranchPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdatePullRequestBranchPayload"');
  return UpdatePullRequestBranchPayload_possibleTypes.includes(obj.__typename);
};

const UpdatePullRequestPayload_possibleTypes: string[] = ['UpdatePullRequestPayload'];
export const isUpdatePullRequestPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdatePullRequestPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdatePullRequestPayload"');
  return UpdatePullRequestPayload_possibleTypes.includes(obj.__typename);
};

const UpdatePullRequestReviewCommentPayload_possibleTypes: string[] = [
  'UpdatePullRequestReviewCommentPayload',
];
export const isUpdatePullRequestReviewCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdatePullRequestReviewCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdatePullRequestReviewCommentPayload"');
  return UpdatePullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename);
};

const UpdatePullRequestReviewPayload_possibleTypes: string[] = ['UpdatePullRequestReviewPayload'];
export const isUpdatePullRequestReviewPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdatePullRequestReviewPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdatePullRequestReviewPayload"');
  return UpdatePullRequestReviewPayload_possibleTypes.includes(obj.__typename);
};

const UpdateRefPayload_possibleTypes: string[] = ['UpdateRefPayload'];
export const isUpdateRefPayload = (obj?: { __typename?: any } | null): obj is UpdateRefPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateRefPayload"');
  return UpdateRefPayload_possibleTypes.includes(obj.__typename);
};

const UpdateRepositoryPayload_possibleTypes: string[] = ['UpdateRepositoryPayload'];
export const isUpdateRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateRepositoryPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateRepositoryPayload"');
  return UpdateRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const UpdateRepositoryRulesetPayload_possibleTypes: string[] = ['UpdateRepositoryRulesetPayload'];
export const isUpdateRepositoryRulesetPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateRepositoryRulesetPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateRepositoryRulesetPayload"');
  return UpdateRepositoryRulesetPayload_possibleTypes.includes(obj.__typename);
};

const UpdateRepositoryWebCommitSignoffSettingPayload_possibleTypes: string[] = [
  'UpdateRepositoryWebCommitSignoffSettingPayload',
];
export const isUpdateRepositoryWebCommitSignoffSettingPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateRepositoryWebCommitSignoffSettingPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateRepositoryWebCommitSignoffSettingPayload"');
  return UpdateRepositoryWebCommitSignoffSettingPayload_possibleTypes.includes(obj.__typename);
};

const UpdateSponsorshipPreferencesPayload_possibleTypes: string[] = [
  'UpdateSponsorshipPreferencesPayload',
];
export const isUpdateSponsorshipPreferencesPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateSponsorshipPreferencesPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateSponsorshipPreferencesPayload"');
  return UpdateSponsorshipPreferencesPayload_possibleTypes.includes(obj.__typename);
};

const UpdateSubscriptionPayload_possibleTypes: string[] = ['UpdateSubscriptionPayload'];
export const isUpdateSubscriptionPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateSubscriptionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateSubscriptionPayload"');
  return UpdateSubscriptionPayload_possibleTypes.includes(obj.__typename);
};

const UpdateTeamDiscussionCommentPayload_possibleTypes: string[] = [
  'UpdateTeamDiscussionCommentPayload',
];
export const isUpdateTeamDiscussionCommentPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateTeamDiscussionCommentPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateTeamDiscussionCommentPayload"');
  return UpdateTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename);
};

const UpdateTeamDiscussionPayload_possibleTypes: string[] = ['UpdateTeamDiscussionPayload'];
export const isUpdateTeamDiscussionPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateTeamDiscussionPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateTeamDiscussionPayload"');
  return UpdateTeamDiscussionPayload_possibleTypes.includes(obj.__typename);
};

const UpdateTeamsRepositoryPayload_possibleTypes: string[] = ['UpdateTeamsRepositoryPayload'];
export const isUpdateTeamsRepositoryPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateTeamsRepositoryPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isUpdateTeamsRepositoryPayload"');
  return UpdateTeamsRepositoryPayload_possibleTypes.includes(obj.__typename);
};

const UpdateTopicsPayload_possibleTypes: string[] = ['UpdateTopicsPayload'];
export const isUpdateTopicsPayload = (
  obj?: { __typename?: any } | null,
): obj is UpdateTopicsPayload => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUpdateTopicsPayload"');
  return UpdateTopicsPayload_possibleTypes.includes(obj.__typename);
};

const User_possibleTypes: string[] = ['User'];
export const isUser = (obj?: { __typename?: any } | null): obj is User => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUser"');
  return User_possibleTypes.includes(obj.__typename);
};

const UserBlockedEvent_possibleTypes: string[] = ['UserBlockedEvent'];
export const isUserBlockedEvent = (obj?: { __typename?: any } | null): obj is UserBlockedEvent => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserBlockedEvent"');
  return UserBlockedEvent_possibleTypes.includes(obj.__typename);
};

const UserConnection_possibleTypes: string[] = ['UserConnection'];
export const isUserConnection = (obj?: { __typename?: any } | null): obj is UserConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserConnection"');
  return UserConnection_possibleTypes.includes(obj.__typename);
};

const UserContentEdit_possibleTypes: string[] = ['UserContentEdit'];
export const isUserContentEdit = (obj?: { __typename?: any } | null): obj is UserContentEdit => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserContentEdit"');
  return UserContentEdit_possibleTypes.includes(obj.__typename);
};

const UserContentEditConnection_possibleTypes: string[] = ['UserContentEditConnection'];
export const isUserContentEditConnection = (
  obj?: { __typename?: any } | null,
): obj is UserContentEditConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserContentEditConnection"');
  return UserContentEditConnection_possibleTypes.includes(obj.__typename);
};

const UserContentEditEdge_possibleTypes: string[] = ['UserContentEditEdge'];
export const isUserContentEditEdge = (
  obj?: { __typename?: any } | null,
): obj is UserContentEditEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserContentEditEdge"');
  return UserContentEditEdge_possibleTypes.includes(obj.__typename);
};

const UserEdge_possibleTypes: string[] = ['UserEdge'];
export const isUserEdge = (obj?: { __typename?: any } | null): obj is UserEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserEdge"');
  return UserEdge_possibleTypes.includes(obj.__typename);
};

const UserEmailMetadata_possibleTypes: string[] = ['UserEmailMetadata'];
export const isUserEmailMetadata = (
  obj?: { __typename?: any } | null,
): obj is UserEmailMetadata => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserEmailMetadata"');
  return UserEmailMetadata_possibleTypes.includes(obj.__typename);
};

const UserStatus_possibleTypes: string[] = ['UserStatus'];
export const isUserStatus = (obj?: { __typename?: any } | null): obj is UserStatus => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserStatus"');
  return UserStatus_possibleTypes.includes(obj.__typename);
};

const UserStatusConnection_possibleTypes: string[] = ['UserStatusConnection'];
export const isUserStatusConnection = (
  obj?: { __typename?: any } | null,
): obj is UserStatusConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserStatusConnection"');
  return UserStatusConnection_possibleTypes.includes(obj.__typename);
};

const UserStatusEdge_possibleTypes: string[] = ['UserStatusEdge'];
export const isUserStatusEdge = (obj?: { __typename?: any } | null): obj is UserStatusEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isUserStatusEdge"');
  return UserStatusEdge_possibleTypes.includes(obj.__typename);
};

const VerifiableDomain_possibleTypes: string[] = ['VerifiableDomain'];
export const isVerifiableDomain = (obj?: { __typename?: any } | null): obj is VerifiableDomain => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isVerifiableDomain"');
  return VerifiableDomain_possibleTypes.includes(obj.__typename);
};

const VerifiableDomainConnection_possibleTypes: string[] = ['VerifiableDomainConnection'];
export const isVerifiableDomainConnection = (
  obj?: { __typename?: any } | null,
): obj is VerifiableDomainConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isVerifiableDomainConnection"');
  return VerifiableDomainConnection_possibleTypes.includes(obj.__typename);
};

const VerifiableDomainEdge_possibleTypes: string[] = ['VerifiableDomainEdge'];
export const isVerifiableDomainEdge = (
  obj?: { __typename?: any } | null,
): obj is VerifiableDomainEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isVerifiableDomainEdge"');
  return VerifiableDomainEdge_possibleTypes.includes(obj.__typename);
};

const VerifiableDomainOwner_possibleTypes: string[] = ['Enterprise', 'Organization'];
export const isVerifiableDomainOwner = (
  obj?: { __typename?: any } | null,
): obj is VerifiableDomainOwner => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isVerifiableDomainOwner"');
  return VerifiableDomainOwner_possibleTypes.includes(obj.__typename);
};

const VerifyVerifiableDomainPayload_possibleTypes: string[] = ['VerifyVerifiableDomainPayload'];
export const isVerifyVerifiableDomainPayload = (
  obj?: { __typename?: any } | null,
): obj is VerifyVerifiableDomainPayload => {
  if (!obj?.__typename)
    throw new Error('__typename is missing in "isVerifyVerifiableDomainPayload"');
  return VerifyVerifiableDomainPayload_possibleTypes.includes(obj.__typename);
};

const ViewerHovercardContext_possibleTypes: string[] = ['ViewerHovercardContext'];
export const isViewerHovercardContext = (
  obj?: { __typename?: any } | null,
): obj is ViewerHovercardContext => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isViewerHovercardContext"');
  return ViewerHovercardContext_possibleTypes.includes(obj.__typename);
};

const Votable_possibleTypes: string[] = ['Discussion', 'DiscussionComment'];
export const isVotable = (obj?: { __typename?: any } | null): obj is Votable => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isVotable"');
  return Votable_possibleTypes.includes(obj.__typename);
};

const Workflow_possibleTypes: string[] = ['Workflow'];
export const isWorkflow = (obj?: { __typename?: any } | null): obj is Workflow => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflow"');
  return Workflow_possibleTypes.includes(obj.__typename);
};

const WorkflowFileReference_possibleTypes: string[] = ['WorkflowFileReference'];
export const isWorkflowFileReference = (
  obj?: { __typename?: any } | null,
): obj is WorkflowFileReference => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowFileReference"');
  return WorkflowFileReference_possibleTypes.includes(obj.__typename);
};

const WorkflowRun_possibleTypes: string[] = ['WorkflowRun'];
export const isWorkflowRun = (obj?: { __typename?: any } | null): obj is WorkflowRun => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowRun"');
  return WorkflowRun_possibleTypes.includes(obj.__typename);
};

const WorkflowRunConnection_possibleTypes: string[] = ['WorkflowRunConnection'];
export const isWorkflowRunConnection = (
  obj?: { __typename?: any } | null,
): obj is WorkflowRunConnection => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowRunConnection"');
  return WorkflowRunConnection_possibleTypes.includes(obj.__typename);
};

const WorkflowRunEdge_possibleTypes: string[] = ['WorkflowRunEdge'];
export const isWorkflowRunEdge = (obj?: { __typename?: any } | null): obj is WorkflowRunEdge => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowRunEdge"');
  return WorkflowRunEdge_possibleTypes.includes(obj.__typename);
};

const WorkflowRunFile_possibleTypes: string[] = ['WorkflowRunFile'];
export const isWorkflowRunFile = (obj?: { __typename?: any } | null): obj is WorkflowRunFile => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowRunFile"');
  return WorkflowRunFile_possibleTypes.includes(obj.__typename);
};

const WorkflowsParameters_possibleTypes: string[] = ['WorkflowsParameters'];
export const isWorkflowsParameters = (
  obj?: { __typename?: any } | null,
): obj is WorkflowsParameters => {
  if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowsParameters"');
  return WorkflowsParameters_possibleTypes.includes(obj.__typename);
};

export const enumActorType = {
  USER: 'USER' as const,
  TEAM: 'TEAM' as const,
};

export const enumAuditLogOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumCheckAnnotationLevel = {
  FAILURE: 'FAILURE' as const,
  NOTICE: 'NOTICE' as const,
  WARNING: 'WARNING' as const,
};

export const enumCheckConclusionState = {
  ACTION_REQUIRED: 'ACTION_REQUIRED' as const,
  TIMED_OUT: 'TIMED_OUT' as const,
  CANCELLED: 'CANCELLED' as const,
  FAILURE: 'FAILURE' as const,
  SUCCESS: 'SUCCESS' as const,
  NEUTRAL: 'NEUTRAL' as const,
  SKIPPED: 'SKIPPED' as const,
  STARTUP_FAILURE: 'STARTUP_FAILURE' as const,
  STALE: 'STALE' as const,
};

export const enumCheckRunState = {
  ACTION_REQUIRED: 'ACTION_REQUIRED' as const,
  CANCELLED: 'CANCELLED' as const,
  COMPLETED: 'COMPLETED' as const,
  FAILURE: 'FAILURE' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  NEUTRAL: 'NEUTRAL' as const,
  PENDING: 'PENDING' as const,
  QUEUED: 'QUEUED' as const,
  SKIPPED: 'SKIPPED' as const,
  STALE: 'STALE' as const,
  STARTUP_FAILURE: 'STARTUP_FAILURE' as const,
  SUCCESS: 'SUCCESS' as const,
  TIMED_OUT: 'TIMED_OUT' as const,
  WAITING: 'WAITING' as const,
};

export const enumCheckRunType = {
  ALL: 'ALL' as const,
  LATEST: 'LATEST' as const,
};

export const enumCheckStatusState = {
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  COMPLETED: 'COMPLETED' as const,
  WAITING: 'WAITING' as const,
  PENDING: 'PENDING' as const,
  REQUESTED: 'REQUESTED' as const,
};

export const enumCollaboratorAffiliation = {
  OUTSIDE: 'OUTSIDE' as const,
  DIRECT: 'DIRECT' as const,
  ALL: 'ALL' as const,
};

export const enumCommentAuthorAssociation = {
  MEMBER: 'MEMBER' as const,
  OWNER: 'OWNER' as const,
  MANNEQUIN: 'MANNEQUIN' as const,
  COLLABORATOR: 'COLLABORATOR' as const,
  CONTRIBUTOR: 'CONTRIBUTOR' as const,
  FIRST_TIME_CONTRIBUTOR: 'FIRST_TIME_CONTRIBUTOR' as const,
  FIRST_TIMER: 'FIRST_TIMER' as const,
  NONE: 'NONE' as const,
};

export const enumCommentCannotUpdateReason = {
  ARCHIVED: 'ARCHIVED' as const,
  INSUFFICIENT_ACCESS: 'INSUFFICIENT_ACCESS' as const,
  LOCKED: 'LOCKED' as const,
  LOGIN_REQUIRED: 'LOGIN_REQUIRED' as const,
  MAINTENANCE: 'MAINTENANCE' as const,
  VERIFIED_EMAIL_REQUIRED: 'VERIFIED_EMAIL_REQUIRED' as const,
  DENIED: 'DENIED' as const,
};

export const enumCommitContributionOrderField = {
  OCCURRED_AT: 'OCCURRED_AT' as const,
  COMMIT_COUNT: 'COMMIT_COUNT' as const,
};

export const enumComparisonStatus = {
  DIVERGED: 'DIVERGED' as const,
  AHEAD: 'AHEAD' as const,
  BEHIND: 'BEHIND' as const,
  IDENTICAL: 'IDENTICAL' as const,
};

export const enumContributionLevel = {
  NONE: 'NONE' as const,
  FIRST_QUARTILE: 'FIRST_QUARTILE' as const,
  SECOND_QUARTILE: 'SECOND_QUARTILE' as const,
  THIRD_QUARTILE: 'THIRD_QUARTILE' as const,
  FOURTH_QUARTILE: 'FOURTH_QUARTILE' as const,
};

export const enumDefaultRepositoryPermissionField = {
  NONE: 'NONE' as const,
  READ: 'READ' as const,
  WRITE: 'WRITE' as const,
  ADMIN: 'ADMIN' as const,
};

export const enumDependencyGraphEcosystem = {
  RUBYGEMS: 'RUBYGEMS' as const,
  NPM: 'NPM' as const,
  PIP: 'PIP' as const,
  MAVEN: 'MAVEN' as const,
  NUGET: 'NUGET' as const,
  COMPOSER: 'COMPOSER' as const,
  GO: 'GO' as const,
  ACTIONS: 'ACTIONS' as const,
  RUST: 'RUST' as const,
  PUB: 'PUB' as const,
  SWIFT: 'SWIFT' as const,
};

export const enumDeploymentOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumDeploymentProtectionRuleType = {
  REQUIRED_REVIEWERS: 'REQUIRED_REVIEWERS' as const,
  WAIT_TIMER: 'WAIT_TIMER' as const,
};

export const enumDeploymentReviewState = {
  APPROVED: 'APPROVED' as const,
  REJECTED: 'REJECTED' as const,
};

export const enumDeploymentState = {
  ABANDONED: 'ABANDONED' as const,
  ACTIVE: 'ACTIVE' as const,
  DESTROYED: 'DESTROYED' as const,
  ERROR: 'ERROR' as const,
  FAILURE: 'FAILURE' as const,
  INACTIVE: 'INACTIVE' as const,
  PENDING: 'PENDING' as const,
  SUCCESS: 'SUCCESS' as const,
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  WAITING: 'WAITING' as const,
};

export const enumDeploymentStatusState = {
  PENDING: 'PENDING' as const,
  SUCCESS: 'SUCCESS' as const,
  FAILURE: 'FAILURE' as const,
  INACTIVE: 'INACTIVE' as const,
  ERROR: 'ERROR' as const,
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  WAITING: 'WAITING' as const,
};

export const enumDiffSide = {
  LEFT: 'LEFT' as const,
  RIGHT: 'RIGHT' as const,
};

export const enumDiscussionCloseReason = {
  RESOLVED: 'RESOLVED' as const,
  OUTDATED: 'OUTDATED' as const,
  DUPLICATE: 'DUPLICATE' as const,
};

export const enumDiscussionOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumDiscussionPollOptionOrderField = {
  AUTHORED_ORDER: 'AUTHORED_ORDER' as const,
  VOTE_COUNT: 'VOTE_COUNT' as const,
};

export const enumDiscussionState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumDiscussionStateReason = {
  RESOLVED: 'RESOLVED' as const,
  OUTDATED: 'OUTDATED' as const,
  DUPLICATE: 'DUPLICATE' as const,
  REOPENED: 'REOPENED' as const,
};

export const enumDismissReason = {
  FIX_STARTED: 'FIX_STARTED' as const,
  NO_BANDWIDTH: 'NO_BANDWIDTH' as const,
  TOLERABLE_RISK: 'TOLERABLE_RISK' as const,
  INACCURATE: 'INACCURATE' as const,
  NOT_USED: 'NOT_USED' as const,
};

export const enumEnterpriseAdministratorInvitationOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumEnterpriseAdministratorRole = {
  OWNER: 'OWNER' as const,
  BILLING_MANAGER: 'BILLING_MANAGER' as const,
};

export const enumEnterpriseAllowPrivateRepositoryForkingPolicyValue = {
  ENTERPRISE_ORGANIZATIONS: 'ENTERPRISE_ORGANIZATIONS' as const,
  SAME_ORGANIZATION: 'SAME_ORGANIZATION' as const,
  SAME_ORGANIZATION_USER_ACCOUNTS: 'SAME_ORGANIZATION_USER_ACCOUNTS' as const,
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS: 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS' as const,
  USER_ACCOUNTS: 'USER_ACCOUNTS' as const,
  EVERYWHERE: 'EVERYWHERE' as const,
};

export const enumEnterpriseDefaultRepositoryPermissionSettingValue = {
  NO_POLICY: 'NO_POLICY' as const,
  ADMIN: 'ADMIN' as const,
  WRITE: 'WRITE' as const,
  READ: 'READ' as const,
  NONE: 'NONE' as const,
};

export const enumEnterpriseEnabledDisabledSettingValue = {
  ENABLED: 'ENABLED' as const,
  DISABLED: 'DISABLED' as const,
  NO_POLICY: 'NO_POLICY' as const,
};

export const enumEnterpriseEnabledSettingValue = {
  ENABLED: 'ENABLED' as const,
  NO_POLICY: 'NO_POLICY' as const,
};

export const enumEnterpriseMemberOrderField = {
  LOGIN: 'LOGIN' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumEnterpriseMembersCanCreateRepositoriesSettingValue = {
  NO_POLICY: 'NO_POLICY' as const,
  ALL: 'ALL' as const,
  PUBLIC: 'PUBLIC' as const,
  PRIVATE: 'PRIVATE' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumEnterpriseMembersCanMakePurchasesSettingValue = {
  ENABLED: 'ENABLED' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumEnterpriseMembershipType = {
  ALL: 'ALL' as const,
  ADMIN: 'ADMIN' as const,
  BILLING_MANAGER: 'BILLING_MANAGER' as const,
  ORG_MEMBERSHIP: 'ORG_MEMBERSHIP' as const,
};

export const enumEnterpriseOrderField = {
  NAME: 'NAME' as const,
};

export const enumEnterpriseServerInstallationOrderField = {
  HOST_NAME: 'HOST_NAME' as const,
  CUSTOMER_NAME: 'CUSTOMER_NAME' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumEnterpriseServerUserAccountEmailOrderField = {
  EMAIL: 'EMAIL' as const,
};

export const enumEnterpriseServerUserAccountOrderField = {
  LOGIN: 'LOGIN' as const,
  REMOTE_CREATED_AT: 'REMOTE_CREATED_AT' as const,
};

export const enumEnterpriseServerUserAccountsUploadOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumEnterpriseServerUserAccountsUploadSyncState = {
  PENDING: 'PENDING' as const,
  SUCCESS: 'SUCCESS' as const,
  FAILURE: 'FAILURE' as const,
};

export const enumEnterpriseUserAccountMembershipRole = {
  MEMBER: 'MEMBER' as const,
  OWNER: 'OWNER' as const,
  UNAFFILIATED: 'UNAFFILIATED' as const,
};

export const enumEnterpriseUserDeployment = {
  CLOUD: 'CLOUD' as const,
  SERVER: 'SERVER' as const,
};

export const enumEnvironmentOrderField = {
  NAME: 'NAME' as const,
};

export const enumFileViewedState = {
  DISMISSED: 'DISMISSED' as const,
  VIEWED: 'VIEWED' as const,
  UNVIEWED: 'UNVIEWED' as const,
};

export const enumFundingPlatform = {
  GITHUB: 'GITHUB' as const,
  PATREON: 'PATREON' as const,
  OPEN_COLLECTIVE: 'OPEN_COLLECTIVE' as const,
  KO_FI: 'KO_FI' as const,
  TIDELIFT: 'TIDELIFT' as const,
  COMMUNITY_BRIDGE: 'COMMUNITY_BRIDGE' as const,
  LIBERAPAY: 'LIBERAPAY' as const,
  ISSUEHUNT: 'ISSUEHUNT' as const,
  OTECHIE: 'OTECHIE' as const,
  LFX_CROWDFUNDING: 'LFX_CROWDFUNDING' as const,
  CUSTOM: 'CUSTOM' as const,
};

export const enumGistOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  PUSHED_AT: 'PUSHED_AT' as const,
};

export const enumGistPrivacy = {
  PUBLIC: 'PUBLIC' as const,
  SECRET: 'SECRET' as const,
  ALL: 'ALL' as const,
};

export const enumGitSignatureState = {
  VALID: 'VALID' as const,
  INVALID: 'INVALID' as const,
  MALFORMED_SIG: 'MALFORMED_SIG' as const,
  UNKNOWN_KEY: 'UNKNOWN_KEY' as const,
  BAD_EMAIL: 'BAD_EMAIL' as const,
  UNVERIFIED_EMAIL: 'UNVERIFIED_EMAIL' as const,
  NO_USER: 'NO_USER' as const,
  UNKNOWN_SIG_TYPE: 'UNKNOWN_SIG_TYPE' as const,
  UNSIGNED: 'UNSIGNED' as const,
  GPGVERIFY_UNAVAILABLE: 'GPGVERIFY_UNAVAILABLE' as const,
  GPGVERIFY_ERROR: 'GPGVERIFY_ERROR' as const,
  NOT_SIGNING_KEY: 'NOT_SIGNING_KEY' as const,
  EXPIRED_KEY: 'EXPIRED_KEY' as const,
  OCSP_PENDING: 'OCSP_PENDING' as const,
  OCSP_ERROR: 'OCSP_ERROR' as const,
  BAD_CERT: 'BAD_CERT' as const,
  OCSP_REVOKED: 'OCSP_REVOKED' as const,
};

export const enumIdentityProviderConfigurationState = {
  ENFORCED: 'ENFORCED' as const,
  CONFIGURED: 'CONFIGURED' as const,
  UNCONFIGURED: 'UNCONFIGURED' as const,
};

export const enumIpAllowListEnabledSettingValue = {
  ENABLED: 'ENABLED' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumIpAllowListEntryOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  ALLOW_LIST_VALUE: 'ALLOW_LIST_VALUE' as const,
};

export const enumIpAllowListForInstalledAppsEnabledSettingValue = {
  ENABLED: 'ENABLED' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumIssueClosedStateReason = {
  COMPLETED: 'COMPLETED' as const,
  NOT_PLANNED: 'NOT_PLANNED' as const,
};

export const enumIssueCommentOrderField = {
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumIssueOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  COMMENTS: 'COMMENTS' as const,
};

export const enumIssueState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumIssueStateReason = {
  REOPENED: 'REOPENED' as const,
  NOT_PLANNED: 'NOT_PLANNED' as const,
  COMPLETED: 'COMPLETED' as const,
};

export const enumIssueTimelineItemsItemType = {
  ISSUE_COMMENT: 'ISSUE_COMMENT' as const,
  CROSS_REFERENCED_EVENT: 'CROSS_REFERENCED_EVENT' as const,
  ADDED_TO_PROJECT_EVENT: 'ADDED_TO_PROJECT_EVENT' as const,
  ASSIGNED_EVENT: 'ASSIGNED_EVENT' as const,
  CLOSED_EVENT: 'CLOSED_EVENT' as const,
  COMMENT_DELETED_EVENT: 'COMMENT_DELETED_EVENT' as const,
  CONNECTED_EVENT: 'CONNECTED_EVENT' as const,
  CONVERTED_NOTE_TO_ISSUE_EVENT: 'CONVERTED_NOTE_TO_ISSUE_EVENT' as const,
  CONVERTED_TO_DISCUSSION_EVENT: 'CONVERTED_TO_DISCUSSION_EVENT' as const,
  DEMILESTONED_EVENT: 'DEMILESTONED_EVENT' as const,
  DISCONNECTED_EVENT: 'DISCONNECTED_EVENT' as const,
  LABELED_EVENT: 'LABELED_EVENT' as const,
  LOCKED_EVENT: 'LOCKED_EVENT' as const,
  MARKED_AS_DUPLICATE_EVENT: 'MARKED_AS_DUPLICATE_EVENT' as const,
  MENTIONED_EVENT: 'MENTIONED_EVENT' as const,
  MILESTONED_EVENT: 'MILESTONED_EVENT' as const,
  MOVED_COLUMNS_IN_PROJECT_EVENT: 'MOVED_COLUMNS_IN_PROJECT_EVENT' as const,
  PINNED_EVENT: 'PINNED_EVENT' as const,
  REFERENCED_EVENT: 'REFERENCED_EVENT' as const,
  REMOVED_FROM_PROJECT_EVENT: 'REMOVED_FROM_PROJECT_EVENT' as const,
  RENAMED_TITLE_EVENT: 'RENAMED_TITLE_EVENT' as const,
  REOPENED_EVENT: 'REOPENED_EVENT' as const,
  SUBSCRIBED_EVENT: 'SUBSCRIBED_EVENT' as const,
  TRANSFERRED_EVENT: 'TRANSFERRED_EVENT' as const,
  UNASSIGNED_EVENT: 'UNASSIGNED_EVENT' as const,
  UNLABELED_EVENT: 'UNLABELED_EVENT' as const,
  UNLOCKED_EVENT: 'UNLOCKED_EVENT' as const,
  USER_BLOCKED_EVENT: 'USER_BLOCKED_EVENT' as const,
  UNMARKED_AS_DUPLICATE_EVENT: 'UNMARKED_AS_DUPLICATE_EVENT' as const,
  UNPINNED_EVENT: 'UNPINNED_EVENT' as const,
  UNSUBSCRIBED_EVENT: 'UNSUBSCRIBED_EVENT' as const,
};

export const enumLabelOrderField = {
  NAME: 'NAME' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumLanguageOrderField = {
  SIZE: 'SIZE' as const,
};

export const enumLockReason = {
  OFF_TOPIC: 'OFF_TOPIC' as const,
  TOO_HEATED: 'TOO_HEATED' as const,
  RESOLVED: 'RESOLVED' as const,
  SPAM: 'SPAM' as const,
};

export const enumMannequinOrderField = {
  LOGIN: 'LOGIN' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumMergeCommitMessage = {
  PR_TITLE: 'PR_TITLE' as const,
  PR_BODY: 'PR_BODY' as const,
  BLANK: 'BLANK' as const,
};

export const enumMergeCommitTitle = {
  PR_TITLE: 'PR_TITLE' as const,
  MERGE_MESSAGE: 'MERGE_MESSAGE' as const,
};

export const enumMergeQueueEntryState = {
  QUEUED: 'QUEUED' as const,
  AWAITING_CHECKS: 'AWAITING_CHECKS' as const,
  MERGEABLE: 'MERGEABLE' as const,
  UNMERGEABLE: 'UNMERGEABLE' as const,
  LOCKED: 'LOCKED' as const,
};

export const enumMergeQueueMergingStrategy = {
  ALLGREEN: 'ALLGREEN' as const,
  HEADGREEN: 'HEADGREEN' as const,
};

export const enumMergeableState = {
  MERGEABLE: 'MERGEABLE' as const,
  CONFLICTING: 'CONFLICTING' as const,
  UNKNOWN: 'UNKNOWN' as const,
};

export const enumMigrationSourceType = {
  AZURE_DEVOPS: 'AZURE_DEVOPS' as const,
  BITBUCKET_SERVER: 'BITBUCKET_SERVER' as const,
  GITHUB_ARCHIVE: 'GITHUB_ARCHIVE' as const,
};

export const enumMigrationState = {
  NOT_STARTED: 'NOT_STARTED' as const,
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  SUCCEEDED: 'SUCCEEDED' as const,
  FAILED: 'FAILED' as const,
  PENDING_VALIDATION: 'PENDING_VALIDATION' as const,
  FAILED_VALIDATION: 'FAILED_VALIDATION' as const,
};

export const enumMilestoneOrderField = {
  DUE_DATE: 'DUE_DATE' as const,
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  NUMBER: 'NUMBER' as const,
};

export const enumMilestoneState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumNotificationRestrictionSettingValue = {
  ENABLED: 'ENABLED' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumOidcProviderType = {
  AAD: 'AAD' as const,
};

export const enumOauthApplicationCreateAuditEntryState = {
  ACTIVE: 'ACTIVE' as const,
  SUSPENDED: 'SUSPENDED' as const,
  PENDING_DELETION: 'PENDING_DELETION' as const,
};

export const enumOperationType = {
  ACCESS: 'ACCESS' as const,
  AUTHENTICATION: 'AUTHENTICATION' as const,
  CREATE: 'CREATE' as const,
  MODIFY: 'MODIFY' as const,
  REMOVE: 'REMOVE' as const,
  RESTORE: 'RESTORE' as const,
  TRANSFER: 'TRANSFER' as const,
};

export const enumOrderDirection = {
  ASC: 'ASC' as const,
  DESC: 'DESC' as const,
};

export const enumOrgAddMemberAuditEntryPermission = {
  READ: 'READ' as const,
  ADMIN: 'ADMIN' as const,
};

export const enumOrgCreateAuditEntryBillingPlan = {
  FREE: 'FREE' as const,
  BUSINESS: 'BUSINESS' as const,
  BUSINESS_PLUS: 'BUSINESS_PLUS' as const,
  UNLIMITED: 'UNLIMITED' as const,
  TIERED_PER_SEAT: 'TIERED_PER_SEAT' as const,
};

export const enumOrgEnterpriseOwnerOrderField = {
  LOGIN: 'LOGIN' as const,
};

export const enumOrgRemoveBillingManagerAuditEntryReason = {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE' as const,
  SAML_EXTERNAL_IDENTITY_MISSING: 'SAML_EXTERNAL_IDENTITY_MISSING' as const,
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY:
    'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' as const,
};

export const enumOrgRemoveMemberAuditEntryMembershipType = {
  SUSPENDED: 'SUSPENDED' as const,
  DIRECT_MEMBER: 'DIRECT_MEMBER' as const,
  ADMIN: 'ADMIN' as const,
  BILLING_MANAGER: 'BILLING_MANAGER' as const,
  UNAFFILIATED: 'UNAFFILIATED' as const,
  OUTSIDE_COLLABORATOR: 'OUTSIDE_COLLABORATOR' as const,
};

export const enumOrgRemoveMemberAuditEntryReason = {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE' as const,
  SAML_EXTERNAL_IDENTITY_MISSING: 'SAML_EXTERNAL_IDENTITY_MISSING' as const,
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY:
    'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' as const,
  USER_ACCOUNT_DELETED: 'USER_ACCOUNT_DELETED' as const,
  TWO_FACTOR_ACCOUNT_RECOVERY: 'TWO_FACTOR_ACCOUNT_RECOVERY' as const,
};

export const enumOrgRemoveOutsideCollaboratorAuditEntryMembershipType = {
  OUTSIDE_COLLABORATOR: 'OUTSIDE_COLLABORATOR' as const,
  UNAFFILIATED: 'UNAFFILIATED' as const,
  BILLING_MANAGER: 'BILLING_MANAGER' as const,
};

export const enumOrgRemoveOutsideCollaboratorAuditEntryReason = {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE: 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE' as const,
  SAML_EXTERNAL_IDENTITY_MISSING: 'SAML_EXTERNAL_IDENTITY_MISSING' as const,
};

export const enumOrgUpdateDefaultRepositoryPermissionAuditEntryPermission = {
  READ: 'READ' as const,
  WRITE: 'WRITE' as const,
  ADMIN: 'ADMIN' as const,
  NONE: 'NONE' as const,
};

export const enumOrgUpdateMemberAuditEntryPermission = {
  READ: 'READ' as const,
  ADMIN: 'ADMIN' as const,
};

export const enumOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = {
  ALL: 'ALL' as const,
  PUBLIC: 'PUBLIC' as const,
  NONE: 'NONE' as const,
  PRIVATE: 'PRIVATE' as const,
  INTERNAL: 'INTERNAL' as const,
  PUBLIC_INTERNAL: 'PUBLIC_INTERNAL' as const,
  PRIVATE_INTERNAL: 'PRIVATE_INTERNAL' as const,
  PUBLIC_PRIVATE: 'PUBLIC_PRIVATE' as const,
};

export const enumOrganizationInvitationRole = {
  DIRECT_MEMBER: 'DIRECT_MEMBER' as const,
  ADMIN: 'ADMIN' as const,
  BILLING_MANAGER: 'BILLING_MANAGER' as const,
  REINSTATE: 'REINSTATE' as const,
};

export const enumOrganizationInvitationSource = {
  UNKNOWN: 'UNKNOWN' as const,
  MEMBER: 'MEMBER' as const,
  SCIM: 'SCIM' as const,
};

export const enumOrganizationInvitationType = {
  USER: 'USER' as const,
  EMAIL: 'EMAIL' as const,
};

export const enumOrganizationMemberRole = {
  MEMBER: 'MEMBER' as const,
  ADMIN: 'ADMIN' as const,
};

export const enumOrganizationMembersCanCreateRepositoriesSettingValue = {
  ALL: 'ALL' as const,
  PRIVATE: 'PRIVATE' as const,
  INTERNAL: 'INTERNAL' as const,
  DISABLED: 'DISABLED' as const,
};

export const enumOrganizationMigrationState = {
  NOT_STARTED: 'NOT_STARTED' as const,
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  PRE_REPO_MIGRATION: 'PRE_REPO_MIGRATION' as const,
  REPO_MIGRATION: 'REPO_MIGRATION' as const,
  POST_REPO_MIGRATION: 'POST_REPO_MIGRATION' as const,
  SUCCEEDED: 'SUCCEEDED' as const,
  FAILED: 'FAILED' as const,
  PENDING_VALIDATION: 'PENDING_VALIDATION' as const,
  FAILED_VALIDATION: 'FAILED_VALIDATION' as const,
};

export const enumOrganizationOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  LOGIN: 'LOGIN' as const,
};

export const enumPackageFileOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumPackageOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumPackageType = {
  NPM: 'NPM' as const,
  RUBYGEMS: 'RUBYGEMS' as const,
  MAVEN: 'MAVEN' as const,
  DOCKER: 'DOCKER' as const,
  DEBIAN: 'DEBIAN' as const,
  NUGET: 'NUGET' as const,
  PYPI: 'PYPI' as const,
};

export const enumPackageVersionOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumPatchStatus = {
  ADDED: 'ADDED' as const,
  DELETED: 'DELETED' as const,
  RENAMED: 'RENAMED' as const,
  COPIED: 'COPIED' as const,
  MODIFIED: 'MODIFIED' as const,
  CHANGED: 'CHANGED' as const,
};

export const enumPinnableItemType = {
  REPOSITORY: 'REPOSITORY' as const,
  GIST: 'GIST' as const,
  ISSUE: 'ISSUE' as const,
  PROJECT: 'PROJECT' as const,
  PULL_REQUEST: 'PULL_REQUEST' as const,
  USER: 'USER' as const,
  ORGANIZATION: 'ORGANIZATION' as const,
  TEAM: 'TEAM' as const,
};

export const enumPinnedDiscussionGradient = {
  RED_ORANGE: 'RED_ORANGE' as const,
  BLUE_MINT: 'BLUE_MINT' as const,
  BLUE_PURPLE: 'BLUE_PURPLE' as const,
  PINK_BLUE: 'PINK_BLUE' as const,
  PURPLE_CORAL: 'PURPLE_CORAL' as const,
};

export const enumPinnedDiscussionPattern = {
  DOT_FILL: 'DOT_FILL' as const,
  PLUS: 'PLUS' as const,
  ZAP: 'ZAP' as const,
  CHEVRON_UP: 'CHEVRON_UP' as const,
  DOT: 'DOT' as const,
  HEART_FILL: 'HEART_FILL' as const,
};

export const enumProjectCardArchivedState = {
  ARCHIVED: 'ARCHIVED' as const,
  NOT_ARCHIVED: 'NOT_ARCHIVED' as const,
};

export const enumProjectCardState = {
  CONTENT_ONLY: 'CONTENT_ONLY' as const,
  NOTE_ONLY: 'NOTE_ONLY' as const,
  REDACTED: 'REDACTED' as const,
};

export const enumProjectColumnPurpose = {
  TODO: 'TODO' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  DONE: 'DONE' as const,
};

export const enumProjectOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  NAME: 'NAME' as const,
};

export const enumProjectState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumProjectTemplate = {
  BASIC_KANBAN: 'BASIC_KANBAN' as const,
  AUTOMATED_KANBAN_V2: 'AUTOMATED_KANBAN_V2' as const,
  AUTOMATED_REVIEWS_KANBAN: 'AUTOMATED_REVIEWS_KANBAN' as const,
  BUG_TRIAGE: 'BUG_TRIAGE' as const,
};

export const enumProjectV2CustomFieldType = {
  TEXT: 'TEXT' as const,
  SINGLE_SELECT: 'SINGLE_SELECT' as const,
  NUMBER: 'NUMBER' as const,
  DATE: 'DATE' as const,
};

export const enumProjectV2FieldOrderField = {
  POSITION: 'POSITION' as const,
  CREATED_AT: 'CREATED_AT' as const,
  NAME: 'NAME' as const,
};

export const enumProjectV2FieldType = {
  ASSIGNEES: 'ASSIGNEES' as const,
  LINKED_PULL_REQUESTS: 'LINKED_PULL_REQUESTS' as const,
  REVIEWERS: 'REVIEWERS' as const,
  LABELS: 'LABELS' as const,
  MILESTONE: 'MILESTONE' as const,
  REPOSITORY: 'REPOSITORY' as const,
  TITLE: 'TITLE' as const,
  TEXT: 'TEXT' as const,
  SINGLE_SELECT: 'SINGLE_SELECT' as const,
  NUMBER: 'NUMBER' as const,
  DATE: 'DATE' as const,
  ITERATION: 'ITERATION' as const,
  TRACKS: 'TRACKS' as const,
  TRACKED_BY: 'TRACKED_BY' as const,
};

export const enumProjectV2ItemFieldValueOrderField = {
  POSITION: 'POSITION' as const,
};

export const enumProjectV2ItemOrderField = {
  POSITION: 'POSITION' as const,
};

export const enumProjectV2ItemType = {
  ISSUE: 'ISSUE' as const,
  PULL_REQUEST: 'PULL_REQUEST' as const,
  DRAFT_ISSUE: 'DRAFT_ISSUE' as const,
  REDACTED: 'REDACTED' as const,
};

export const enumProjectV2OrderField = {
  TITLE: 'TITLE' as const,
  NUMBER: 'NUMBER' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumProjectV2Roles = {
  NONE: 'NONE' as const,
  READER: 'READER' as const,
  WRITER: 'WRITER' as const,
  ADMIN: 'ADMIN' as const,
};

export const enumProjectV2SingleSelectFieldOptionColor = {
  GRAY: 'GRAY' as const,
  BLUE: 'BLUE' as const,
  GREEN: 'GREEN' as const,
  YELLOW: 'YELLOW' as const,
  ORANGE: 'ORANGE' as const,
  RED: 'RED' as const,
  PINK: 'PINK' as const,
  PURPLE: 'PURPLE' as const,
};

export const enumProjectV2State = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumProjectV2ViewLayout = {
  BOARD_LAYOUT: 'BOARD_LAYOUT' as const,
  TABLE_LAYOUT: 'TABLE_LAYOUT' as const,
  ROADMAP_LAYOUT: 'ROADMAP_LAYOUT' as const,
};

export const enumProjectV2ViewOrderField = {
  POSITION: 'POSITION' as const,
  CREATED_AT: 'CREATED_AT' as const,
  NAME: 'NAME' as const,
};

export const enumProjectV2WorkflowsOrderField = {
  NAME: 'NAME' as const,
  NUMBER: 'NUMBER' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumPullRequestBranchUpdateMethod = {
  MERGE: 'MERGE' as const,
  REBASE: 'REBASE' as const,
};

export const enumPullRequestMergeMethod = {
  MERGE: 'MERGE' as const,
  SQUASH: 'SQUASH' as const,
  REBASE: 'REBASE' as const,
};

export const enumPullRequestOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumPullRequestReviewCommentState = {
  PENDING: 'PENDING' as const,
  SUBMITTED: 'SUBMITTED' as const,
};

export const enumPullRequestReviewDecision = {
  CHANGES_REQUESTED: 'CHANGES_REQUESTED' as const,
  APPROVED: 'APPROVED' as const,
  REVIEW_REQUIRED: 'REVIEW_REQUIRED' as const,
};

export const enumPullRequestReviewEvent = {
  COMMENT: 'COMMENT' as const,
  APPROVE: 'APPROVE' as const,
  REQUEST_CHANGES: 'REQUEST_CHANGES' as const,
  DISMISS: 'DISMISS' as const,
};

export const enumPullRequestReviewState = {
  PENDING: 'PENDING' as const,
  COMMENTED: 'COMMENTED' as const,
  APPROVED: 'APPROVED' as const,
  CHANGES_REQUESTED: 'CHANGES_REQUESTED' as const,
  DISMISSED: 'DISMISSED' as const,
};

export const enumPullRequestReviewThreadSubjectType = {
  LINE: 'LINE' as const,
  FILE: 'FILE' as const,
};

export const enumPullRequestState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
  MERGED: 'MERGED' as const,
};

export const enumPullRequestTimelineItemsItemType = {
  PULL_REQUEST_COMMIT: 'PULL_REQUEST_COMMIT' as const,
  PULL_REQUEST_COMMIT_COMMENT_THREAD: 'PULL_REQUEST_COMMIT_COMMENT_THREAD' as const,
  PULL_REQUEST_REVIEW: 'PULL_REQUEST_REVIEW' as const,
  PULL_REQUEST_REVIEW_THREAD: 'PULL_REQUEST_REVIEW_THREAD' as const,
  PULL_REQUEST_REVISION_MARKER: 'PULL_REQUEST_REVISION_MARKER' as const,
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT: 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT' as const,
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT: 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT' as const,
  AUTO_MERGE_DISABLED_EVENT: 'AUTO_MERGE_DISABLED_EVENT' as const,
  AUTO_MERGE_ENABLED_EVENT: 'AUTO_MERGE_ENABLED_EVENT' as const,
  AUTO_REBASE_ENABLED_EVENT: 'AUTO_REBASE_ENABLED_EVENT' as const,
  AUTO_SQUASH_ENABLED_EVENT: 'AUTO_SQUASH_ENABLED_EVENT' as const,
  BASE_REF_CHANGED_EVENT: 'BASE_REF_CHANGED_EVENT' as const,
  BASE_REF_FORCE_PUSHED_EVENT: 'BASE_REF_FORCE_PUSHED_EVENT' as const,
  BASE_REF_DELETED_EVENT: 'BASE_REF_DELETED_EVENT' as const,
  DEPLOYED_EVENT: 'DEPLOYED_EVENT' as const,
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT: 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT' as const,
  HEAD_REF_DELETED_EVENT: 'HEAD_REF_DELETED_EVENT' as const,
  HEAD_REF_FORCE_PUSHED_EVENT: 'HEAD_REF_FORCE_PUSHED_EVENT' as const,
  HEAD_REF_RESTORED_EVENT: 'HEAD_REF_RESTORED_EVENT' as const,
  MERGED_EVENT: 'MERGED_EVENT' as const,
  REVIEW_DISMISSED_EVENT: 'REVIEW_DISMISSED_EVENT' as const,
  REVIEW_REQUESTED_EVENT: 'REVIEW_REQUESTED_EVENT' as const,
  REVIEW_REQUEST_REMOVED_EVENT: 'REVIEW_REQUEST_REMOVED_EVENT' as const,
  READY_FOR_REVIEW_EVENT: 'READY_FOR_REVIEW_EVENT' as const,
  CONVERT_TO_DRAFT_EVENT: 'CONVERT_TO_DRAFT_EVENT' as const,
  ADDED_TO_MERGE_QUEUE_EVENT: 'ADDED_TO_MERGE_QUEUE_EVENT' as const,
  REMOVED_FROM_MERGE_QUEUE_EVENT: 'REMOVED_FROM_MERGE_QUEUE_EVENT' as const,
  ISSUE_COMMENT: 'ISSUE_COMMENT' as const,
  CROSS_REFERENCED_EVENT: 'CROSS_REFERENCED_EVENT' as const,
  ADDED_TO_PROJECT_EVENT: 'ADDED_TO_PROJECT_EVENT' as const,
  ASSIGNED_EVENT: 'ASSIGNED_EVENT' as const,
  CLOSED_EVENT: 'CLOSED_EVENT' as const,
  COMMENT_DELETED_EVENT: 'COMMENT_DELETED_EVENT' as const,
  CONNECTED_EVENT: 'CONNECTED_EVENT' as const,
  CONVERTED_NOTE_TO_ISSUE_EVENT: 'CONVERTED_NOTE_TO_ISSUE_EVENT' as const,
  CONVERTED_TO_DISCUSSION_EVENT: 'CONVERTED_TO_DISCUSSION_EVENT' as const,
  DEMILESTONED_EVENT: 'DEMILESTONED_EVENT' as const,
  DISCONNECTED_EVENT: 'DISCONNECTED_EVENT' as const,
  LABELED_EVENT: 'LABELED_EVENT' as const,
  LOCKED_EVENT: 'LOCKED_EVENT' as const,
  MARKED_AS_DUPLICATE_EVENT: 'MARKED_AS_DUPLICATE_EVENT' as const,
  MENTIONED_EVENT: 'MENTIONED_EVENT' as const,
  MILESTONED_EVENT: 'MILESTONED_EVENT' as const,
  MOVED_COLUMNS_IN_PROJECT_EVENT: 'MOVED_COLUMNS_IN_PROJECT_EVENT' as const,
  PINNED_EVENT: 'PINNED_EVENT' as const,
  REFERENCED_EVENT: 'REFERENCED_EVENT' as const,
  REMOVED_FROM_PROJECT_EVENT: 'REMOVED_FROM_PROJECT_EVENT' as const,
  RENAMED_TITLE_EVENT: 'RENAMED_TITLE_EVENT' as const,
  REOPENED_EVENT: 'REOPENED_EVENT' as const,
  SUBSCRIBED_EVENT: 'SUBSCRIBED_EVENT' as const,
  TRANSFERRED_EVENT: 'TRANSFERRED_EVENT' as const,
  UNASSIGNED_EVENT: 'UNASSIGNED_EVENT' as const,
  UNLABELED_EVENT: 'UNLABELED_EVENT' as const,
  UNLOCKED_EVENT: 'UNLOCKED_EVENT' as const,
  USER_BLOCKED_EVENT: 'USER_BLOCKED_EVENT' as const,
  UNMARKED_AS_DUPLICATE_EVENT: 'UNMARKED_AS_DUPLICATE_EVENT' as const,
  UNPINNED_EVENT: 'UNPINNED_EVENT' as const,
  UNSUBSCRIBED_EVENT: 'UNSUBSCRIBED_EVENT' as const,
};

export const enumPullRequestUpdateState = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumReactionContent = {
  THUMBS_UP: 'THUMBS_UP' as const,
  THUMBS_DOWN: 'THUMBS_DOWN' as const,
  LAUGH: 'LAUGH' as const,
  HOORAY: 'HOORAY' as const,
  CONFUSED: 'CONFUSED' as const,
  HEART: 'HEART' as const,
  ROCKET: 'ROCKET' as const,
  EYES: 'EYES' as const,
};

export const enumReactionOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumRefOrderField = {
  TAG_COMMIT_DATE: 'TAG_COMMIT_DATE' as const,
  ALPHABETICAL: 'ALPHABETICAL' as const,
};

export const enumReleaseOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  NAME: 'NAME' as const,
};

export const enumRepoAccessAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumRepoAddMemberAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumRepoArchivedAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumRepoChangeMergeSettingAuditEntryMergeType = {
  MERGE: 'MERGE' as const,
  REBASE: 'REBASE' as const,
  SQUASH: 'SQUASH' as const,
};

export const enumRepoCreateAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumRepoDestroyAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumRepoRemoveMemberAuditEntryVisibility = {
  INTERNAL: 'INTERNAL' as const,
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
};

export const enumReportedContentClassifiers = {
  SPAM: 'SPAM' as const,
  ABUSE: 'ABUSE' as const,
  OFF_TOPIC: 'OFF_TOPIC' as const,
  OUTDATED: 'OUTDATED' as const,
  DUPLICATE: 'DUPLICATE' as const,
  RESOLVED: 'RESOLVED' as const,
};

export const enumRepositoryAffiliation = {
  OWNER: 'OWNER' as const,
  COLLABORATOR: 'COLLABORATOR' as const,
  ORGANIZATION_MEMBER: 'ORGANIZATION_MEMBER' as const,
};

export const enumRepositoryContributionType = {
  COMMIT: 'COMMIT' as const,
  ISSUE: 'ISSUE' as const,
  PULL_REQUEST: 'PULL_REQUEST' as const,
  REPOSITORY: 'REPOSITORY' as const,
  PULL_REQUEST_REVIEW: 'PULL_REQUEST_REVIEW' as const,
};

export const enumRepositoryInteractionLimit = {
  EXISTING_USERS: 'EXISTING_USERS' as const,
  CONTRIBUTORS_ONLY: 'CONTRIBUTORS_ONLY' as const,
  COLLABORATORS_ONLY: 'COLLABORATORS_ONLY' as const,
  NO_LIMIT: 'NO_LIMIT' as const,
};

export const enumRepositoryInteractionLimitExpiry = {
  ONE_DAY: 'ONE_DAY' as const,
  THREE_DAYS: 'THREE_DAYS' as const,
  ONE_WEEK: 'ONE_WEEK' as const,
  ONE_MONTH: 'ONE_MONTH' as const,
  SIX_MONTHS: 'SIX_MONTHS' as const,
};

export const enumRepositoryInteractionLimitOrigin = {
  REPOSITORY: 'REPOSITORY' as const,
  ORGANIZATION: 'ORGANIZATION' as const,
  USER: 'USER' as const,
};

export const enumRepositoryInvitationOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumRepositoryLockReason = {
  MOVING: 'MOVING' as const,
  BILLING: 'BILLING' as const,
  RENAME: 'RENAME' as const,
  MIGRATING: 'MIGRATING' as const,
  TRADE_RESTRICTION: 'TRADE_RESTRICTION' as const,
  TRANSFERRING_OWNERSHIP: 'TRANSFERRING_OWNERSHIP' as const,
};

export const enumRepositoryMigrationOrderDirection = {
  ASC: 'ASC' as const,
  DESC: 'DESC' as const,
};

export const enumRepositoryMigrationOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumRepositoryOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  PUSHED_AT: 'PUSHED_AT' as const,
  NAME: 'NAME' as const,
  STARGAZERS: 'STARGAZERS' as const,
};

export const enumRepositoryPermission = {
  ADMIN: 'ADMIN' as const,
  MAINTAIN: 'MAINTAIN' as const,
  WRITE: 'WRITE' as const,
  TRIAGE: 'TRIAGE' as const,
  READ: 'READ' as const,
};

export const enumRepositoryPrivacy = {
  PUBLIC: 'PUBLIC' as const,
  PRIVATE: 'PRIVATE' as const,
};

export const enumRepositoryRuleType = {
  CREATION: 'CREATION' as const,
  UPDATE: 'UPDATE' as const,
  DELETION: 'DELETION' as const,
  REQUIRED_LINEAR_HISTORY: 'REQUIRED_LINEAR_HISTORY' as const,
  MERGE_QUEUE: 'MERGE_QUEUE' as const,
  REQUIRED_REVIEW_THREAD_RESOLUTION: 'REQUIRED_REVIEW_THREAD_RESOLUTION' as const,
  REQUIRED_DEPLOYMENTS: 'REQUIRED_DEPLOYMENTS' as const,
  REQUIRED_SIGNATURES: 'REQUIRED_SIGNATURES' as const,
  PULL_REQUEST: 'PULL_REQUEST' as const,
  REQUIRED_STATUS_CHECKS: 'REQUIRED_STATUS_CHECKS' as const,
  REQUIRED_WORKFLOW_STATUS_CHECKS: 'REQUIRED_WORKFLOW_STATUS_CHECKS' as const,
  NON_FAST_FORWARD: 'NON_FAST_FORWARD' as const,
  AUTHORIZATION: 'AUTHORIZATION' as const,
  TAG: 'TAG' as const,
  MERGE_QUEUE_LOCKED_REF: 'MERGE_QUEUE_LOCKED_REF' as const,
  LOCK_BRANCH: 'LOCK_BRANCH' as const,
  MAX_REF_UPDATES: 'MAX_REF_UPDATES' as const,
  COMMIT_MESSAGE_PATTERN: 'COMMIT_MESSAGE_PATTERN' as const,
  COMMIT_AUTHOR_EMAIL_PATTERN: 'COMMIT_AUTHOR_EMAIL_PATTERN' as const,
  COMMITTER_EMAIL_PATTERN: 'COMMITTER_EMAIL_PATTERN' as const,
  BRANCH_NAME_PATTERN: 'BRANCH_NAME_PATTERN' as const,
  TAG_NAME_PATTERN: 'TAG_NAME_PATTERN' as const,
  WORKFLOWS: 'WORKFLOWS' as const,
  RULESET_REQUIRED_SIGNATURES: 'RULESET_REQUIRED_SIGNATURES' as const,
  SECRET_SCANNING: 'SECRET_SCANNING' as const,
  WORKFLOW_UPDATES: 'WORKFLOW_UPDATES' as const,
};

export const enumRepositoryRulesetBypassActorBypassMode = {
  ALWAYS: 'ALWAYS' as const,
  PULL_REQUEST: 'PULL_REQUEST' as const,
};

export const enumRepositoryRulesetTarget = {
  BRANCH: 'BRANCH' as const,
  TAG: 'TAG' as const,
};

export const enumRepositoryVisibility = {
  PRIVATE: 'PRIVATE' as const,
  PUBLIC: 'PUBLIC' as const,
  INTERNAL: 'INTERNAL' as const,
};

export const enumRepositoryVulnerabilityAlertDependencyScope = {
  RUNTIME: 'RUNTIME' as const,
  DEVELOPMENT: 'DEVELOPMENT' as const,
};

export const enumRepositoryVulnerabilityAlertState = {
  OPEN: 'OPEN' as const,
  FIXED: 'FIXED' as const,
  DISMISSED: 'DISMISSED' as const,
  AUTO_DISMISSED: 'AUTO_DISMISSED' as const,
};

export const enumRequestableCheckStatusState = {
  QUEUED: 'QUEUED' as const,
  IN_PROGRESS: 'IN_PROGRESS' as const,
  COMPLETED: 'COMPLETED' as const,
  WAITING: 'WAITING' as const,
  PENDING: 'PENDING' as const,
};

export const enumRoleInOrganization = {
  OWNER: 'OWNER' as const,
  DIRECT_MEMBER: 'DIRECT_MEMBER' as const,
  UNAFFILIATED: 'UNAFFILIATED' as const,
};

export const enumRuleEnforcement = {
  DISABLED: 'DISABLED' as const,
  ACTIVE: 'ACTIVE' as const,
  EVALUATE: 'EVALUATE' as const,
};

export const enumSamlDigestAlgorithm = {
  SHA1: 'SHA1' as const,
  SHA256: 'SHA256' as const,
  SHA384: 'SHA384' as const,
  SHA512: 'SHA512' as const,
};

export const enumSamlSignatureAlgorithm = {
  RSA_SHA1: 'RSA_SHA1' as const,
  RSA_SHA256: 'RSA_SHA256' as const,
  RSA_SHA384: 'RSA_SHA384' as const,
  RSA_SHA512: 'RSA_SHA512' as const,
};

export const enumSavedReplyOrderField = {
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumSearchType = {
  ISSUE: 'ISSUE' as const,
  REPOSITORY: 'REPOSITORY' as const,
  USER: 'USER' as const,
  DISCUSSION: 'DISCUSSION' as const,
};

export const enumSecurityAdvisoryClassification = {
  GENERAL: 'GENERAL' as const,
  MALWARE: 'MALWARE' as const,
};

export const enumSecurityAdvisoryEcosystem = {
  COMPOSER: 'COMPOSER' as const,
  ERLANG: 'ERLANG' as const,
  ACTIONS: 'ACTIONS' as const,
  GO: 'GO' as const,
  MAVEN: 'MAVEN' as const,
  NPM: 'NPM' as const,
  NUGET: 'NUGET' as const,
  PIP: 'PIP' as const,
  PUB: 'PUB' as const,
  RUBYGEMS: 'RUBYGEMS' as const,
  RUST: 'RUST' as const,
  SWIFT: 'SWIFT' as const,
};

export const enumSecurityAdvisoryIdentifierType = {
  CVE: 'CVE' as const,
  GHSA: 'GHSA' as const,
};

export const enumSecurityAdvisoryOrderField = {
  PUBLISHED_AT: 'PUBLISHED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumSecurityAdvisorySeverity = {
  LOW: 'LOW' as const,
  MODERATE: 'MODERATE' as const,
  HIGH: 'HIGH' as const,
  CRITICAL: 'CRITICAL' as const,
};

export const enumSecurityVulnerabilityOrderField = {
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumSocialAccountProvider = {
  GENERIC: 'GENERIC' as const,
  FACEBOOK: 'FACEBOOK' as const,
  HOMETOWN: 'HOMETOWN' as const,
  INSTAGRAM: 'INSTAGRAM' as const,
  LINKEDIN: 'LINKEDIN' as const,
  MASTODON: 'MASTODON' as const,
  REDDIT: 'REDDIT' as const,
  TWITCH: 'TWITCH' as const,
  TWITTER: 'TWITTER' as const,
  YOUTUBE: 'YOUTUBE' as const,
  NPM: 'NPM' as const,
};

export const enumSponsorOrderField = {
  LOGIN: 'LOGIN' as const,
  RELEVANCE: 'RELEVANCE' as const,
};

export const enumSponsorableOrderField = {
  LOGIN: 'LOGIN' as const,
};

export const enumSponsorsActivityAction = {
  NEW_SPONSORSHIP: 'NEW_SPONSORSHIP' as const,
  CANCELLED_SPONSORSHIP: 'CANCELLED_SPONSORSHIP' as const,
  TIER_CHANGE: 'TIER_CHANGE' as const,
  REFUND: 'REFUND' as const,
  PENDING_CHANGE: 'PENDING_CHANGE' as const,
  SPONSOR_MATCH_DISABLED: 'SPONSOR_MATCH_DISABLED' as const,
};

export const enumSponsorsActivityOrderField = {
  TIMESTAMP: 'TIMESTAMP' as const,
};

export const enumSponsorsActivityPeriod = {
  DAY: 'DAY' as const,
  WEEK: 'WEEK' as const,
  MONTH: 'MONTH' as const,
  ALL: 'ALL' as const,
};

export const enumSponsorsCountryOrRegionCode = {
  AF: 'AF' as const,
  AX: 'AX' as const,
  AL: 'AL' as const,
  DZ: 'DZ' as const,
  AS: 'AS' as const,
  AD: 'AD' as const,
  AO: 'AO' as const,
  AI: 'AI' as const,
  AQ: 'AQ' as const,
  AG: 'AG' as const,
  AR: 'AR' as const,
  AM: 'AM' as const,
  AW: 'AW' as const,
  AU: 'AU' as const,
  AT: 'AT' as const,
  AZ: 'AZ' as const,
  BS: 'BS' as const,
  BH: 'BH' as const,
  BD: 'BD' as const,
  BB: 'BB' as const,
  BY: 'BY' as const,
  BE: 'BE' as const,
  BZ: 'BZ' as const,
  BJ: 'BJ' as const,
  BM: 'BM' as const,
  BT: 'BT' as const,
  BO: 'BO' as const,
  BQ: 'BQ' as const,
  BA: 'BA' as const,
  BW: 'BW' as const,
  BV: 'BV' as const,
  BR: 'BR' as const,
  IO: 'IO' as const,
  BN: 'BN' as const,
  BG: 'BG' as const,
  BF: 'BF' as const,
  BI: 'BI' as const,
  KH: 'KH' as const,
  CM: 'CM' as const,
  CA: 'CA' as const,
  CV: 'CV' as const,
  KY: 'KY' as const,
  CF: 'CF' as const,
  TD: 'TD' as const,
  CL: 'CL' as const,
  CN: 'CN' as const,
  CX: 'CX' as const,
  CC: 'CC' as const,
  CO: 'CO' as const,
  KM: 'KM' as const,
  CG: 'CG' as const,
  CD: 'CD' as const,
  CK: 'CK' as const,
  CR: 'CR' as const,
  CI: 'CI' as const,
  HR: 'HR' as const,
  CW: 'CW' as const,
  CY: 'CY' as const,
  CZ: 'CZ' as const,
  DK: 'DK' as const,
  DJ: 'DJ' as const,
  DM: 'DM' as const,
  DO: 'DO' as const,
  EC: 'EC' as const,
  EG: 'EG' as const,
  SV: 'SV' as const,
  GQ: 'GQ' as const,
  ER: 'ER' as const,
  EE: 'EE' as const,
  ET: 'ET' as const,
  FK: 'FK' as const,
  FO: 'FO' as const,
  FJ: 'FJ' as const,
  FI: 'FI' as const,
  FR: 'FR' as const,
  GF: 'GF' as const,
  PF: 'PF' as const,
  TF: 'TF' as const,
  GA: 'GA' as const,
  GM: 'GM' as const,
  GE: 'GE' as const,
  DE: 'DE' as const,
  GH: 'GH' as const,
  GI: 'GI' as const,
  GR: 'GR' as const,
  GL: 'GL' as const,
  GD: 'GD' as const,
  GP: 'GP' as const,
  GU: 'GU' as const,
  GT: 'GT' as const,
  GG: 'GG' as const,
  GN: 'GN' as const,
  GW: 'GW' as const,
  GY: 'GY' as const,
  HT: 'HT' as const,
  HM: 'HM' as const,
  HN: 'HN' as const,
  HK: 'HK' as const,
  HU: 'HU' as const,
  IS: 'IS' as const,
  IN: 'IN' as const,
  ID: 'ID' as const,
  IR: 'IR' as const,
  IQ: 'IQ' as const,
  IE: 'IE' as const,
  IM: 'IM' as const,
  IL: 'IL' as const,
  IT: 'IT' as const,
  JM: 'JM' as const,
  JP: 'JP' as const,
  JE: 'JE' as const,
  JO: 'JO' as const,
  KZ: 'KZ' as const,
  KE: 'KE' as const,
  KI: 'KI' as const,
  KR: 'KR' as const,
  KW: 'KW' as const,
  KG: 'KG' as const,
  LA: 'LA' as const,
  LV: 'LV' as const,
  LB: 'LB' as const,
  LS: 'LS' as const,
  LR: 'LR' as const,
  LY: 'LY' as const,
  LI: 'LI' as const,
  LT: 'LT' as const,
  LU: 'LU' as const,
  MO: 'MO' as const,
  MK: 'MK' as const,
  MG: 'MG' as const,
  MW: 'MW' as const,
  MY: 'MY' as const,
  MV: 'MV' as const,
  ML: 'ML' as const,
  MT: 'MT' as const,
  MH: 'MH' as const,
  MQ: 'MQ' as const,
  MR: 'MR' as const,
  MU: 'MU' as const,
  YT: 'YT' as const,
  MX: 'MX' as const,
  FM: 'FM' as const,
  MD: 'MD' as const,
  MC: 'MC' as const,
  MN: 'MN' as const,
  ME: 'ME' as const,
  MS: 'MS' as const,
  MA: 'MA' as const,
  MZ: 'MZ' as const,
  MM: 'MM' as const,
  NA: 'NA' as const,
  NR: 'NR' as const,
  NP: 'NP' as const,
  NL: 'NL' as const,
  NC: 'NC' as const,
  NZ: 'NZ' as const,
  NI: 'NI' as const,
  NE: 'NE' as const,
  NG: 'NG' as const,
  NU: 'NU' as const,
  NF: 'NF' as const,
  MP: 'MP' as const,
  NO: 'NO' as const,
  OM: 'OM' as const,
  PK: 'PK' as const,
  PW: 'PW' as const,
  PS: 'PS' as const,
  PA: 'PA' as const,
  PG: 'PG' as const,
  PY: 'PY' as const,
  PE: 'PE' as const,
  PH: 'PH' as const,
  PN: 'PN' as const,
  PL: 'PL' as const,
  PT: 'PT' as const,
  PR: 'PR' as const,
  QA: 'QA' as const,
  RE: 'RE' as const,
  RO: 'RO' as const,
  RU: 'RU' as const,
  RW: 'RW' as const,
  BL: 'BL' as const,
  SH: 'SH' as const,
  KN: 'KN' as const,
  LC: 'LC' as const,
  MF: 'MF' as const,
  PM: 'PM' as const,
  VC: 'VC' as const,
  WS: 'WS' as const,
  SM: 'SM' as const,
  ST: 'ST' as const,
  SA: 'SA' as const,
  SN: 'SN' as const,
  RS: 'RS' as const,
  SC: 'SC' as const,
  SL: 'SL' as const,
  SG: 'SG' as const,
  SX: 'SX' as const,
  SK: 'SK' as const,
  SI: 'SI' as const,
  SB: 'SB' as const,
  SO: 'SO' as const,
  ZA: 'ZA' as const,
  GS: 'GS' as const,
  SS: 'SS' as const,
  ES: 'ES' as const,
  LK: 'LK' as const,
  SD: 'SD' as const,
  SR: 'SR' as const,
  SJ: 'SJ' as const,
  SZ: 'SZ' as const,
  SE: 'SE' as const,
  CH: 'CH' as const,
  TW: 'TW' as const,
  TJ: 'TJ' as const,
  TZ: 'TZ' as const,
  TH: 'TH' as const,
  TL: 'TL' as const,
  TG: 'TG' as const,
  TK: 'TK' as const,
  TO: 'TO' as const,
  TT: 'TT' as const,
  TN: 'TN' as const,
  TR: 'TR' as const,
  TM: 'TM' as const,
  TC: 'TC' as const,
  TV: 'TV' as const,
  UG: 'UG' as const,
  UA: 'UA' as const,
  AE: 'AE' as const,
  GB: 'GB' as const,
  UM: 'UM' as const,
  US: 'US' as const,
  UY: 'UY' as const,
  UZ: 'UZ' as const,
  VU: 'VU' as const,
  VA: 'VA' as const,
  VE: 'VE' as const,
  VN: 'VN' as const,
  VG: 'VG' as const,
  VI: 'VI' as const,
  WF: 'WF' as const,
  EH: 'EH' as const,
  YE: 'YE' as const,
  ZM: 'ZM' as const,
  ZW: 'ZW' as const,
};

export const enumSponsorsGoalKind = {
  TOTAL_SPONSORS_COUNT: 'TOTAL_SPONSORS_COUNT' as const,
  MONTHLY_SPONSORSHIP_AMOUNT: 'MONTHLY_SPONSORSHIP_AMOUNT' as const,
};

export const enumSponsorsListingFeaturedItemFeatureableType = {
  REPOSITORY: 'REPOSITORY' as const,
  USER: 'USER' as const,
};

export const enumSponsorsTierOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  MONTHLY_PRICE_IN_CENTS: 'MONTHLY_PRICE_IN_CENTS' as const,
};

export const enumSponsorshipNewsletterOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumSponsorshipOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumSponsorshipPrivacy = {
  PUBLIC: 'PUBLIC' as const,
  PRIVATE: 'PRIVATE' as const,
};

export const enumSquashMergeCommitMessage = {
  PR_BODY: 'PR_BODY' as const,
  COMMIT_MESSAGES: 'COMMIT_MESSAGES' as const,
  BLANK: 'BLANK' as const,
};

export const enumSquashMergeCommitTitle = {
  PR_TITLE: 'PR_TITLE' as const,
  COMMIT_OR_PR_TITLE: 'COMMIT_OR_PR_TITLE' as const,
};

export const enumStarOrderField = {
  STARRED_AT: 'STARRED_AT' as const,
};

export const enumStatusState = {
  EXPECTED: 'EXPECTED' as const,
  ERROR: 'ERROR' as const,
  FAILURE: 'FAILURE' as const,
  PENDING: 'PENDING' as const,
  SUCCESS: 'SUCCESS' as const,
};

export const enumSubscriptionState = {
  UNSUBSCRIBED: 'UNSUBSCRIBED' as const,
  SUBSCRIBED: 'SUBSCRIBED' as const,
  IGNORED: 'IGNORED' as const,
};

export const enumTeamDiscussionCommentOrderField = {
  NUMBER: 'NUMBER' as const,
};

export const enumTeamDiscussionOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumTeamMemberOrderField = {
  LOGIN: 'LOGIN' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumTeamMemberRole = {
  MAINTAINER: 'MAINTAINER' as const,
  MEMBER: 'MEMBER' as const,
};

export const enumTeamMembershipType = {
  IMMEDIATE: 'IMMEDIATE' as const,
  CHILD_TEAM: 'CHILD_TEAM' as const,
  ALL: 'ALL' as const,
};

export const enumTeamNotificationSetting = {
  NOTIFICATIONS_ENABLED: 'NOTIFICATIONS_ENABLED' as const,
  NOTIFICATIONS_DISABLED: 'NOTIFICATIONS_DISABLED' as const,
};

export const enumTeamOrderField = {
  NAME: 'NAME' as const,
};

export const enumTeamPrivacy = {
  SECRET: 'SECRET' as const,
  VISIBLE: 'VISIBLE' as const,
};

export const enumTeamRepositoryOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
  UPDATED_AT: 'UPDATED_AT' as const,
  PUSHED_AT: 'PUSHED_AT' as const,
  NAME: 'NAME' as const,
  PERMISSION: 'PERMISSION' as const,
  STARGAZERS: 'STARGAZERS' as const,
};

export const enumTeamRole = {
  ADMIN: 'ADMIN' as const,
  MEMBER: 'MEMBER' as const,
};

export const enumThreadSubscriptionFormAction = {
  NONE: 'NONE' as const,
  SUBSCRIBE: 'SUBSCRIBE' as const,
  UNSUBSCRIBE: 'UNSUBSCRIBE' as const,
};

export const enumThreadSubscriptionState = {
  UNAVAILABLE: 'UNAVAILABLE' as const,
  DISABLED: 'DISABLED' as const,
  IGNORING_LIST: 'IGNORING_LIST' as const,
  SUBSCRIBED_TO_THREAD_EVENTS: 'SUBSCRIBED_TO_THREAD_EVENTS' as const,
  IGNORING_THREAD: 'IGNORING_THREAD' as const,
  SUBSCRIBED_TO_LIST: 'SUBSCRIBED_TO_LIST' as const,
  SUBSCRIBED_TO_THREAD_TYPE: 'SUBSCRIBED_TO_THREAD_TYPE' as const,
  SUBSCRIBED_TO_THREAD: 'SUBSCRIBED_TO_THREAD' as const,
  NONE: 'NONE' as const,
};

export const enumTopicSuggestionDeclineReason = {
  NOT_RELEVANT: 'NOT_RELEVANT' as const,
  TOO_SPECIFIC: 'TOO_SPECIFIC' as const,
  PERSONAL_PREFERENCE: 'PERSONAL_PREFERENCE' as const,
  TOO_GENERAL: 'TOO_GENERAL' as const,
};

export const enumTrackedIssueStates = {
  OPEN: 'OPEN' as const,
  CLOSED: 'CLOSED' as const,
};

export const enumUserBlockDuration = {
  ONE_DAY: 'ONE_DAY' as const,
  THREE_DAYS: 'THREE_DAYS' as const,
  ONE_WEEK: 'ONE_WEEK' as const,
  ONE_MONTH: 'ONE_MONTH' as const,
  PERMANENT: 'PERMANENT' as const,
};

export const enumUserStatusOrderField = {
  UPDATED_AT: 'UPDATED_AT' as const,
};

export const enumVerifiableDomainOrderField = {
  DOMAIN: 'DOMAIN' as const,
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumWorkflowRunOrderField = {
  CREATED_AT: 'CREATED_AT' as const,
};

export const enumWorkflowState = {
  ACTIVE: 'ACTIVE' as const,
  DELETED: 'DELETED' as const,
  DISABLED_FORK: 'DISABLED_FORK' as const,
  DISABLED_INACTIVITY: 'DISABLED_INACTIVITY' as const,
  DISABLED_MANUALLY: 'DISABLED_MANUALLY' as const,
};
